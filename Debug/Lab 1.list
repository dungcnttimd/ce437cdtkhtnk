
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b38  08008b38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b38  08008b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b40  08008b40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000541c  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005494  20005494  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000163e3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340a  00000000  00000000  00036487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f00  00000000  00000000  0003a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004111  00000000  00000000  0003b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013701  00000000  00000000  0003f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c375d  00000000  00000000  00052fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011672f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f4  00000000  00000000  00116780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008944 	.word	0x08008944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008944 	.word	0x08008944

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 bad2 	b.w	8000bb4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f83a 	bl	8000690 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__aeabi_f2lz>:
 8000628:	ee07 0a90 	vmov	s15, r0
 800062c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000634:	d401      	bmi.n	800063a <__aeabi_f2lz+0x12>
 8000636:	f000 b80b 	b.w	8000650 <__aeabi_f2ulz>
 800063a:	eef1 7a67 	vneg.f32	s15, s15
 800063e:	b508      	push	{r3, lr}
 8000640:	ee17 0a90 	vmov	r0, s15
 8000644:	f000 f804 	bl	8000650 <__aeabi_f2ulz>
 8000648:	4240      	negs	r0, r0
 800064a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800064e:	bd08      	pop	{r3, pc}

08000650 <__aeabi_f2ulz>:
 8000650:	b5d0      	push	{r4, r6, r7, lr}
 8000652:	f7ff ff79 	bl	8000548 <__aeabi_f2d>
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__aeabi_f2ulz+0x38>)
 8000658:	2200      	movs	r2, #0
 800065a:	4606      	mov	r6, r0
 800065c:	460f      	mov	r7, r1
 800065e:	f000 f97f 	bl	8000960 <__aeabi_dmul>
 8000662:	f000 faa9 	bl	8000bb8 <__aeabi_d2uiz>
 8000666:	4604      	mov	r4, r0
 8000668:	f7ff ff4c 	bl	8000504 <__aeabi_ui2d>
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <__aeabi_f2ulz+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	f000 f976 	bl	8000960 <__aeabi_dmul>
 8000674:	4602      	mov	r2, r0
 8000676:	460b      	mov	r3, r1
 8000678:	4630      	mov	r0, r6
 800067a:	4639      	mov	r1, r7
 800067c:	f7ff fe04 	bl	8000288 <__aeabi_dsub>
 8000680:	f000 fa9a 	bl	8000bb8 <__aeabi_d2uiz>
 8000684:	4621      	mov	r1, r4
 8000686:	bdd0      	pop	{r4, r6, r7, pc}
 8000688:	3df00000 	.word	0x3df00000
 800068c:	41f00000 	.word	0x41f00000

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9d08      	ldr	r5, [sp, #32]
 8000696:	4604      	mov	r4, r0
 8000698:	468e      	mov	lr, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d14d      	bne.n	800073a <__udivmoddi4+0xaa>
 800069e:	428a      	cmp	r2, r1
 80006a0:	4694      	mov	ip, r2
 80006a2:	d969      	bls.n	8000778 <__udivmoddi4+0xe8>
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	b152      	cbz	r2, 80006c0 <__udivmoddi4+0x30>
 80006aa:	fa01 f302 	lsl.w	r3, r1, r2
 80006ae:	f1c2 0120 	rsb	r1, r2, #32
 80006b2:	fa20 f101 	lsr.w	r1, r0, r1
 80006b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ba:	ea41 0e03 	orr.w	lr, r1, r3
 80006be:	4094      	lsls	r4, r2
 80006c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006c4:	0c21      	lsrs	r1, r4, #16
 80006c6:	fbbe f6f8 	udiv	r6, lr, r8
 80006ca:	fa1f f78c 	uxth.w	r7, ip
 80006ce:	fb08 e316 	mls	r3, r8, r6, lr
 80006d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006d6:	fb06 f107 	mul.w	r1, r6, r7
 80006da:	4299      	cmp	r1, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x64>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80006e6:	f080 811f 	bcs.w	8000928 <__udivmoddi4+0x298>
 80006ea:	4299      	cmp	r1, r3
 80006ec:	f240 811c 	bls.w	8000928 <__udivmoddi4+0x298>
 80006f0:	3e02      	subs	r6, #2
 80006f2:	4463      	add	r3, ip
 80006f4:	1a5b      	subs	r3, r3, r1
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000700:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000704:	fb00 f707 	mul.w	r7, r0, r7
 8000708:	42a7      	cmp	r7, r4
 800070a:	d90a      	bls.n	8000722 <__udivmoddi4+0x92>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 33ff 	add.w	r3, r0, #4294967295
 8000714:	f080 810a 	bcs.w	800092c <__udivmoddi4+0x29c>
 8000718:	42a7      	cmp	r7, r4
 800071a:	f240 8107 	bls.w	800092c <__udivmoddi4+0x29c>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000726:	1be4      	subs	r4, r4, r7
 8000728:	2600      	movs	r6, #0
 800072a:	b11d      	cbz	r5, 8000734 <__udivmoddi4+0xa4>
 800072c:	40d4      	lsrs	r4, r2
 800072e:	2300      	movs	r3, #0
 8000730:	e9c5 4300 	strd	r4, r3, [r5]
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	428b      	cmp	r3, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0xc2>
 800073e:	2d00      	cmp	r5, #0
 8000740:	f000 80ef 	beq.w	8000922 <__udivmoddi4+0x292>
 8000744:	2600      	movs	r6, #0
 8000746:	e9c5 0100 	strd	r0, r1, [r5]
 800074a:	4630      	mov	r0, r6
 800074c:	4631      	mov	r1, r6
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	fab3 f683 	clz	r6, r3
 8000756:	2e00      	cmp	r6, #0
 8000758:	d14a      	bne.n	80007f0 <__udivmoddi4+0x160>
 800075a:	428b      	cmp	r3, r1
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xd4>
 800075e:	4282      	cmp	r2, r0
 8000760:	f200 80f9 	bhi.w	8000956 <__udivmoddi4+0x2c6>
 8000764:	1a84      	subs	r4, r0, r2
 8000766:	eb61 0303 	sbc.w	r3, r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	469e      	mov	lr, r3
 800076e:	2d00      	cmp	r5, #0
 8000770:	d0e0      	beq.n	8000734 <__udivmoddi4+0xa4>
 8000772:	e9c5 4e00 	strd	r4, lr, [r5]
 8000776:	e7dd      	b.n	8000734 <__udivmoddi4+0xa4>
 8000778:	b902      	cbnz	r2, 800077c <__udivmoddi4+0xec>
 800077a:	deff      	udf	#255	; 0xff
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	2a00      	cmp	r2, #0
 8000782:	f040 8092 	bne.w	80008aa <__udivmoddi4+0x21a>
 8000786:	eba1 010c 	sub.w	r1, r1, ip
 800078a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078e:	fa1f fe8c 	uxth.w	lr, ip
 8000792:	2601      	movs	r6, #1
 8000794:	0c20      	lsrs	r0, r4, #16
 8000796:	fbb1 f3f7 	udiv	r3, r1, r7
 800079a:	fb07 1113 	mls	r1, r7, r3, r1
 800079e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a2:	fb0e f003 	mul.w	r0, lr, r3
 80007a6:	4288      	cmp	r0, r1
 80007a8:	d908      	bls.n	80007bc <__udivmoddi4+0x12c>
 80007aa:	eb1c 0101 	adds.w	r1, ip, r1
 80007ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0x12a>
 80007b4:	4288      	cmp	r0, r1
 80007b6:	f200 80cb 	bhi.w	8000950 <__udivmoddi4+0x2c0>
 80007ba:	4643      	mov	r3, r8
 80007bc:	1a09      	subs	r1, r1, r0
 80007be:	b2a4      	uxth	r4, r4
 80007c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c4:	fb07 1110 	mls	r1, r7, r0, r1
 80007c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007cc:	fb0e fe00 	mul.w	lr, lr, r0
 80007d0:	45a6      	cmp	lr, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x156>
 80007d4:	eb1c 0404 	adds.w	r4, ip, r4
 80007d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x154>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f200 80bb 	bhi.w	800095a <__udivmoddi4+0x2ca>
 80007e4:	4608      	mov	r0, r1
 80007e6:	eba4 040e 	sub.w	r4, r4, lr
 80007ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ee:	e79c      	b.n	800072a <__udivmoddi4+0x9a>
 80007f0:	f1c6 0720 	rsb	r7, r6, #32
 80007f4:	40b3      	lsls	r3, r6
 80007f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80007fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000802:	fa01 f306 	lsl.w	r3, r1, r6
 8000806:	431c      	orrs	r4, r3
 8000808:	40f9      	lsrs	r1, r7
 800080a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800080e:	fa00 f306 	lsl.w	r3, r0, r6
 8000812:	fbb1 f8f9 	udiv	r8, r1, r9
 8000816:	0c20      	lsrs	r0, r4, #16
 8000818:	fa1f fe8c 	uxth.w	lr, ip
 800081c:	fb09 1118 	mls	r1, r9, r8, r1
 8000820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000824:	fb08 f00e 	mul.w	r0, r8, lr
 8000828:	4288      	cmp	r0, r1
 800082a:	fa02 f206 	lsl.w	r2, r2, r6
 800082e:	d90b      	bls.n	8000848 <__udivmoddi4+0x1b8>
 8000830:	eb1c 0101 	adds.w	r1, ip, r1
 8000834:	f108 3aff 	add.w	sl, r8, #4294967295
 8000838:	f080 8088 	bcs.w	800094c <__udivmoddi4+0x2bc>
 800083c:	4288      	cmp	r0, r1
 800083e:	f240 8085 	bls.w	800094c <__udivmoddi4+0x2bc>
 8000842:	f1a8 0802 	sub.w	r8, r8, #2
 8000846:	4461      	add	r1, ip
 8000848:	1a09      	subs	r1, r1, r0
 800084a:	b2a4      	uxth	r4, r4
 800084c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000850:	fb09 1110 	mls	r1, r9, r0, r1
 8000854:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000858:	fb00 fe0e 	mul.w	lr, r0, lr
 800085c:	458e      	cmp	lr, r1
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x1e2>
 8000860:	eb1c 0101 	adds.w	r1, ip, r1
 8000864:	f100 34ff 	add.w	r4, r0, #4294967295
 8000868:	d26c      	bcs.n	8000944 <__udivmoddi4+0x2b4>
 800086a:	458e      	cmp	lr, r1
 800086c:	d96a      	bls.n	8000944 <__udivmoddi4+0x2b4>
 800086e:	3802      	subs	r0, #2
 8000870:	4461      	add	r1, ip
 8000872:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000876:	fba0 9402 	umull	r9, r4, r0, r2
 800087a:	eba1 010e 	sub.w	r1, r1, lr
 800087e:	42a1      	cmp	r1, r4
 8000880:	46c8      	mov	r8, r9
 8000882:	46a6      	mov	lr, r4
 8000884:	d356      	bcc.n	8000934 <__udivmoddi4+0x2a4>
 8000886:	d053      	beq.n	8000930 <__udivmoddi4+0x2a0>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x212>
 800088a:	ebb3 0208 	subs.w	r2, r3, r8
 800088e:	eb61 010e 	sbc.w	r1, r1, lr
 8000892:	fa01 f707 	lsl.w	r7, r1, r7
 8000896:	fa22 f306 	lsr.w	r3, r2, r6
 800089a:	40f1      	lsrs	r1, r6
 800089c:	431f      	orrs	r7, r3
 800089e:	e9c5 7100 	strd	r7, r1, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	40d8      	lsrs	r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa21 f303 	lsr.w	r3, r1, r3
 80008b8:	4091      	lsls	r1, r2
 80008ba:	4301      	orrs	r1, r0
 80008bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c8:	fb07 3610 	mls	r6, r7, r0, r3
 80008cc:	0c0b      	lsrs	r3, r1, #16
 80008ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008d2:	fb00 f60e 	mul.w	r6, r0, lr
 80008d6:	429e      	cmp	r6, r3
 80008d8:	fa04 f402 	lsl.w	r4, r4, r2
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x260>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008e6:	d22f      	bcs.n	8000948 <__udivmoddi4+0x2b8>
 80008e8:	429e      	cmp	r6, r3
 80008ea:	d92d      	bls.n	8000948 <__udivmoddi4+0x2b8>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1b9b      	subs	r3, r3, r6
 80008f2:	b289      	uxth	r1, r1
 80008f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f8:	fb07 3316 	mls	r3, r7, r6, r3
 80008fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000900:	fb06 f30e 	mul.w	r3, r6, lr
 8000904:	428b      	cmp	r3, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x28a>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000910:	d216      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 8000912:	428b      	cmp	r3, r1
 8000914:	d914      	bls.n	8000940 <__udivmoddi4+0x2b0>
 8000916:	3e02      	subs	r6, #2
 8000918:	4461      	add	r1, ip
 800091a:	1ac9      	subs	r1, r1, r3
 800091c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000920:	e738      	b.n	8000794 <__udivmoddi4+0x104>
 8000922:	462e      	mov	r6, r5
 8000924:	4628      	mov	r0, r5
 8000926:	e705      	b.n	8000734 <__udivmoddi4+0xa4>
 8000928:	4606      	mov	r6, r0
 800092a:	e6e3      	b.n	80006f4 <__udivmoddi4+0x64>
 800092c:	4618      	mov	r0, r3
 800092e:	e6f8      	b.n	8000722 <__udivmoddi4+0x92>
 8000930:	454b      	cmp	r3, r9
 8000932:	d2a9      	bcs.n	8000888 <__udivmoddi4+0x1f8>
 8000934:	ebb9 0802 	subs.w	r8, r9, r2
 8000938:	eb64 0e0c 	sbc.w	lr, r4, ip
 800093c:	3801      	subs	r0, #1
 800093e:	e7a3      	b.n	8000888 <__udivmoddi4+0x1f8>
 8000940:	4646      	mov	r6, r8
 8000942:	e7ea      	b.n	800091a <__udivmoddi4+0x28a>
 8000944:	4620      	mov	r0, r4
 8000946:	e794      	b.n	8000872 <__udivmoddi4+0x1e2>
 8000948:	4640      	mov	r0, r8
 800094a:	e7d1      	b.n	80008f0 <__udivmoddi4+0x260>
 800094c:	46d0      	mov	r8, sl
 800094e:	e77b      	b.n	8000848 <__udivmoddi4+0x1b8>
 8000950:	3b02      	subs	r3, #2
 8000952:	4461      	add	r1, ip
 8000954:	e732      	b.n	80007bc <__udivmoddi4+0x12c>
 8000956:	4630      	mov	r0, r6
 8000958:	e709      	b.n	800076e <__udivmoddi4+0xde>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	e742      	b.n	80007e6 <__udivmoddi4+0x156>

08000960 <__aeabi_dmul>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000966:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800096a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096e:	bf1d      	ittte	ne
 8000970:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000974:	ea94 0f0c 	teqne	r4, ip
 8000978:	ea95 0f0c 	teqne	r5, ip
 800097c:	f000 f8de 	bleq	8000b3c <__aeabi_dmul+0x1dc>
 8000980:	442c      	add	r4, r5
 8000982:	ea81 0603 	eor.w	r6, r1, r3
 8000986:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800098a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800098e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000992:	bf18      	it	ne
 8000994:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a0:	d038      	beq.n	8000a14 <__aeabi_dmul+0xb4>
 80009a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80009a6:	f04f 0500 	mov.w	r5, #0
 80009aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80009ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80009b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80009b6:	f04f 0600 	mov.w	r6, #0
 80009ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009be:	f09c 0f00 	teq	ip, #0
 80009c2:	bf18      	it	ne
 80009c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80009c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80009cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80009d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80009d4:	d204      	bcs.n	80009e0 <__aeabi_dmul+0x80>
 80009d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80009da:	416d      	adcs	r5, r5
 80009dc:	eb46 0606 	adc.w	r6, r6, r6
 80009e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80009e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009f8:	bf88      	it	hi
 80009fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009fe:	d81e      	bhi.n	8000a3e <__aeabi_dmul+0xde>
 8000a00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000a0a:	f150 0000 	adcs.w	r0, r0, #0
 8000a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a18:	ea46 0101 	orr.w	r1, r6, r1
 8000a1c:	ea40 0002 	orr.w	r0, r0, r2
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a28:	bfc2      	ittt	gt
 8000a2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a32:	bd70      	popgt	{r4, r5, r6, pc}
 8000a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a38:	f04f 0e00 	mov.w	lr, #0
 8000a3c:	3c01      	subs	r4, #1
 8000a3e:	f300 80ab 	bgt.w	8000b98 <__aeabi_dmul+0x238>
 8000a42:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a46:	bfde      	ittt	le
 8000a48:	2000      	movle	r0, #0
 8000a4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a4e:	bd70      	pople	{r4, r5, r6, pc}
 8000a50:	f1c4 0400 	rsb	r4, r4, #0
 8000a54:	3c20      	subs	r4, #32
 8000a56:	da35      	bge.n	8000ac4 <__aeabi_dmul+0x164>
 8000a58:	340c      	adds	r4, #12
 8000a5a:	dc1b      	bgt.n	8000a94 <__aeabi_dmul+0x134>
 8000a5c:	f104 0414 	add.w	r4, r4, #20
 8000a60:	f1c4 0520 	rsb	r5, r4, #32
 8000a64:	fa00 f305 	lsl.w	r3, r0, r5
 8000a68:	fa20 f004 	lsr.w	r0, r0, r4
 8000a6c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a70:	ea40 0002 	orr.w	r0, r0, r2
 8000a74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a80:	fa21 f604 	lsr.w	r6, r1, r4
 8000a84:	eb42 0106 	adc.w	r1, r2, r6
 8000a88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a8c:	bf08      	it	eq
 8000a8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	f1c4 040c 	rsb	r4, r4, #12
 8000a98:	f1c4 0520 	rsb	r5, r4, #32
 8000a9c:	fa00 f304 	lsl.w	r3, r0, r4
 8000aa0:	fa20 f005 	lsr.w	r0, r0, r5
 8000aa4:	fa01 f204 	lsl.w	r2, r1, r4
 8000aa8:	ea40 0002 	orr.w	r0, r0, r2
 8000aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ab4:	f141 0100 	adc.w	r1, r1, #0
 8000ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000abc:	bf08      	it	eq
 8000abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f1c4 0520 	rsb	r5, r4, #32
 8000ac8:	fa00 f205 	lsl.w	r2, r0, r5
 8000acc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ad0:	fa20 f304 	lsr.w	r3, r0, r4
 8000ad4:	fa01 f205 	lsl.w	r2, r1, r5
 8000ad8:	ea43 0302 	orr.w	r3, r3, r2
 8000adc:	fa21 f004 	lsr.w	r0, r1, r4
 8000ae0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ae4:	fa21 f204 	lsr.w	r2, r1, r4
 8000ae8:	ea20 0002 	bic.w	r0, r0, r2
 8000aec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000af4:	bf08      	it	eq
 8000af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	f094 0f00 	teq	r4, #0
 8000b00:	d10f      	bne.n	8000b22 <__aeabi_dmul+0x1c2>
 8000b02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000b06:	0040      	lsls	r0, r0, #1
 8000b08:	eb41 0101 	adc.w	r1, r1, r1
 8000b0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b10:	bf08      	it	eq
 8000b12:	3c01      	subeq	r4, #1
 8000b14:	d0f7      	beq.n	8000b06 <__aeabi_dmul+0x1a6>
 8000b16:	ea41 0106 	orr.w	r1, r1, r6
 8000b1a:	f095 0f00 	teq	r5, #0
 8000b1e:	bf18      	it	ne
 8000b20:	4770      	bxne	lr
 8000b22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	eb43 0303 	adc.w	r3, r3, r3
 8000b2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b30:	bf08      	it	eq
 8000b32:	3d01      	subeq	r5, #1
 8000b34:	d0f7      	beq.n	8000b26 <__aeabi_dmul+0x1c6>
 8000b36:	ea43 0306 	orr.w	r3, r3, r6
 8000b3a:	4770      	bx	lr
 8000b3c:	ea94 0f0c 	teq	r4, ip
 8000b40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b44:	bf18      	it	ne
 8000b46:	ea95 0f0c 	teqne	r5, ip
 8000b4a:	d00c      	beq.n	8000b66 <__aeabi_dmul+0x206>
 8000b4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b56:	d1d1      	bne.n	8000afc <__aeabi_dmul+0x19c>
 8000b58:	ea81 0103 	eor.w	r1, r1, r3
 8000b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
 8000b66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b6a:	bf06      	itte	eq
 8000b6c:	4610      	moveq	r0, r2
 8000b6e:	4619      	moveq	r1, r3
 8000b70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b74:	d019      	beq.n	8000baa <__aeabi_dmul+0x24a>
 8000b76:	ea94 0f0c 	teq	r4, ip
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dmul+0x222>
 8000b7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b80:	d113      	bne.n	8000baa <__aeabi_dmul+0x24a>
 8000b82:	ea95 0f0c 	teq	r5, ip
 8000b86:	d105      	bne.n	8000b94 <__aeabi_dmul+0x234>
 8000b88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b8c:	bf1c      	itt	ne
 8000b8e:	4610      	movne	r0, r2
 8000b90:	4619      	movne	r1, r3
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dmul+0x24a>
 8000b94:	ea81 0103 	eor.w	r1, r1, r3
 8000b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ba0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
 8000baa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000bae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f001 fb0e 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f83e 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f000 f8d0 	bl	8000da8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c08:	f000 f8a4 	bl	8000d54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c0c:	f003 fc48 	bl	80044a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RcvUART_Task */
  RcvUART_TaskHandle = osThreadNew(RcvUART_TaskHandler, NULL, &RcvUART_Task_attributes);
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <main+0x5c>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <main+0x60>)
 8000c16:	f003 fca2 	bl	800455e <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <main+0x64>)
 8000c1e:	6013      	str	r3, [r2, #0]

  /* creation of LedControl_Task */
  LedControl_TaskHandle = osThreadNew(LedControl_TaskHandler, NULL, &LedControl_Task_attributes);
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <main+0x68>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <main+0x6c>)
 8000c26:	f003 fc9a 	bl	800455e <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <main+0x70>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* creation of Print_Task */
  Print_TaskHandle = osThreadNew(Print_TaskHandler, NULL, &Print_Task_attributes);
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <main+0x74>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <main+0x78>)
 8000c36:	f003 fc92 	bl	800455e <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <main+0x7c>)
 8000c3e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of DataFlag */
  DataFlagHandle = osEventFlagsNew(&DataFlag_attributes);
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <main+0x80>)
 8000c42:	f003 fd1e 	bl	8004682 <osEventFlagsNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <main+0x84>)
 8000c4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c4c:	f003 fc4c 	bl	80044e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <main+0x58>
 8000c52:	bf00      	nop
 8000c54:	08008a10 	.word	0x08008a10
 8000c58:	08000f49 	.word	0x08000f49
 8000c5c:	200000d8 	.word	0x200000d8
 8000c60:	08008a34 	.word	0x08008a34
 8000c64:	08000fc9 	.word	0x08000fc9
 8000c68:	200000dc 	.word	0x200000dc
 8000c6c:	08008a58 	.word	0x08008a58
 8000c70:	0800104d 	.word	0x0800104d
 8000c74:	200000e0 	.word	0x200000e0
 8000c78:	08008a7c 	.word	0x08008a7c
 8000c7c:	200000e4 	.word	0x200000e4

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	; 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f007 f936 	bl	8007f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemClock_Config+0xcc>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cf4:	23a8      	movs	r3, #168	; 0xa8
 8000cf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fe55 	bl	80029b4 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d10:	f000 f9d6 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2105      	movs	r1, #5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 f8b6 	bl	8002ea4 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d3e:	f000 f9bf 	bl	80010c0 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	; 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART3_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d8c:	f002 faaa 	bl	80032e4 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 f993 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000094 	.word	0x20000094
 8000da4:	40004800 	.word	0x40004800

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_GPIO_Init+0xb4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	210f      	movs	r1, #15
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000e34:	f001 fda4 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_GPIO_Init+0xb8>)
 8000e50:	f001 fbfa 	bl	8002648 <HAL_GPIO_Init>

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_UARTEx_RxEventCallback+0x30>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d108      	bne.n	8000e8c <HAL_UARTEx_RxEventCallback+0x28>
	{
		osEventFlagsSet(DataFlagHandle, DataFlag_NewData);
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_UARTEx_RxEventCallback+0x34>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fc3d 	bl	8004700 <osEventFlagsSet>
		SyncPrintf("Set Flag \r\n");
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_UARTEx_RxEventCallback+0x38>)
 8000e88:	f000 fa3c 	bl	8001304 <SyncPrintf>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40004800 	.word	0x40004800
 8000e98:	200000e4 	.word	0x200000e4
 8000e9c:	08008994 	.word	0x08008994

08000ea0 <ControlLed>:

void ControlLed(lwjson_t LedState_Json)
{
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	f107 0c18 	add.w	ip, r7, #24
 8000eac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	const lwjson_token_t* Led;

	for(uint8_t i=0; i<NoLed; ++i)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e038      	b.n	8000f28 <ControlLed+0x88>
	{
		char LedKey[5];
		sprintf(LedKey,"LED%d",i);
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4921      	ldr	r1, [pc, #132]	; (8000f40 <ControlLed+0xa0>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f007 f935 	bl	800812c <siprintf>

		if ((Led = lwjson_find(&LedState_Json, LedKey)) != NULL)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f107 0018 	add.w	r0, r7, #24
 8000eca:	f001 f982 	bl	80021d2 <lwjson_find>
 8000ece:	60b8      	str	r0, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d025      	beq.n	8000f22 <ControlLed+0x82>
		{
			if(Led->type == LWJSON_TYPE_NUM_INT)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d121      	bne.n	8000f22 <ControlLed+0x82>
			{
				if(lwjson_get_val_int(Led) == 1)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <ControlLed+0x6e>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d110      	bne.n	8000f0e <ControlLed+0x6e>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ef2:	1e51      	subs	r1, r2, #1
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	d10a      	bne.n	8000f0e <ControlLed+0x6e>
				{
					HAL_GPIO_WritePin(Led_Port, 1 << (Led_PinStart + i), GPIO_PIN_SET);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2201      	movs	r2, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	480f      	ldr	r0, [pc, #60]	; (8000f44 <ControlLed+0xa4>)
 8000f08:	f001 fd3a 	bl	8002980 <HAL_GPIO_WritePin>
 8000f0c:	e009      	b.n	8000f22 <ControlLed+0x82>
				}
				else
				{
					HAL_GPIO_WritePin(Led_Port, 1 << (Led_PinStart + i), GPIO_PIN_RESET);
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2201      	movs	r2, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <ControlLed+0xa4>)
 8000f1e:	f001 fd2f 	bl	8002980 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<NoLed; ++i)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d9c3      	bls.n	8000eb6 <ControlLed+0x16>
				}
			}
		}
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	080089a0 	.word	0x080089a0
 8000f44:	40020400 	.word	0x40020400

08000f48 <RcvUART_TaskHandler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RcvUART_TaskHandler */
void RcvUART_TaskHandler(void *argument)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UARTEx_ReceiveToIdle_IT(&huart3, RcvBuffer, RcvBuffer_Size);
 8000f50:	2232      	movs	r2, #50	; 0x32
 8000f52:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <RcvUART_TaskHandler+0x6c>)
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <RcvUART_TaskHandler+0x70>)
 8000f56:	f002 faa4 	bl	80034a2 <HAL_UARTEx_ReceiveToIdle_IT>
	  osEventFlagsWait(DataFlagHandle, DataFlag_NewData, osFlagsWaitAll, osWaitForever);
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <RcvUART_TaskHandler+0x74>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	f003 fc62 	bl	800482e <osEventFlagsWait>
	  memmove(PrintData, RcvBuffer, sizeof(RcvBuffer));
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <RcvUART_TaskHandler+0x78>)
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <RcvUART_TaskHandler+0x6c>)
 8000f6e:	4614      	mov	r4, r2
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	8023      	strh	r3, [r4, #0]
	  memmove(LedData, RcvBuffer, sizeof(RcvBuffer));
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <RcvUART_TaskHandler+0x7c>)
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <RcvUART_TaskHandler+0x6c>)
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	8023      	strh	r3, [r4, #0]

	  memset(RcvBuffer,0, sizeof(RcvBuffer));
 8000f9a:	2232      	movs	r2, #50	; 0x32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <RcvUART_TaskHandler+0x6c>)
 8000fa0:	f006 ffae 	bl	8007f00 <memset>
	  osEventFlagsSet(DataFlagHandle, DataFlag_Print | DataFlag_Process);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <RcvUART_TaskHandler+0x74>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2106      	movs	r1, #6
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fba8 	bl	8004700 <osEventFlagsSet>
	  HAL_UARTEx_ReceiveToIdle_IT(&huart3, RcvBuffer, RcvBuffer_Size);
 8000fb0:	e7ce      	b.n	8000f50 <RcvUART_TaskHandler+0x8>
 8000fb2:	bf00      	nop
 8000fb4:	200000e8 	.word	0x200000e8
 8000fb8:	20000094 	.word	0x20000094
 8000fbc:	200000e4 	.word	0x200000e4
 8000fc0:	2000011c 	.word	0x2000011c
 8000fc4:	20000150 	.word	0x20000150

08000fc8 <LedControl_TaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedControl_TaskHandler */
void LedControl_TaskHandler(void *argument)
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b08d      	sub	sp, #52	; 0x34
 8000fcc:	af08      	add	r7, sp, #32
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedControl_TaskHandler */
	static lwjson_t LedState_Json;
	static lwjson_token_t tokens[RcvBuffer_Size];
	lwjson_init(&LedState_Json, tokens, LWJSON_ARRAYSIZE(tokens));
 8000fd0:	2232      	movs	r2, #50	; 0x32
 8000fd2:	4918      	ldr	r1, [pc, #96]	; (8001034 <LedControl_TaskHandler+0x6c>)
 8000fd4:	4818      	ldr	r0, [pc, #96]	; (8001038 <LedControl_TaskHandler+0x70>)
 8000fd6:	f000 fe68 	bl	8001caa <lwjson_init>
  /* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(DataFlagHandle, DataFlag_Process, osFlagsWaitAll, osWaitForever);
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <LedControl_TaskHandler+0x74>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	f003 fc22 	bl	800482e <osEventFlagsWait>
		lwjsonr_t jsonStatus =  lwjson_parse(&LedState_Json, (char*)LedData);
 8000fea:	4915      	ldr	r1, [pc, #84]	; (8001040 <LedControl_TaskHandler+0x78>)
 8000fec:	4812      	ldr	r0, [pc, #72]	; (8001038 <LedControl_TaskHandler+0x70>)
 8000fee:	f001 f8dd 	bl	80021ac <lwjson_parse>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
		SyncPrintf("RcvData: %s\r\n", LedData);
 8000ff6:	4912      	ldr	r1, [pc, #72]	; (8001040 <LedControl_TaskHandler+0x78>)
 8000ff8:	4812      	ldr	r0, [pc, #72]	; (8001044 <LedControl_TaskHandler+0x7c>)
 8000ffa:	f000 f983 	bl	8001304 <SyncPrintf>
		if( jsonStatus == lwjsonOK)
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d110      	bne.n	8001026 <LedControl_TaskHandler+0x5e>
		{
			SyncPrintf("Parse OK\r\n");
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <LedControl_TaskHandler+0x80>)
 8001006:	f000 f97d 	bl	8001304 <SyncPrintf>
			ControlLed(LedState_Json);
 800100a:	4e0b      	ldr	r6, [pc, #44]	; (8001038 <LedControl_TaskHandler+0x70>)
 800100c:	466d      	mov	r5, sp
 800100e:	f106 0410 	add.w	r4, r6, #16
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800101a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800101e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001022:	f7ff ff3d 	bl	8000ea0 <ControlLed>
		}
		memset(LedData, 0 ,sizeof(LedData));
 8001026:	2232      	movs	r2, #50	; 0x32
 8001028:	2100      	movs	r1, #0
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <LedControl_TaskHandler+0x78>)
 800102c:	f006 ff68 	bl	8007f00 <memset>
	{
 8001030:	e7d3      	b.n	8000fda <LedControl_TaskHandler+0x12>
 8001032:	bf00      	nop
 8001034:	200001b8 	.word	0x200001b8
 8001038:	20000188 	.word	0x20000188
 800103c:	200000e4 	.word	0x200000e4
 8001040:	20000150 	.word	0x20000150
 8001044:	080089a8 	.word	0x080089a8
 8001048:	080089b8 	.word	0x080089b8

0800104c <Print_TaskHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Print_TaskHandler */
void Print_TaskHandler(void *argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Print_TaskHandler */
	uint32_t PrevTime = osKernelGetTickCount();
 8001054:	f003 fa6e 	bl	8004534 <osKernelGetTickCount>
 8001058:	6178      	str	r0, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	  uint32_t Now = osKernelGetTickCount();
 800105a:	f003 fa6b 	bl	8004534 <osKernelGetTickCount>
 800105e:	6138      	str	r0, [r7, #16]
	  if(Now - PrevTime > 500)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800106a:	d905      	bls.n	8001078 <Print_TaskHandler+0x2c>
	  {
		SyncPrintf("Board Is Running \r\n");
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <Print_TaskHandler+0x64>)
 800106e:	f000 f949 	bl	8001304 <SyncPrintf>
		PrevTime = osKernelGetTickCount();
 8001072:	f003 fa5f 	bl	8004534 <osKernelGetTickCount>
 8001076:	6178      	str	r0, [r7, #20]
	  }


	  uint32_t DataFlagState = osEventFlagsGet(DataFlagHandle);
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <Print_TaskHandler+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fbb5 	bl	80047ec <osEventFlagsGet>
 8001082:	60f8      	str	r0, [r7, #12]
	  if(DataFlagState & DataFlag_Print)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0e5      	beq.n	800105a <Print_TaskHandler+0xe>
	  {
		osEventFlagsClear(DataFlagHandle, DataFlag_Print);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <Print_TaskHandler+0x68>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2102      	movs	r1, #2
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fb77 	bl	8004788 <osEventFlagsClear>
		SyncPrintf("Rcv %s",  PrintData);
 800109a:	4907      	ldr	r1, [pc, #28]	; (80010b8 <Print_TaskHandler+0x6c>)
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <Print_TaskHandler+0x70>)
 800109e:	f000 f931 	bl	8001304 <SyncPrintf>
		memset(PrintData, 0, sizeof(PrintData));
 80010a2:	2232      	movs	r2, #50	; 0x32
 80010a4:	2100      	movs	r1, #0
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <Print_TaskHandler+0x6c>)
 80010a8:	f006 ff2a 	bl	8007f00 <memset>
  {
 80010ac:	e7d5      	b.n	800105a <Print_TaskHandler+0xe>
 80010ae:	bf00      	nop
 80010b0:	080089c4 	.word	0x080089c4
 80010b4:	200000e4 	.word	0x200000e4
 80010b8:	2000011c 	.word	0x2000011c
 80010bc:	080089d8 	.word	0x080089d8

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x54>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_MspInit+0x54>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x54>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_MspInit+0x54>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_MspInit+0x54>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_MspInit+0x54>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	210f      	movs	r1, #15
 800110e:	f06f 0001 	mvn.w	r0, #1
 8001112:	f001 f9d0 	bl	80024b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_UART_MspInit+0x94>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d134      	bne.n	80011b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_UART_MspInit+0x98>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_UART_MspInit+0x98>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_UART_MspInit+0x98>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_UART_MspInit+0x98>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x98>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_UART_MspInit+0x98>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800117e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <HAL_UART_MspInit+0x9c>)
 800119c:	f001 fa54 	bl	8002648 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2105      	movs	r1, #5
 80011a4:	2027      	movs	r0, #39	; 0x27
 80011a6:	f001 f986 	bl	80024b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011aa:	2027      	movs	r0, #39	; 0x27
 80011ac:	f001 f99f 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004800 	.word	0x40004800
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020800 	.word	0x40020800

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f001 f864 	bl	80022c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011f8:	f005 fcaa 	bl	8006b50 <xTaskGetSchedulerState>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d001      	beq.n	8001206 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001202:	f006 fbc9 	bl	8007998 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <USART3_IRQHandler+0x10>)
 8001212:	f002 f9ab 	bl	800356c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000094 	.word	0x20000094

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f006 fe1c 	bl	8007e8c <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20020000 	.word	0x20020000
 8001280:	00000400 	.word	0x00000400
 8001284:	20000668 	.word	0x20000668
 8001288:	20005498 	.word	0x20005498

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff ffd7 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f006 fddb 	bl	8007e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fc89 	bl	8000bf8 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012f4:	08008b48 	.word	0x08008b48
  ldr r2, =_sbss
 80012f8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012fc:	20005494 	.word	0x20005494

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <SyncPrintf>:
{
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
}

int	SyncPrintf (const char *__restrict format, ...)
{
 8001304:	b40f      	push	{r0, r1, r2, r3}
 8001306:	b580      	push	{r7, lr}
 8001308:	b09c      	sub	sp, #112	; 0x70
 800130a:	af00      	add	r7, sp, #0
	osMutexAcquire(PrintfMutex, 0);
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <SyncPrintf+0x7c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 faf1 	bl	80048fa <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	2260      	movs	r2, #96	; 0x60
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f006 fdeb 	bl	8007f00 <memset>
	size_t size=sizeof(Buffer);
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	603b      	str	r3, [r7, #0]
	va_start(arg,format);
 800132e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001332:	66bb      	str	r3, [r7, #104]	; 0x68
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 8001334:	4639      	mov	r1, r7
 8001336:	1d38      	adds	r0, r7, #4
 8001338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800133a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800133c:	f006 ff5a 	bl	80081f4 <vasniprintf>
 8001340:	66f8      	str	r0, [r7, #108]	; 0x6c
	va_end(arg);
	if(Output != NULL)
 8001342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00d      	beq.n	8001364 <SyncPrintf+0x60>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b29a      	uxth	r2, r3
 800134c:	230a      	movs	r3, #10
 800134e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <SyncPrintf+0x80>)
 8001352:	f002 f814 	bl	800337e <HAL_UART_Transmit>

		if(Output != Buffer)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800135a:	429a      	cmp	r2, r3
 800135c:	d002      	beq.n	8001364 <SyncPrintf+0x60>
		{

			vPortFree(Output);
 800135e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001360:	f006 fc76 	bl	8007c50 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SyncPrintf+0x7c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fb11 	bl	8004990 <osMutexRelease>

	return size;
 800136e:	683b      	ldr	r3, [r7, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3770      	adds	r7, #112	; 0x70
 8001374:	46bd      	mov	sp, r7
 8001376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800137a:	b004      	add	sp, #16
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2000066c 	.word	0x2000066c
 8001384:	20000094 	.word	0x20000094

08001388 <prv_alloc_token>:
 * \brief           Allocate new token for JSON block
 * \param[in]       lw: LwJSON instance
 * \return          Pointer to new token
 */
static lwjson_token_t*
prv_alloc_token(lwjson_t* lw) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    if (lw->next_free_token_pos < lw->tokens_len) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d21a      	bcs.n	80013d2 <prv_alloc_token+0x4a>
        memset(&lw->tokens[lw->next_free_token_pos], 0x00, sizeof(*lw->tokens));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	2218      	movs	r2, #24
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fda4 	bl	8007f00 <memset>
        return &lw->tokens[lw->next_free_token_pos++];
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	1c50      	adds	r0, r2, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6098      	str	r0, [r3, #8]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	e000      	b.n	80013d4 <prv_alloc_token+0x4c>
    }
    return NULL;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prv_skip_blank>:
 * \brief           Skip all characters that are considered *blank* as per RFC4627
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_skip_blank(lwjson_int_str_t* pobj) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 80013e4:	e01d      	b.n	8001422 <prv_skip_blank+0x46>
        if (*pobj->p == ' ' || *pobj->p == '\t' || *pobj->p == '\r' || *pobj->p == '\n' || *pobj->p == '\f') {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d013      	beq.n	8001418 <prv_skip_blank+0x3c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d00e      	beq.n	8001418 <prv_skip_blank+0x3c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b0d      	cmp	r3, #13
 8001402:	d009      	beq.n	8001418 <prv_skip_blank+0x3c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b0a      	cmp	r3, #10
 800140c:	d004      	beq.n	8001418 <prv_skip_blank+0x3c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d117      	bne.n	8001448 <prv_skip_blank+0x6c>
            ++pobj->p;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	609a      	str	r2, [r3, #8]
    while (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00e      	beq.n	8001448 <prv_skip_blank+0x6c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <prv_skip_blank+0x6c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ce      	bcc.n	80013e6 <prv_skip_blank+0xa>
#endif /* LWJSON_CFG_COMMENTS */
        } else {
            break;
        }
    }
    if (pobj->p != NULL && *pobj->p != '\0' && (size_t)(pobj->p - pobj->start) < pobj->len) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d010      	beq.n	8001472 <prv_skip_blank+0x96>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <prv_skip_blank+0x96>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	461a      	mov	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	d201      	bcs.n	8001472 <prv_skip_blank+0x96>
        return lwjsonOK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <prv_skip_blank+0x98>
    }
    return lwjsonERRJSON;
 8001472:	2302      	movs	r3, #2
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <prv_parse_string>:
 * \param[out]      pout: Pointer to pointer to string that is set where string starts
 * \param[out]      poutlen: Length of string in units of characters is stored here
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_string(lwjson_int_str_t* pobj, const char** pout, size_t* poutlen) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    lwjsonr_t res;
    size_t len = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]

    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff ffa3 	bl	80013dc <prv_skip_blank>
 8001496:	4603      	mov	r3, r0
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <prv_parse_string+0x24>
        return res;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	e0cf      	b.n	8001644 <prv_parse_string+0x1c4>
    }
    if (*pobj->p++ != '"') {
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	1c59      	adds	r1, r3, #1
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	6091      	str	r1, [r2, #8]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b22      	cmp	r3, #34	; 0x22
 80014b2:	d001      	beq.n	80014b8 <prv_parse_string+0x38>
        return lwjsonERRJSON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	e0c5      	b.n	8001644 <prv_parse_string+0x1c4>
    }
    *pout = pobj->p;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	601a      	str	r2, [r3, #0]
    /* Parse string but take care of escape characters */
    for (;; ++pobj->p, ++len) {
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00e      	beq.n	80014e6 <prv_parse_string+0x66>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <prv_parse_string+0x66>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d301      	bcc.n	80014ea <prv_parse_string+0x6a>
            return lwjsonERRJSON;
 80014e6:	2302      	movs	r3, #2
 80014e8:	e0ac      	b.n	8001644 <prv_parse_string+0x1c4>
        }
        /* Check special characters */
        if (*pobj->p == '\\') {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b5c      	cmp	r3, #92	; 0x5c
 80014f2:	f040 808d 	bne.w	8001610 <prv_parse_string+0x190>
            ++pobj->p;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	609a      	str	r2, [r3, #8]
            ++len;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
            switch (*pobj->p) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b75      	cmp	r3, #117	; 0x75
 800150e:	dc7d      	bgt.n	800160c <prv_parse_string+0x18c>
 8001510:	2b5c      	cmp	r3, #92	; 0x5c
 8001512:	da06      	bge.n	8001522 <prv_parse_string+0xa2>
 8001514:	2b22      	cmp	r3, #34	; 0x22
 8001516:	f000 808b 	beq.w	8001630 <prv_parse_string+0x1b0>
 800151a:	2b2f      	cmp	r3, #47	; 0x2f
 800151c:	f000 8088 	beq.w	8001630 <prv_parse_string+0x1b0>
 8001520:	e074      	b.n	800160c <prv_parse_string+0x18c>
 8001522:	3b5c      	subs	r3, #92	; 0x5c
 8001524:	2b19      	cmp	r3, #25
 8001526:	d871      	bhi.n	800160c <prv_parse_string+0x18c>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <prv_parse_string+0xb0>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001631 	.word	0x08001631
 8001534:	0800160d 	.word	0x0800160d
 8001538:	0800160d 	.word	0x0800160d
 800153c:	0800160d 	.word	0x0800160d
 8001540:	0800160d 	.word	0x0800160d
 8001544:	0800160d 	.word	0x0800160d
 8001548:	08001631 	.word	0x08001631
 800154c:	0800160d 	.word	0x0800160d
 8001550:	0800160d 	.word	0x0800160d
 8001554:	0800160d 	.word	0x0800160d
 8001558:	08001631 	.word	0x08001631
 800155c:	0800160d 	.word	0x0800160d
 8001560:	0800160d 	.word	0x0800160d
 8001564:	0800160d 	.word	0x0800160d
 8001568:	0800160d 	.word	0x0800160d
 800156c:	0800160d 	.word	0x0800160d
 8001570:	0800160d 	.word	0x0800160d
 8001574:	0800160d 	.word	0x0800160d
 8001578:	08001631 	.word	0x08001631
 800157c:	0800160d 	.word	0x0800160d
 8001580:	0800160d 	.word	0x0800160d
 8001584:	0800160d 	.word	0x0800160d
 8001588:	08001631 	.word	0x08001631
 800158c:	0800160d 	.word	0x0800160d
 8001590:	08001631 	.word	0x08001631
 8001594:	08001599 	.word	0x08001599
                case 'n':
                case 'r':
                case 't':
                    break;
                case 'u':
                    ++pobj->p;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	e02d      	b.n	8001604 <prv_parse_string+0x184>
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b2f      	cmp	r3, #47	; 0x2f
 80015b0:	d904      	bls.n	80015bc <prv_parse_string+0x13c>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b39      	cmp	r3, #57	; 0x39
 80015ba:	d915      	bls.n	80015e8 <prv_parse_string+0x168>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b60      	cmp	r3, #96	; 0x60
 80015c4:	d904      	bls.n	80015d0 <prv_parse_string+0x150>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b66      	cmp	r3, #102	; 0x66
 80015ce:	d90b      	bls.n	80015e8 <prv_parse_string+0x168>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	781b      	ldrb	r3, [r3, #0]
                        if (!((*pobj->p >= '0' && *pobj->p <= '9') || (*pobj->p >= 'a' && *pobj->p <= 'f')
 80015d6:	2b40      	cmp	r3, #64	; 0x40
 80015d8:	d904      	bls.n	80015e4 <prv_parse_string+0x164>
                              || (*pobj->p >= 'A' && *pobj->p <= 'F'))) {
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b46      	cmp	r3, #70	; 0x46
 80015e2:	d901      	bls.n	80015e8 <prv_parse_string+0x168>
                            return lwjsonERRJSON;
 80015e4:	2302      	movs	r3, #2
 80015e6:	e02d      	b.n	8001644 <prv_parse_string+0x1c4>
                        }
                        if (i < 3) {
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d804      	bhi.n	80015f8 <prv_parse_string+0x178>
                            ++pobj->p;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	609a      	str	r2, [r3, #8]
                    for (size_t i = 0; i < 4; ++i, ++len) {
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d9ce      	bls.n	80015a8 <prv_parse_string+0x128>
                        }
                    }
                    break;
 800160a:	e012      	b.n	8001632 <prv_parse_string+0x1b2>
                default:
                    return lwjsonERRJSON;
 800160c:	2302      	movs	r3, #2
 800160e:	e019      	b.n	8001644 <prv_parse_string+0x1c4>
            }
        } else if (*pobj->p == '"') {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b22      	cmp	r3, #34	; 0x22
 8001618:	d10b      	bne.n	8001632 <prv_parse_string+0x1b2>
            ++pobj->p;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]
            break;
 8001624:	bf00      	nop
        }
    }
    *poutlen = len;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	601a      	str	r2, [r3, #0]
    return res;
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	e009      	b.n	8001644 <prv_parse_string+0x1c4>
                    break;
 8001630:	bf00      	nop
    for (;; ++pobj->p, ++len) {
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	3301      	adds	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
        if (pobj->p == NULL || *pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 8001642:	e73d      	b.n	80014c0 <prv_parse_string+0x40>
}
 8001644:	4618      	mov	r0, r3
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <prv_parse_property_name>:
 * \param[in,out]   pobj: Pointer to text that is modified on success
 * \param[out]      t: Token instance to write property name to
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_property_name(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Parse property string first */
    if ((res = prv_parse_string(pobj, &t->token_name, &t->token_name_len)) != lwjsonOK) {
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f103 0108 	add.w	r1, r3, #8
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	330c      	adds	r3, #12
 8001660:	461a      	mov	r2, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff0c 	bl	8001480 <prv_parse_string>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <prv_parse_property_name+0x2a>
        return res;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	e01e      	b.n	80016b4 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff feb0 	bl	80013dc <prv_skip_blank>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <prv_parse_property_name+0x3e>
        return res;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	e014      	b.n	80016b4 <prv_parse_property_name+0x68>
    }
    /* Must continue with colon */
    if (*pobj->p++ != ':') {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	1c59      	adds	r1, r3, #1
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6091      	str	r1, [r2, #8]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b3a      	cmp	r3, #58	; 0x3a
 8001698:	d001      	beq.n	800169e <prv_parse_property_name+0x52>
        return lwjsonERRJSON;
 800169a:	2302      	movs	r3, #2
 800169c:	e00a      	b.n	80016b4 <prv_parse_property_name+0x68>
    }
    /* Skip any spaces */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fe9c 	bl	80013dc <prv_skip_blank>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <prv_parse_property_name+0x66>
        return res;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	e000      	b.n	80016b4 <prv_parse_property_name+0x68>
    }
    return lwjsonOK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <prv_parse_number>:
 * \param[out]      fout: Pointer to output real-type variable. Used if type is REAL.
 * \param[out]      iout: Pointer to output int-type variable. Used if type is INT.
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static lwjsonr_t
prv_parse_number(lwjson_int_str_t* pobj, lwjson_type_t* tout, lwjson_real_t* fout, lwjson_int_t* iout) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
    lwjsonr_t res;
    uint8_t is_minus;
    lwjson_real_t num;
    lwjson_type_t type = LWJSON_TYPE_NUM_INT;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fe83 	bl	80013dc <prv_skip_blank>
 80016d6:	4603      	mov	r3, r0
 80016d8:	74fb      	strb	r3, [r7, #19]
 80016da:	7cfb      	ldrb	r3, [r7, #19]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <prv_parse_number+0x28>
        return res;
 80016e0:	7cfb      	ldrb	r3, [r7, #19]
 80016e2:	e158      	b.n	8001996 <prv_parse_number+0x2da>
    }
    if (*pobj->p == '\0' || (size_t)(pobj->p - pobj->start) >= pobj->len) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <prv_parse_number+0x46>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d301      	bcc.n	8001706 <prv_parse_number+0x4a>
        return lwjsonERRJSON;
 8001702:	2302      	movs	r3, #2
 8001704:	e147      	b.n	8001996 <prv_parse_number+0x2da>
    }
    is_minus = *pobj->p == '-' ? (++pobj->p, 1) : 0;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b2d      	cmp	r3, #45	; 0x2d
 800170e:	d106      	bne.n	800171e <prv_parse_number+0x62>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <prv_parse_number+0x64>
 800171e:	2300      	movs	r3, #0
 8001720:	74bb      	strb	r3, [r7, #18]
    if (*pobj->p == '\0'                    /* Invalid string */
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d01a      	beq.n	8001762 <prv_parse_number+0xa6>
        || *pobj->p < '0' || *pobj->p > '9' /* Character outside number range */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b2f      	cmp	r3, #47	; 0x2f
 8001734:	d915      	bls.n	8001762 <prv_parse_number+0xa6>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b39      	cmp	r3, #57	; 0x39
 800173e:	d810      	bhi.n	8001762 <prv_parse_number+0xa6>
        || (*pobj->p == '0'
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b30      	cmp	r3, #48	; 0x30
 8001748:	d10d      	bne.n	8001766 <prv_parse_number+0xaa>
            && (pobj->p[1] < '0' && pobj->p[1] > '9'))) { /* Number starts with 0 but not followed by dot */
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	3301      	adds	r3, #1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b2f      	cmp	r3, #47	; 0x2f
 8001754:	d807      	bhi.n	8001766 <prv_parse_number+0xaa>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	3301      	adds	r3, #1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b39      	cmp	r3, #57	; 0x39
 8001760:	d901      	bls.n	8001766 <prv_parse_number+0xaa>
        return lwjsonERRJSON;
 8001762:	2302      	movs	r3, #2
 8001764:	e117      	b.n	8001996 <prv_parse_number+0x2da>
    }

    /* Parse number */
    for (num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	e016      	b.n	800179c <prv_parse_number+0xe0>
        num = num * 10 + (*pobj->p - '0');
 800176e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001772:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3b30      	subs	r3, #48	; 0x30
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b2f      	cmp	r3, #47	; 0x2f
 80017a4:	d904      	bls.n	80017b0 <prv_parse_number+0xf4>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b39      	cmp	r3, #57	; 0x39
 80017ae:	d9de      	bls.n	800176e <prv_parse_number+0xb2>
    }
    if (pobj->p != NULL && *pobj->p == '.') { /* Number has exponent */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d054      	beq.n	8001862 <prv_parse_number+0x1a6>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b2e      	cmp	r3, #46	; 0x2e
 80017c0:	d14f      	bne.n	8001862 <prv_parse_number+0x1a6>
        lwjson_real_t exp, dec_num;

        type = LWJSON_TYPE_NUM_REAL;            /* Format is real */
 80017c2:	2302      	movs	r3, #2
 80017c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ++pobj->p;                              /* Ignore comma character */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	609a      	str	r2, [r3, #8]
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b2f      	cmp	r3, #47	; 0x2f
 80017da:	d904      	bls.n	80017e6 <prv_parse_number+0x12a>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b39      	cmp	r3, #57	; 0x39
 80017e4:	d901      	bls.n	80017ea <prv_parse_number+0x12e>
            return lwjsonERRJSON;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0d5      	b.n	8001996 <prv_parse_number+0x2da>
        }
        /* Get number after decimal point */
        for (exp = 1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p, exp *= 10) {
 80017ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	e01e      	b.n	8001836 <prv_parse_number+0x17a>
            dec_num = dec_num * 10 + (*pobj->p - '0');
 80017f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001800:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3b30      	subs	r3, #48	; 0x30
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a06 	vstr	s15, [r7, #24]
        for (exp = 1, dec_num = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p, exp *= 10) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	edd7 7a07 	vldr	s15, [r7, #28]
 800182a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800182e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001832:	edc7 7a07 	vstr	s15, [r7, #28]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b2f      	cmp	r3, #47	; 0x2f
 800183e:	d904      	bls.n	800184a <prv_parse_number+0x18e>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b39      	cmp	r3, #57	; 0x39
 8001848:	d9d6      	bls.n	80017f8 <prv_parse_number+0x13c>
        }
        num += dec_num / exp; /* Add decimal part to number */
 800184a:	edd7 6a06 	vldr	s13, [r7, #24]
 800184e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001856:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }
    if (pobj->p != NULL && (*pobj->p == 'e' || *pobj->p == 'E')) { /* Engineering mode */
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d074      	beq.n	8001954 <prv_parse_number+0x298>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b65      	cmp	r3, #101	; 0x65
 8001872:	d004      	beq.n	800187e <prv_parse_number+0x1c2>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b45      	cmp	r3, #69	; 0x45
 800187c:	d16a      	bne.n	8001954 <prv_parse_number+0x298>
        uint8_t is_minus_exp;
        int exp_cnt;

        type = LWJSON_TYPE_NUM_REAL;                         /* Format is real */
 800187e:	2302      	movs	r3, #2
 8001880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        ++pobj->p;                                           /* Ignore enginnering sing part */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	609a      	str	r2, [r3, #8]
        is_minus_exp = *pobj->p == '-' ? (++pobj->p, 1) : 0; /* Check if negative */
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b2d      	cmp	r3, #45	; 0x2d
 8001896:	d106      	bne.n	80018a6 <prv_parse_number+0x1ea>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <prv_parse_number+0x1ec>
 80018a6:	2300      	movs	r3, #0
 80018a8:	747b      	strb	r3, [r7, #17]
        if (*pobj->p == '+') {                               /* Optional '+' is possible too */
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b2b      	cmp	r3, #43	; 0x2b
 80018b2:	d104      	bne.n	80018be <prv_parse_number+0x202>
            ++pobj->p;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	609a      	str	r2, [r3, #8]
        }
        if (*pobj->p < '0' || *pobj->p > '9') { /* Must be followed by number characters */
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b2f      	cmp	r3, #47	; 0x2f
 80018c6:	d904      	bls.n	80018d2 <prv_parse_number+0x216>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b39      	cmp	r3, #57	; 0x39
 80018d0:	d901      	bls.n	80018d6 <prv_parse_number+0x21a>
            return lwjsonERRJSON;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e05f      	b.n	8001996 <prv_parse_number+0x2da>
        }

        /* Parse exponent number */
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e010      	b.n	80018fe <prv_parse_number+0x242>
            exp_cnt = exp_cnt * 10 + (*pobj->p - '0');
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3b30      	subs	r3, #48	; 0x30
 80018f0:	4413      	add	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
        for (exp_cnt = 0; *pobj->p >= '0' && *pobj->p <= '9'; ++pobj->p) {
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b2f      	cmp	r3, #47	; 0x2f
 8001906:	d904      	bls.n	8001912 <prv_parse_number+0x256>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b39      	cmp	r3, #57	; 0x39
 8001910:	d9e4      	bls.n	80018dc <prv_parse_number+0x220>
        }
        /* Calculate new value for exponent 10^exponent */
        if (is_minus_exp) {
 8001912:	7c7b      	ldrb	r3, [r7, #17]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01a      	beq.n	800194e <prv_parse_number+0x292>
            for (; exp_cnt > 0; num /= 10, --exp_cnt) {}
 8001918:	e00a      	b.n	8001930 <prv_parse_number+0x274>
 800191a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800191e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001926:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3b01      	subs	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	dcf1      	bgt.n	800191a <prv_parse_number+0x25e>
 8001936:	e00d      	b.n	8001954 <prv_parse_number+0x298>
        } else {
            for (; exp_cnt > 0; num *= 10, --exp_cnt) {}
 8001938:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800193c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001944:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3b01      	subs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dcf1      	bgt.n	8001938 <prv_parse_number+0x27c>
        }
    }
    if (is_minus) {
 8001954:	7cbb      	ldrb	r3, [r7, #18]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <prv_parse_number+0x2aa>
        num = -num;
 800195a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800195e:	eef1 7a67 	vneg.f32	s15, s15
 8001962:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    }

    /* Write output values */
    if (tout != NULL) {
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <prv_parse_number+0x2b8>
        *tout = type;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001972:	701a      	strb	r2, [r3, #0]
    }
    if (type == LWJSON_TYPE_NUM_INT) {
 8001974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <prv_parse_number+0x2d2>
        *iout = (lwjson_int_t)num;
 800197c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197e:	f7fe fe53 	bl	8000628 <__aeabi_f2lz>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
 800198c:	e002      	b.n	8001994 <prv_parse_number+0x2d8>
    } else {
        *fout = num;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	601a      	str	r2, [r3, #0]
    }
    return lwjsonOK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <prv_create_path_segment>:
 * \param[out]      olen: Pointer to variable to write length of segment
 * \param[out]      is_last: Pointer to write if this is last segment
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_create_path_segment(const char** p, const char** opath, size_t* olen, uint8_t* is_last) {
 800199e:	b480      	push	{r7}
 80019a0:	b087      	sub	sp, #28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
    const char* s = *p;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	617b      	str	r3, [r7, #20]

    *is_last = 0;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    *opath = NULL;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    *olen = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

    /* Check input path */
    if (s == NULL || *s == '\0') {
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <prv_create_path_segment+0x34>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d104      	bne.n	80019dc <prv_create_path_segment+0x3e>
        *is_last = 1;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
        return 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	e04c      	b.n	8001a76 <prv_create_path_segment+0xd8>
    /*
     * Path must be one of:
     * - literal text
     * - "#" followed by dot "."
     */
    if (*s == '#') {
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b23      	cmp	r3, #35	; 0x23
 80019e2:	d125      	bne.n	8001a30 <prv_create_path_segment+0x92>
        *opath = s;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
        for (*olen = 0;; ++s, ++(*olen)) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
            if (*s == '.') {
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b2e      	cmp	r3, #46	; 0x2e
 80019f6:	d103      	bne.n	8001a00 <prv_create_path_segment+0x62>
                ++s;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
                break;
 80019fe:	e013      	b.n	8001a28 <prv_create_path_segment+0x8a>
            } else if (*s == '\0') {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <prv_create_path_segment+0x76>
                if (*olen == 1) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10a      	bne.n	8001a26 <prv_create_path_segment+0x88>
                    return 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e030      	b.n	8001a76 <prv_create_path_segment+0xd8>
        for (*olen = 0;; ++s, ++(*olen)) {
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
            if (*s == '.') {
 8001a24:	e7e4      	b.n	80019f0 <prv_create_path_segment+0x52>
                } else {
                    break;
 8001a26:	bf00      	nop
                }
            }
        }
        *p = s;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e01a      	b.n	8001a66 <prv_create_path_segment+0xc8>
    } else {
        *opath = s;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
        for (*olen = 0; *s != '\0' && *s != '.'; ++(*olen), ++s) {}
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e007      	b.n	8001a4e <prv_create_path_segment+0xb0>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <prv_create_path_segment+0xc0>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001a5c:	d1ef      	bne.n	8001a3e <prv_create_path_segment+0xa0>
        *p = s + 1;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	601a      	str	r2, [r3, #0]
    }
    if (*s == '\0') {
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <prv_create_path_segment+0xd6>
        *is_last = 1;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <prv_find>:
 * \param[in]       parent: Parent token of type \ref LWJSON_TYPE_ARRAY or LWJSON_TYPE_OBJECT
 * \param[in]       path: Path to search for starting this token further
 * \return          Found token on success, `NULL` otherwise
 */
static const lwjson_token_t*
prv_find(const lwjson_token_t* parent, const char* path) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b08e      	sub	sp, #56	; 0x38
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
    const char* segment;
    size_t segment_len;
    uint8_t is_last, result;

    /* Get path segments */
    if ((result = prv_create_path_segment(&path, &segment, &segment_len, &is_last)) != 0) {
 8001a8c:	f107 030f 	add.w	r3, r7, #15
 8001a90:	f107 0210 	add.w	r2, r7, #16
 8001a94:	f107 0114 	add.w	r1, r7, #20
 8001a98:	4638      	mov	r0, r7
 8001a9a:	f7ff ff80 	bl	800199e <prv_create_path_segment>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 809a 	beq.w	8001be2 <prv_find+0x160>
        /* Check if detected an array request */
        if (*segment == '#') {
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b23      	cmp	r3, #35	; 0x23
 8001ab4:	d166      	bne.n	8001b84 <prv_find+0x102>
            /* Parent must be array */
            if (parent->type != LWJSON_TYPE_ARRAY) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	791b      	ldrb	r3, [r3, #4]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d001      	beq.n	8001ac2 <prv_find+0x40>
                return NULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e090      	b.n	8001be4 <prv_find+0x162>
            }

            /* Check if index requested */
            if (segment_len > 1) {
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d947      	bls.n	8001b58 <prv_find+0xd6>
                const lwjson_token_t* t;
                size_t index = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30

                /* Parse number */
                for (size_t i = 1; i < segment_len; ++i) {
 8001acc:	2301      	movs	r3, #1
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad0:	e01d      	b.n	8001b0e <prv_find+0x8c>
                    if (segment[i] < '0' || segment[i] > '9') {
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b2f      	cmp	r3, #47	; 0x2f
 8001adc:	d905      	bls.n	8001aea <prv_find+0x68>
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b39      	cmp	r3, #57	; 0x39
 8001ae8:	d901      	bls.n	8001aee <prv_find+0x6c>
                        return NULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e07a      	b.n	8001be4 <prv_find+0x162>
                    } else {
                        index = index * 10 + (segment[i] - '0');
 8001aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4619      	mov	r1, r3
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	440b      	add	r3, r1
 8001b04:	3b30      	subs	r3, #48	; 0x30
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
                for (size_t i = 1; i < segment_len; ++i) {
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3dd      	bcc.n	8001ad2 <prv_find+0x50>
                    }
                }

                /* Start from beginning */
                for (t = parent->u.first_child; t != NULL && index > 0; t = t->next, --index) {}
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1c:	e005      	b.n	8001b2a <prv_find+0xa8>
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	3b01      	subs	r3, #1
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <prv_find+0xb4>
 8001b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f3      	bne.n	8001b1e <prv_find+0x9c>
                if (t != NULL) {
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00b      	beq.n	8001b54 <prv_find+0xd2>
                    if (is_last) {
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <prv_find+0xc4>
                        return t;
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	e04e      	b.n	8001be4 <prv_find+0x162>
                    } else {
                        return prv_find(t, path);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b4c:	f7ff ff99 	bl	8001a82 <prv_find>
 8001b50:	4603      	mov	r3, r0
 8001b52:	e047      	b.n	8001be4 <prv_find+0x162>
                    }
                }
                return NULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e045      	b.n	8001be4 <prv_find+0x162>
            }

            /* Scan all indexes and get first match */
            for (const lwjson_token_t *tmp_t, *t = parent->u.first_child; t != NULL; t = t->next) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	e00d      	b.n	8001b7c <prv_find+0xfa>
                if ((tmp_t = prv_find(t, path)) != NULL) {
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b66:	f7ff ff8c 	bl	8001a82 <prv_find>
 8001b6a:	61b8      	str	r0, [r7, #24]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <prv_find+0xf4>
                    return tmp_t;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	e036      	b.n	8001be4 <prv_find+0x162>
            for (const lwjson_token_t *tmp_t, *t = parent->u.first_child; t != NULL; t = t->next) {
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ee      	bne.n	8001b60 <prv_find+0xde>
 8001b82:	e02e      	b.n	8001be2 <prv_find+0x160>
                }
            }
        } else {
            if (parent->type != LWJSON_TYPE_OBJECT) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d001      	beq.n	8001b90 <prv_find+0x10e>
                return NULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e029      	b.n	8001be4 <prv_find+0x162>
            }
            for (const lwjson_token_t* t = parent->u.first_child; t != NULL; t = t->next) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	e021      	b.n	8001bdc <prv_find+0x15a>
                if (t->token_name_len == segment_len && !strncmp(t->token_name, segment, segment_len)) {
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d119      	bne.n	8001bd6 <prv_find+0x154>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 fade 	bl	800816c <strncmp>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <prv_find+0x154>
                    const lwjson_token_t* tmp_t;
                    if (is_last) {
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <prv_find+0x13e>
                        return t;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	e011      	b.n	8001be4 <prv_find+0x162>
                    }
                    if ((tmp_t = prv_find(t, path)) != NULL) {
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bc6:	f7ff ff5c 	bl	8001a82 <prv_find>
 8001bca:	61f8      	str	r0, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <prv_find+0x154>
                        return tmp_t;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	e006      	b.n	8001be4 <prv_find+0x162>
            for (const lwjson_token_t* t = parent->u.first_child; t != NULL; t = t->next) {
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1da      	bne.n	8001b98 <prv_find+0x116>
                    }
                }
            }
        }
    }
    return NULL;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3738      	adds	r7, #56	; 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <prv_check_valid_char_after_open_bracket>:
 * \param[in,out]   pobj: JSON string
 * \param[in]       t: Token to check for type
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
static inline lwjsonr_t
prv_check_valid_char_after_open_bracket(lwjson_int_str_t* pobj, lwjson_token_t* t) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    lwjsonr_t res;

    /* Check next character after object open */
    if ((res = prv_skip_blank(pobj)) != lwjsonOK) {
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fbf0 	bl	80013dc <prv_skip_blank>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <prv_check_valid_char_after_open_bracket+0x1e>
        return res;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	e04b      	b.n	8001ca2 <prv_check_valid_char_after_open_bracket+0xb6>
    }
    if (*pobj->p == '\0' || (t->type == LWJSON_TYPE_OBJECT && (*pobj->p != '"' && *pobj->p != '}'))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d043      	beq.n	8001c9c <prv_check_valid_char_after_open_bracket+0xb0>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	791b      	ldrb	r3, [r3, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d109      	bne.n	8001c30 <prv_check_valid_char_after_open_bracket+0x44>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b22      	cmp	r3, #34	; 0x22
 8001c24:	d004      	beq.n	8001c30 <prv_check_valid_char_after_open_bracket+0x44>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b7d      	cmp	r3, #125	; 0x7d
 8001c2e:	d135      	bne.n	8001c9c <prv_check_valid_char_after_open_bracket+0xb0>
        || (t->type == LWJSON_TYPE_ARRAY
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d133      	bne.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
            && (*pobj->p != '"' && *pobj->p != ']' && *pobj->p != '[' && *pobj->p != '{' && *pobj->p != '-'
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b22      	cmp	r3, #34	; 0x22
 8001c40:	d02e      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b5d      	cmp	r3, #93	; 0x5d
 8001c4a:	d029      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b5b      	cmp	r3, #91	; 0x5b
 8001c54:	d024      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b7b      	cmp	r3, #123	; 0x7b
 8001c5e:	d01f      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b2d      	cmp	r3, #45	; 0x2d
 8001c68:	d01a      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
                && (*pobj->p < '0' || *pobj->p > '9') && *pobj->p != 't' && *pobj->p != 'n' && *pobj->p != 'f'))) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b2f      	cmp	r3, #47	; 0x2f
 8001c72:	d904      	bls.n	8001c7e <prv_check_valid_char_after_open_bracket+0x92>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b39      	cmp	r3, #57	; 0x39
 8001c7c:	d910      	bls.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b74      	cmp	r3, #116	; 0x74
 8001c86:	d00b      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b6e      	cmp	r3, #110	; 0x6e
 8001c90:	d006      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b66      	cmp	r3, #102	; 0x66
 8001c9a:	d001      	beq.n	8001ca0 <prv_check_valid_char_after_open_bracket+0xb4>
        res = lwjsonERRJSON;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	73fb      	strb	r3, [r7, #15]
    }
    return res;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <lwjson_init>:
 * \param[in]       tokens: Pointer to array of tokens used for parsing
 * \param[in]       tokens_len: Number of tokens
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_init(lwjson_t* lw, lwjson_token_t* tokens, size_t tokens_len) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
    memset(lw, 0x00, sizeof(*lw));
 8001cb6:	2230      	movs	r2, #48	; 0x30
 8001cb8:	2100      	movs	r1, #0
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f006 f920 	bl	8007f00 <memset>
    memset(tokens, 0x00, sizeof(*tokens) * tokens_len);
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2100      	movs	r1, #0
 8001cce:	68b8      	ldr	r0, [r7, #8]
 8001cd0:	f006 f916 	bl	8007f00 <memset>
    lw->tokens = tokens;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]
    lw->tokens_len = tokens_len;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	605a      	str	r2, [r3, #4]
    lw->first_token.type = LWJSON_TYPE_OBJECT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	751a      	strb	r2, [r3, #20]
    return lwjsonOK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <lwjson_parse_ex>:
 * \param[in]       json_data: JSON string to parse
 * \param[in]       jsonČlen: JSON data length
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse_ex(lwjson_t* lw, const void* json_data, size_t json_len) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
    lwjsonr_t res = lwjsonOK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    lwjson_token_t *t, *to;
    lwjson_int_str_t pobj = {.start = json_data, .len = json_len, .p = json_data};
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	61bb      	str	r3, [r7, #24]

    /* Check input parameters */
    if (lw == NULL || json_data == NULL || json_len == 0) {
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <lwjson_parse_ex+0x30>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <lwjson_parse_ex+0x30>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d103      	bne.n	8001d28 <lwjson_parse_ex+0x38>
        res = lwjsonERRPAR;
 8001d20:	2304      	movs	r3, #4
 8001d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto ret;
 8001d26:	e22a      	b.n	800217e <lwjson_parse_ex+0x48e>
    }

    /* set first token */
    to = &lw->first_token;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* values from very beginning */
    lw->flags.parsed = 0;
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001d34:	f36f 0300 	bfc	r3, #0, #1
 8001d38:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    lw->next_free_token_pos = 0;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    memset(to, 0x00, sizeof(*to));
 8001d42:	2218      	movs	r2, #24
 8001d44:	2100      	movs	r1, #0
 8001d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d48:	f006 f8da 	bl	8007f00 <memset>

    /* First parse */
    if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fb43 	bl	80013dc <prv_skip_blank>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 81fd 	bne.w	8002160 <lwjson_parse_ex+0x470>
        goto ret;
    }
    if (*pobj.p == '{') {
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b7b      	cmp	r3, #123	; 0x7b
 8001d6c:	d103      	bne.n	8001d76 <lwjson_parse_ex+0x86>
        to->type = LWJSON_TYPE_OBJECT;
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2203      	movs	r2, #3
 8001d72:	711a      	strb	r2, [r3, #4]
 8001d74:	e00b      	b.n	8001d8e <lwjson_parse_ex+0x9e>
    } else if (*pobj.p == '[') {
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b5b      	cmp	r3, #91	; 0x5b
 8001d7c:	d103      	bne.n	8001d86 <lwjson_parse_ex+0x96>
        to->type = LWJSON_TYPE_ARRAY;
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	2204      	movs	r2, #4
 8001d82:	711a      	strb	r2, [r3, #4]
 8001d84:	e003      	b.n	8001d8e <lwjson_parse_ex+0x9e>
    } else {
        res = lwjsonERRJSON;
 8001d86:	2302      	movs	r3, #2
 8001d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto ret;
 8001d8c:	e1f7      	b.n	800217e <lwjson_parse_ex+0x48e>
    }
    ++pobj.p;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]
    if ((res = prv_check_valid_char_after_open_bracket(&pobj, to)) != lwjsonOK) {
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff26 	bl	8001bec <prv_check_valid_char_after_open_bracket>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 81da 	bne.w	8002164 <lwjson_parse_ex+0x474>
        goto ret;
    }

    /* Process all characters as indicated by input user */
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 8001db0:	e1a1      	b.n	80020f6 <lwjson_parse_ex+0x406>
        /* Filter out blanks */
        if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb10 	bl	80013dc <prv_skip_blank>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 81ce 	bne.w	8002168 <lwjson_parse_ex+0x478>
            goto ret;
        }
        if (*pobj.p == ',') {
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b2c      	cmp	r3, #44	; 0x2c
 8001dd2:	d103      	bne.n	8001ddc <lwjson_parse_ex+0xec>
            ++pobj.p;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
            continue;
 8001dda:	e18c      	b.n	80020f6 <lwjson_parse_ex+0x406>
        }

        /* Check if end of object or array*/
        if (*pobj.p == (to->type == LWJSON_TYPE_OBJECT ? '}' : ']')) {
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d101      	bne.n	8001dee <lwjson_parse_ex+0xfe>
 8001dea:	237d      	movs	r3, #125	; 0x7d
 8001dec:	e000      	b.n	8001df0 <lwjson_parse_ex+0x100>
 8001dee:	235d      	movs	r3, #93	; 0x5d
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d126      	bne.n	8001e42 <lwjson_parse_ex+0x152>
            lwjson_token_t* parent = to->next;
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61fb      	str	r3, [r7, #28]
            to->next = NULL;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
            ++pobj.p;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	3301      	adds	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]

            /* End of string if to == NULL (no parent), check if properly terminated */
            if ((to = parent) == NULL) {
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 8172 	bne.w	80020f6 <lwjson_parse_ex+0x406>
                prv_skip_blank(&pobj);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fae0 	bl	80013dc <prv_skip_blank>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8001e1c:	69bb      	ldr	r3, [r7, #24]
                                                                                                       : lwjsonERR;
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <lwjson_parse_ex+0x14a>
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <lwjson_parse_ex+0x14a>
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	697a      	ldr	r2, [r7, #20]
                                                                                                       : lwjsonERR;
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d001      	beq.n	8001e3a <lwjson_parse_ex+0x14a>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <lwjson_parse_ex+0x14c>
 8001e3a:	2300      	movs	r3, #0
                res = (pobj.p == NULL || *pobj.p == '\0' || (size_t)(pobj.p - pobj.start) == pobj.len) ? lwjsonOK
 8001e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                goto ret;
 8001e40:	e19d      	b.n	800217e <lwjson_parse_ex+0x48e>
            }
            continue;
        }

        /* Allocate new token */
        if ((t = prv_alloc_token(lw)) == NULL) {
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff faa0 	bl	8001388 <prv_alloc_token>
 8001e48:	6238      	str	r0, [r7, #32]
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <lwjson_parse_ex+0x168>
            res = lwjsonERRMEM;
 8001e50:	2303      	movs	r3, #3
 8001e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            goto ret;
 8001e56:	e192      	b.n	800217e <lwjson_parse_ex+0x48e>
        }

        /* If object type is not array, first thing is property that starts with quotes */
        if (to->type != LWJSON_TYPE_ARRAY) {
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	791b      	ldrb	r3, [r3, #4]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d015      	beq.n	8001e8c <lwjson_parse_ex+0x19c>
            if (*pobj.p != '"') {
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b22      	cmp	r3, #34	; 0x22
 8001e66:	d003      	beq.n	8001e70 <lwjson_parse_ex+0x180>
                res = lwjsonERRJSON;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                goto ret;
 8001e6e:	e186      	b.n	800217e <lwjson_parse_ex+0x48e>
            }
            if ((res = prv_parse_property_name(&pobj, t)) != lwjsonOK) {
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fbe8 	bl	800164c <prv_parse_property_name>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 8170 	bne.w	800216c <lwjson_parse_ex+0x47c>
                goto ret;
            }
        }

        /* Add element to linked list */
        if (to->u.first_child == NULL) {
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <lwjson_parse_ex+0x1ac>
            to->u.first_child = t;
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	e00d      	b.n	8001eb8 <lwjson_parse_ex+0x1c8>
        } else {
            lwjson_token_t* c;
            for (c = to->u.first_child; c->next != NULL; c = c->next) {}
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	e002      	b.n	8001eaa <lwjson_parse_ex+0x1ba>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f8      	bne.n	8001ea4 <lwjson_parse_ex+0x1b4>
            c->next = t;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	601a      	str	r2, [r3, #0]
        }

        /* Check next character to process */
        switch (*pobj.p) {
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b22      	cmp	r3, #34	; 0x22
 8001ebe:	d071      	beq.n	8001fa4 <lwjson_parse_ex+0x2b4>
 8001ec0:	2b22      	cmp	r3, #34	; 0x22
 8001ec2:	f2c0 80c2 	blt.w	800204a <lwjson_parse_ex+0x35a>
 8001ec6:	2b7b      	cmp	r3, #123	; 0x7b
 8001ec8:	f300 80bf 	bgt.w	800204a <lwjson_parse_ex+0x35a>
 8001ecc:	2b5b      	cmp	r3, #91	; 0x5b
 8001ece:	f2c0 80bc 	blt.w	800204a <lwjson_parse_ex+0x35a>
 8001ed2:	3b5b      	subs	r3, #91	; 0x5b
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	f200 80b8 	bhi.w	800204a <lwjson_parse_ex+0x35a>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <lwjson_parse_ex+0x1f0>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f65 	.word	0x08001f65
 8001ee4:	0800204b 	.word	0x0800204b
 8001ee8:	0800204b 	.word	0x0800204b
 8001eec:	0800204b 	.word	0x0800204b
 8001ef0:	0800204b 	.word	0x0800204b
 8001ef4:	0800204b 	.word	0x0800204b
 8001ef8:	0800204b 	.word	0x0800204b
 8001efc:	0800204b 	.word	0x0800204b
 8001f00:	0800204b 	.word	0x0800204b
 8001f04:	0800204b 	.word	0x0800204b
 8001f08:	0800204b 	.word	0x0800204b
 8001f0c:	08001ffb 	.word	0x08001ffb
 8001f10:	0800204b 	.word	0x0800204b
 8001f14:	0800204b 	.word	0x0800204b
 8001f18:	0800204b 	.word	0x0800204b
 8001f1c:	0800204b 	.word	0x0800204b
 8001f20:	0800204b 	.word	0x0800204b
 8001f24:	0800204b 	.word	0x0800204b
 8001f28:	0800204b 	.word	0x0800204b
 8001f2c:	08002023 	.word	0x08002023
 8001f30:	0800204b 	.word	0x0800204b
 8001f34:	0800204b 	.word	0x0800204b
 8001f38:	0800204b 	.word	0x0800204b
 8001f3c:	0800204b 	.word	0x0800204b
 8001f40:	0800204b 	.word	0x0800204b
 8001f44:	08001fd3 	.word	0x08001fd3
 8001f48:	0800204b 	.word	0x0800204b
 8001f4c:	0800204b 	.word	0x0800204b
 8001f50:	0800204b 	.word	0x0800204b
 8001f54:	0800204b 	.word	0x0800204b
 8001f58:	0800204b 	.word	0x0800204b
 8001f5c:	0800204b 	.word	0x0800204b
 8001f60:	08001f65 	.word	0x08001f65
            case '{':
            case '[':
                t->type = *pobj.p == '{' ? LWJSON_TYPE_OBJECT : LWJSON_TYPE_ARRAY;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b7b      	cmp	r3, #123	; 0x7b
 8001f6a:	d101      	bne.n	8001f70 <lwjson_parse_ex+0x280>
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	e000      	b.n	8001f72 <lwjson_parse_ex+0x282>
 8001f70:	2204      	movs	r2, #4
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	711a      	strb	r2, [r3, #4]
                ++pobj.p;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61bb      	str	r3, [r7, #24]
                if ((res = prv_check_valid_char_after_open_bracket(&pobj, t)) != lwjsonOK) {
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe32 	bl	8001bec <prv_check_valid_char_after_open_bracket>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80ec 	bne.w	8002170 <lwjson_parse_ex+0x480>
                    goto ret;
                }
                t->next = to; /* Temporary saved as parent object */
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f9c:	601a      	str	r2, [r3, #0]
                to = t;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8001fa2:	e075      	b.n	8002090 <lwjson_parse_ex+0x3a0>
            case '"':
                if ((res = prv_parse_string(&pobj, &t->u.str.token_value, &t->u.str.token_value_len)) == lwjsonOK) {
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f103 0110 	add.w	r1, r3, #16
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f103 0214 	add.w	r2, r3, #20
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fa63 	bl	8001480 <prv_parse_string>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 80d5 	bne.w	8002174 <lwjson_parse_ex+0x484>
                    t->type = LWJSON_TYPE_STRING;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	711a      	strb	r2, [r3, #4]
                } else {
                    goto ret;
                }
                break;
 8001fd0:	e05e      	b.n	8002090 <lwjson_parse_ex+0x3a0>
            case 't':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "true", 4) == 0) {
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4972      	ldr	r1, [pc, #456]	; (80021a0 <lwjson_parse_ex+0x4b0>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f006 f8c7 	bl	800816c <strncmp>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <lwjson_parse_ex+0x302>
                    t->type = LWJSON_TYPE_TRUE;
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	3304      	adds	r3, #4
 8001fee:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8001ff0:	e04e      	b.n	8002090 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8001ff8:	e0c1      	b.n	800217e <lwjson_parse_ex+0x48e>
            case 'f':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "false", 5) == 0) {
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	4969      	ldr	r1, [pc, #420]	; (80021a4 <lwjson_parse_ex+0x4b4>)
 8002000:	4618      	mov	r0, r3
 8002002:	f006 f8b3 	bl	800816c <strncmp>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <lwjson_parse_ex+0x32a>
                    t->type = LWJSON_TYPE_FALSE;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	2206      	movs	r2, #6
 8002010:	711a      	strb	r2, [r3, #4]
                    pobj.p += 5;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3305      	adds	r3, #5
 8002016:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8002018:	e03a      	b.n	8002090 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 800201a:	2302      	movs	r3, #2
 800201c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8002020:	e0ad      	b.n	800217e <lwjson_parse_ex+0x48e>
            case 'n':
                /* RFC4627 is lower-case only */
                if (strncmp(pobj.p, "null", 4) == 0) {
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2204      	movs	r2, #4
 8002026:	4960      	ldr	r1, [pc, #384]	; (80021a8 <lwjson_parse_ex+0x4b8>)
 8002028:	4618      	mov	r0, r3
 800202a:	f006 f89f 	bl	800816c <strncmp>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <lwjson_parse_ex+0x352>
                    t->type = LWJSON_TYPE_NULL;
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	2207      	movs	r2, #7
 8002038:	711a      	strb	r2, [r3, #4]
                    pobj.p += 4;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3304      	adds	r3, #4
 800203e:	61bb      	str	r3, [r7, #24]
                } else {
                    res = lwjsonERRJSON;
                    goto ret;
                }
                break;
 8002040:	e026      	b.n	8002090 <lwjson_parse_ex+0x3a0>
                    res = lwjsonERRJSON;
 8002042:	2302      	movs	r3, #2
 8002044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 8002048:	e099      	b.n	800217e <lwjson_parse_ex+0x48e>
            default:
                if (*pobj.p == '-' || (*pobj.p >= '0' && *pobj.p <= '9')) {
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b2d      	cmp	r3, #45	; 0x2d
 8002050:	d007      	beq.n	8002062 <lwjson_parse_ex+0x372>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b2f      	cmp	r3, #47	; 0x2f
 8002058:	d915      	bls.n	8002086 <lwjson_parse_ex+0x396>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b39      	cmp	r3, #57	; 0x39
 8002060:	d811      	bhi.n	8002086 <lwjson_parse_ex+0x396>
                    if (prv_parse_number(&pobj, &t->type, &t->u.num_real, &t->u.num_int) != lwjsonOK) {
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	1d19      	adds	r1, r3, #4
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f103 0210 	add.w	r2, r3, #16
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	3310      	adds	r3, #16
 8002070:	f107 0010 	add.w	r0, r7, #16
 8002074:	f7ff fb22 	bl	80016bc <prv_parse_number>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <lwjson_parse_ex+0x39e>
                        res = lwjsonERRJSON;
 800207e:	2302      	movs	r3, #2
 8002080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        goto ret;
 8002084:	e07b      	b.n	800217e <lwjson_parse_ex+0x48e>
                    }
                } else {
                    res = lwjsonERRJSON;
 8002086:	2302      	movs	r3, #2
 8002088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    goto ret;
 800208c:	e077      	b.n	800217e <lwjson_parse_ex+0x48e>
                }
                break;
 800208e:	bf00      	nop
        }

        /* Below code is used to check characters after valid tokens */
        if (t->type == LWJSON_TYPE_ARRAY || t->type == LWJSON_TYPE_OBJECT) {
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d02e      	beq.n	80020f6 <lwjson_parse_ex+0x406>
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d100      	bne.n	80020a2 <lwjson_parse_ex+0x3b2>
            continue;
 80020a0:	e029      	b.n	80020f6 <lwjson_parse_ex+0x406>
         * blank characters, followed by one of below options:
         *  - Comma separator for next token
         *  - End of array indication
         *  - End of object indication
         */
        if ((res = prv_skip_blank(&pobj)) != lwjsonOK) {
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f998 	bl	80013dc <prv_skip_blank>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15e      	bne.n	8002178 <lwjson_parse_ex+0x488>
            goto ret;
        }
        /* Check if valid string is availabe after */
        if (pobj.p == NULL || *pobj.p == '\0' || (*pobj.p != ',' && *pobj.p != ']' && *pobj.p != '}')) {
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00f      	beq.n	80020e0 <lwjson_parse_ex+0x3f0>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <lwjson_parse_ex+0x3f0>
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b2c      	cmp	r3, #44	; 0x2c
 80020ce:	d00b      	beq.n	80020e8 <lwjson_parse_ex+0x3f8>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b5d      	cmp	r3, #93	; 0x5d
 80020d6:	d007      	beq.n	80020e8 <lwjson_parse_ex+0x3f8>
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b7d      	cmp	r3, #125	; 0x7d
 80020de:	d003      	beq.n	80020e8 <lwjson_parse_ex+0x3f8>
            res = lwjsonERRJSON;
 80020e0:	2302      	movs	r3, #2
 80020e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            goto ret;
 80020e6:	e04a      	b.n	800217e <lwjson_parse_ex+0x48e>
        } else if (*pobj.p == ',') { /* Check to advance to next token immediatey */
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b2c      	cmp	r3, #44	; 0x2c
 80020ee:	d102      	bne.n	80020f6 <lwjson_parse_ex+0x406>
            ++pobj.p;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]
    while (pobj.p != NULL && *pobj.p != '\0' && (size_t)(pobj.p - pobj.start) < pobj.len) {
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <lwjson_parse_ex+0x424>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <lwjson_parse_ex+0x424>
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	461a      	mov	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	429a      	cmp	r2, r3
 8002110:	f4ff ae4f 	bcc.w	8001db2 <lwjson_parse_ex+0xc2>
        }
    }
    if (to != &lw->first_token || (to != NULL && to->next != NULL)) {
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3310      	adds	r3, #16
 8002118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <lwjson_parse_ex+0x43c>
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <lwjson_parse_ex+0x446>
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <lwjson_parse_ex+0x446>
        res = lwjsonERRJSON;
 800212c:	2302      	movs	r3, #2
 800212e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        to = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (to != NULL) {
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01f      	beq.n	800217c <lwjson_parse_ex+0x48c>
        if (to->type != LWJSON_TYPE_ARRAY && to->type != LWJSON_TYPE_OBJECT) {
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	791b      	ldrb	r3, [r3, #4]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d006      	beq.n	8002152 <lwjson_parse_ex+0x462>
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d002      	beq.n	8002152 <lwjson_parse_ex+0x462>
            res = lwjsonERRJSON;
 800214c:	2302      	movs	r3, #2
 800214e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        to->token_name = NULL;
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
        to->token_name_len = 0;
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	e00e      	b.n	800217e <lwjson_parse_ex+0x48e>
        goto ret;
 8002160:	bf00      	nop
 8002162:	e00c      	b.n	800217e <lwjson_parse_ex+0x48e>
        goto ret;
 8002164:	bf00      	nop
 8002166:	e00a      	b.n	800217e <lwjson_parse_ex+0x48e>
            goto ret;
 8002168:	bf00      	nop
 800216a:	e008      	b.n	800217e <lwjson_parse_ex+0x48e>
                goto ret;
 800216c:	bf00      	nop
 800216e:	e006      	b.n	800217e <lwjson_parse_ex+0x48e>
                    goto ret;
 8002170:	bf00      	nop
 8002172:	e004      	b.n	800217e <lwjson_parse_ex+0x48e>
                    goto ret;
 8002174:	bf00      	nop
 8002176:	e002      	b.n	800217e <lwjson_parse_ex+0x48e>
            goto ret;
 8002178:	bf00      	nop
 800217a:	e000      	b.n	800217e <lwjson_parse_ex+0x48e>
    }
ret:
 800217c:	bf00      	nop
    if (res == lwjsonOK) {
 800217e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <lwjson_parse_ex+0x4a4>
        lw->flags.parsed = 1;
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }
    return res;
 8002194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002198:	4618      	mov	r0, r3
 800219a:	3730      	adds	r7, #48	; 0x30
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	080089e0 	.word	0x080089e0
 80021a4:	080089e8 	.word	0x080089e8
 80021a8:	080089f0 	.word	0x080089f0

080021ac <lwjson_parse>:
 * \param[in,out]   lw: LwJSON instance
 * \param[in]       json_str: JSON string to parse
 * \return          \ref lwjsonOK on success, member of \ref lwjsonr_t otherwise
 */
lwjsonr_t
lwjson_parse(lwjson_t* lw, const char* json_str) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
    return lwjson_parse_ex(lw, json_str, strlen(json_str));
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f7fe f80a 	bl	80001d0 <strlen>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fd94 	bl	8001cf0 <lwjson_parse_ex>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <lwjson_find>:
 * \param[in]       lw: JSON instance with parsed JSON string
 * \param[in]       path: Path with dot-separated entries to search for the JSON key to return
 * \return          Pointer to found token on success, `NULL` if token cannot be found
 */
const lwjson_token_t*
lwjson_find(lwjson_t* lw, const char* path) {
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
    if (lw == NULL || !lw->flags.parsed || path == NULL) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <lwjson_find+0x26>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <lwjson_find+0x26>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <lwjson_find+0x2a>
        return NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e00b      	b.n	8002214 <lwjson_find+0x42>
    }
    return prv_find(lwjson_get_first_token(lw), path);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <lwjson_find+0x36>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3310      	adds	r3, #16
 8002206:	e000      	b.n	800220a <lwjson_find+0x38>
 8002208:	2300      	movs	r3, #0
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fc38 	bl	8001a82 <prv_find>
 8002212:	4603      	mov	r3, r0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 f92b 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	200f      	movs	r0, #15
 800224c:	f000 f808 	bl	8002260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7fe ff3c 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x54>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x58>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	fbb3 f3f1 	udiv	r3, r3, r1
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f943 	bl	800250a <HAL_SYSTICK_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00e      	b.n	80022ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d80a      	bhi.n	80022aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f000 f90b 	bl	80024b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_InitTick+0x5c>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008
 80022e4:	20000670 	.word	0x20000670

080022e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000670 	.word	0x20000670

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff8e 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff29 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c8:	f7ff ff3e 	bl	8002348 <__NVIC_GetPriorityGrouping>
 80024cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff ff8e 	bl	80023f4 <NVIC_EncodePriority>
 80024d8:	4602      	mov	r2, r0
 80024da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff5d 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff31 	bl	8002364 <__NVIC_EnableIRQ>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffa2 	bl	800245c <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff feda 	bl	80022e8 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d008      	beq.n	8002554 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e052      	b.n	80025fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0216 	bic.w	r2, r2, #22
 8002562:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002572:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <HAL_DMA_Abort+0x62>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0208 	bic.w	r2, r2, #8
 8002592:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a4:	e013      	b.n	80025ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a6:	f7ff fe9f 	bl	80022e8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d90c      	bls.n	80025ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e015      	b.n	80025fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e4      	bne.n	80025a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d004      	beq.n	8002620 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e00c      	b.n	800263a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2205      	movs	r2, #5
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e16b      	b.n	800293c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	f040 815a 	bne.w	8002936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d005      	beq.n	800269a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002696:	2b02      	cmp	r3, #2
 8002698:	d130      	bne.n	80026fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d0:	2201      	movs	r2, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 0201 	and.w	r2, r3, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d017      	beq.n	8002738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d123      	bne.n	800278c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	08da      	lsrs	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3208      	adds	r2, #8
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	220f      	movs	r2, #15
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	08da      	lsrs	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3208      	adds	r2, #8
 8002786:	69b9      	ldr	r1, [r7, #24]
 8002788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80b4 	beq.w	8002936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b60      	ldr	r3, [pc, #384]	; (8002954 <HAL_GPIO_Init+0x30c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_GPIO_Init+0x30c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_GPIO_Init+0x30c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <HAL_GPIO_Init+0x310>)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_GPIO_Init+0x314>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02b      	beq.n	800286e <HAL_GPIO_Init+0x226>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a51      	ldr	r2, [pc, #324]	; (8002960 <HAL_GPIO_Init+0x318>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d025      	beq.n	800286a <HAL_GPIO_Init+0x222>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a50      	ldr	r2, [pc, #320]	; (8002964 <HAL_GPIO_Init+0x31c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_GPIO_Init+0x21e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_GPIO_Init+0x320>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d019      	beq.n	8002862 <HAL_GPIO_Init+0x21a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_GPIO_Init+0x324>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_Init+0x216>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_GPIO_Init+0x328>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00d      	beq.n	800285a <HAL_GPIO_Init+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_Init+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_GPIO_Init+0x20a>
 800284e:	2307      	movs	r3, #7
 8002850:	e00e      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002852:	2308      	movs	r3, #8
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002856:	2306      	movs	r3, #6
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x228>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x228>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	; (8002958 <HAL_GPIO_Init+0x310>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_GPIO_Init+0x334>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a32      	ldr	r2, [pc, #200]	; (800297c <HAL_GPIO_Init+0x334>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_GPIO_Init+0x334>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <HAL_GPIO_Init+0x334>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <HAL_GPIO_Init+0x334>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_GPIO_Init+0x334>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_GPIO_Init+0x334>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_GPIO_Init+0x334>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae90 	bls.w	8002664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	041a      	lsls	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e267      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d075      	beq.n	8002abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d00c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b85      	ldr	r3, [pc, #532]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d112      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b82      	ldr	r3, [pc, #520]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	4b7e      	ldr	r3, [pc, #504]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05b      	beq.n	8002abc <HAL_RCC_OscConfig+0x108>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d157      	bne.n	8002abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e242      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x74>
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a75      	ldr	r2, [pc, #468]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0xb0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x98>
 8002a32:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6f      	ldr	r2, [pc, #444]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6c      	ldr	r2, [pc, #432]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0xb0>
 8002a4c:	4b69      	ldr	r3, [pc, #420]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a68      	ldr	r2, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fc3c 	bl	80022e8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff fc38 	bl	80022e8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e207      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b5b      	ldr	r3, [pc, #364]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0xc0>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fc28 	bl	80022e8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7ff fc24 	bl	80022e8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1f3      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	4b51      	ldr	r3, [pc, #324]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0xe8>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d063      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aca:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d11c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae2:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_RCC_OscConfig+0x152>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1c7      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4937      	ldr	r1, [pc, #220]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	e03a      	b.n	8002b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <HAL_RCC_OscConfig+0x244>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fbdd 	bl	80022e8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff fbd9 	bl	80022e8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1a8      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4925      	ldr	r1, [pc, #148]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCC_OscConfig+0x244>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fbbc 	bl	80022e8 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b74:	f7ff fbb8 	bl	80022e8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e187      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d036      	beq.n	8002c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_RCC_OscConfig+0x248>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7ff fb9c 	bl	80022e8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7ff fb98 	bl	80022e8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e167      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x200>
 8002bd2:	e01b      	b.n	8002c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_OscConfig+0x248>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7ff fb85 	bl	80022e8 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	e00e      	b.n	8002c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be2:	f7ff fb81 	bl	80022e8 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d907      	bls.n	8002c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e150      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470000 	.word	0x42470000
 8002bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ea      	bne.n	8002be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8097 	beq.w	8002d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b81      	ldr	r3, [pc, #516]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a7c      	ldr	r2, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b77      	ldr	r3, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a73      	ldr	r2, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c62:	f7ff fb41 	bl	80022e8 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7ff fb3d 	bl	80022e8 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e10c      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x2ea>
 8002c90:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a63      	ldr	r2, [pc, #396]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	e01c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x324>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x30c>
 8002ca6:	4b5f      	ldr	r3, [pc, #380]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a5e      	ldr	r2, [pc, #376]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a5b      	ldr	r2, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x324>
 8002cc0:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ccc:	4b55      	ldr	r3, [pc, #340]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a54      	ldr	r2, [pc, #336]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f023 0304 	bic.w	r3, r3, #4
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7ff fb02 	bl	80022e8 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7ff fafe 	bl	80022e8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0cb      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ee      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x334>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7ff faec 	bl	80022e8 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7ff fae8 	bl	80022e8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0b5      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ee      	bne.n	8002d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a1 	beq.w	8002e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d05c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d141      	bne.n	8002dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCC_OscConfig+0x478>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fabc 	bl	80022e8 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d74:	f7ff fab8 	bl	80022e8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e087      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	491b      	ldr	r1, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x478>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fa91 	bl	80022e8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff fa8d 	bl	80022e8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e05c      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x416>
 8002de8:	e054      	b.n	8002e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_RCC_OscConfig+0x478>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fa7a 	bl	80022e8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7ff fa76 	bl	80022e8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e045      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x444>
 8002e16:	e03d      	b.n	8002e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e038      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x4ec>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d028      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d121      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d11a      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d111      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0cc      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d90c      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b65      	ldr	r3, [pc, #404]	; (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b8      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	494d      	ldr	r1, [pc, #308]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d044      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d119      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d003      	beq.n	8002f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e067      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f82:	4b37      	ldr	r3, [pc, #220]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 0203 	bic.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4934      	ldr	r1, [pc, #208]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f94:	f7ff f9a8 	bl	80022e8 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7ff f9a4 	bl	80022e8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e04f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 020c 	and.w	r2, r3, #12
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1eb      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d20c      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b22      	ldr	r3, [pc, #136]	; (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e032      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4916      	ldr	r1, [pc, #88]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490e      	ldr	r1, [pc, #56]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800302a:	f000 f821 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490a      	ldr	r1, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f908 	bl	8002260 <HAL_InitTick>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023c00 	.word	0x40023c00
 8003060:	40023800 	.word	0x40023800
 8003064:	08008a8c 	.word	0x08008a8c
 8003068:	20000000 	.word	0x20000000
 800306c:	20000004 	.word	0x20000004

08003070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b094      	sub	sp, #80	; 0x50
 8003076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	647b      	str	r3, [r7, #68]	; 0x44
 800307c:	2300      	movs	r3, #0
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	2300      	movs	r3, #0
 8003082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003088:	4b79      	ldr	r3, [pc, #484]	; (8003270 <HAL_RCC_GetSysClockFreq+0x200>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d00d      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003094:	2b08      	cmp	r3, #8
 8003096:	f200 80e1 	bhi.w	800325c <HAL_RCC_GetSysClockFreq+0x1ec>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x34>
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x3a>
 80030a2:	e0db      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b73      	ldr	r3, [pc, #460]	; (8003274 <HAL_RCC_GetSysClockFreq+0x204>)
 80030a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030a8:	e0db      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030aa:	4b73      	ldr	r3, [pc, #460]	; (8003278 <HAL_RCC_GetSysClockFreq+0x208>)
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ae:	e0d8      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b0:	4b6f      	ldr	r3, [pc, #444]	; (8003270 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ba:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <HAL_RCC_GetSysClockFreq+0x200>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d063      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c6:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	2200      	movs	r2, #0
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80030d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
 80030da:	2300      	movs	r3, #0
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
 80030de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030e2:	4622      	mov	r2, r4
 80030e4:	462b      	mov	r3, r5
 80030e6:	f04f 0000 	mov.w	r0, #0
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	0159      	lsls	r1, r3, #5
 80030f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f4:	0150      	lsls	r0, r2, #5
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4621      	mov	r1, r4
 80030fc:	1a51      	subs	r1, r2, r1
 80030fe:	6139      	str	r1, [r7, #16]
 8003100:	4629      	mov	r1, r5
 8003102:	eb63 0301 	sbc.w	r3, r3, r1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003114:	4659      	mov	r1, fp
 8003116:	018b      	lsls	r3, r1, #6
 8003118:	4651      	mov	r1, sl
 800311a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800311e:	4651      	mov	r1, sl
 8003120:	018a      	lsls	r2, r1, #6
 8003122:	4651      	mov	r1, sl
 8003124:	ebb2 0801 	subs.w	r8, r2, r1
 8003128:	4659      	mov	r1, fp
 800312a:	eb63 0901 	sbc.w	r9, r3, r1
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800313a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003142:	4690      	mov	r8, r2
 8003144:	4699      	mov	r9, r3
 8003146:	4623      	mov	r3, r4
 8003148:	eb18 0303 	adds.w	r3, r8, r3
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	462b      	mov	r3, r5
 8003150:	eb49 0303 	adc.w	r3, r9, r3
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003162:	4629      	mov	r1, r5
 8003164:	024b      	lsls	r3, r1, #9
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800316c:	4621      	mov	r1, r4
 800316e:	024a      	lsls	r2, r1, #9
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	2200      	movs	r2, #0
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
 800317a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800317c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003180:	f7fd fa3a 	bl	80005f8 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	e058      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_RCC_GetSysClockFreq+0x200>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	4618      	mov	r0, r3
 8003198:	4611      	mov	r1, r2
 800319a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
 80031a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031a8:	4642      	mov	r2, r8
 80031aa:	464b      	mov	r3, r9
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	0159      	lsls	r1, r3, #5
 80031b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ba:	0150      	lsls	r0, r2, #5
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4641      	mov	r1, r8
 80031c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031c6:	4649      	mov	r1, r9
 80031c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e0:	ebb2 040a 	subs.w	r4, r2, sl
 80031e4:	eb63 050b 	sbc.w	r5, r3, fp
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	464b      	mov	r3, r9
 8003204:	eb45 0303 	adc.w	r3, r5, r3
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003216:	4629      	mov	r1, r5
 8003218:	028b      	lsls	r3, r1, #10
 800321a:	4621      	mov	r1, r4
 800321c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003220:	4621      	mov	r1, r4
 8003222:	028a      	lsls	r2, r1, #10
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322a:	2200      	movs	r2, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	61fa      	str	r2, [r7, #28]
 8003230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003234:	f7fd f9e0 	bl	80005f8 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4613      	mov	r3, r2
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_GetSysClockFreq+0x200>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	3301      	adds	r3, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800325a:	e002      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetSysClockFreq+0x204>)
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003264:	4618      	mov	r0, r3
 8003266:	3750      	adds	r7, #80	; 0x50
 8003268:	46bd      	mov	sp, r7
 800326a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	00f42400 	.word	0x00f42400
 8003278:	007a1200 	.word	0x007a1200

0800327c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_RCC_GetHCLKFreq+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000000 	.word	0x20000000

08003294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003298:	f7ff fff0 	bl	800327c <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0a9b      	lsrs	r3, r3, #10
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4903      	ldr	r1, [pc, #12]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	08008a9c 	.word	0x08008a9c

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c0:	f7ff ffdc 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	08008a9c 	.word	0x08008a9c

080032e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e03f      	b.n	8003376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd ff0a 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fe11 	bl	8003f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800333c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800334c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800335c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b08a      	sub	sp, #40	; 0x28
 8003382:	af02      	add	r7, sp, #8
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	d17c      	bne.n	8003498 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_UART_Transmit+0x2c>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e075      	b.n	800349a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_UART_Transmit+0x3e>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e06e      	b.n	800349a <HAL_UART_Transmit+0x11c>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2221      	movs	r2, #33	; 0x21
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d2:	f7fe ff89 	bl	80022e8 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ec:	d108      	bne.n	8003400 <HAL_UART_Transmit+0x82>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	e003      	b.n	8003408 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003410:	e02a      	b.n	8003468 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fb51 	bl	8003ac4 <UART_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e036      	b.n	800349a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10b      	bne.n	800344a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3302      	adds	r3, #2
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e007      	b.n	800345a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	3301      	adds	r3, #1
 8003458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1cf      	bne.n	8003412 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fb21 	bl	8003ac4 <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e006      	b.n	800349a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003498:	2302      	movs	r3, #2
  }
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b08c      	sub	sp, #48	; 0x30
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d152      	bne.n	8003562 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04b      	b.n	8003564 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e044      	b.n	8003564 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fb56 	bl	8003ba0 <UART_Start_Receive_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80034fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12c      	bne.n	800355c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	2b01      	cmp	r3, #1
 8003508:	d125      	bne.n	8003556 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	617b      	str	r3, [r7, #20]
   return(result);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f043 0310 	orr.w	r3, r3, #16
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003540:	627a      	str	r2, [r7, #36]	; 0x24
 8003542:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6a39      	ldr	r1, [r7, #32]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	61fb      	str	r3, [r7, #28]
   return(result);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8003554:	e002      	b.n	800355c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800355c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003560:	e000      	b.n	8003564 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3730      	adds	r7, #48	; 0x30
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b0ba      	sub	sp, #232	; 0xe8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_UART_IRQHandler+0x66>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fc05 	bl	8003dda <UART_Receive_IT>
      return;
 80035d0:	e256      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80de 	beq.w	8003798 <HAL_UART_IRQHandler+0x22c>
 80035dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80d1 	beq.w	8003798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_UART_IRQHandler+0xae>
 8003602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_UART_IRQHandler+0xd2>
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_UART_IRQHandler+0xf6>
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d011      	beq.n	8003692 <HAL_UART_IRQHandler+0x126>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800367a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f043 0208 	orr.w	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 81ed 	beq.w	8003a76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800369c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_UART_IRQHandler+0x14e>
 80036a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb90 	bl	8003dda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_UART_IRQHandler+0x17a>
 80036de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04f      	beq.n	8003786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa98 	bl	8003c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d141      	bne.n	800377e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3314      	adds	r3, #20
 8003700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800372a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800373e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1d9      	bne.n	80036fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	4a7d      	ldr	r2, [pc, #500]	; (8003948 <HAL_UART_IRQHandler+0x3dc>)
 8003754:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe ff51 	bl	8002602 <HAL_DMA_Abort_IT>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003770:	4610      	mov	r0, r2
 8003772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	e00e      	b.n	8003794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f99a 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	e00a      	b.n	8003794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f996 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	e006      	b.n	8003794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f992 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003792:	e170      	b.n	8003a76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	bf00      	nop
    return;
 8003796:	e16e      	b.n	8003a76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2b01      	cmp	r3, #1
 800379e:	f040 814a 	bne.w	8003a36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8143 	beq.w	8003a36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 813c 	beq.w	8003a36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	f040 80b4 	bne.w	800394c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8140 	beq.w	8003a7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003802:	429a      	cmp	r2, r3
 8003804:	f080 8139 	bcs.w	8003a7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800380e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381a:	f000 8088 	beq.w	800392e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800384a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800384e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1d9      	bne.n	800381e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800387a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3314      	adds	r3, #20
 800388a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800388e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e1      	bne.n	800386a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e3      	bne.n	80038a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fe:	f023 0310 	bic.w	r3, r3, #16
 8003902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003910:	65ba      	str	r2, [r7, #88]	; 0x58
 8003912:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e3      	bne.n	80038ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fdfa 	bl	8002522 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003936:	b29b      	uxth	r3, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fa90 	bl	8000e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003944:	e099      	b.n	8003a7a <HAL_UART_IRQHandler+0x50e>
 8003946:	bf00      	nop
 8003948:	08003ce3 	.word	0x08003ce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003954:	b29b      	uxth	r3, r3
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 808b 	beq.w	8003a7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8086 	beq.w	8003a7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003988:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003996:	647a      	str	r2, [r7, #68]	; 0x44
 8003998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800399c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e3      	bne.n	8003972 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	623b      	str	r3, [r7, #32]
   return(result);
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039ce:	633a      	str	r2, [r7, #48]	; 0x30
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e3      	bne.n	80039aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a14:	61fa      	str	r2, [r7, #28]
 8003a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	69b9      	ldr	r1, [r7, #24]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	617b      	str	r3, [r7, #20]
   return(result);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fa18 	bl	8000e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a34:	e023      	b.n	8003a7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_UART_IRQHandler+0x4ea>
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f95b 	bl	8003d0a <UART_Transmit_IT>
    return;
 8003a54:	e014      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <HAL_UART_IRQHandler+0x514>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f99b 	bl	8003daa <UART_EndTransmit_IT>
    return;
 8003a74:	e004      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
    return;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
      return;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_UART_IRQHandler+0x514>
      return;
 8003a7e:	bf00      	nop
  }
}
 8003a80:	37e8      	adds	r7, #232	; 0xe8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop

08003a88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b090      	sub	sp, #64	; 0x40
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad4:	e050      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d04c      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae4:	f7fe fc00 	bl	80022e8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d241      	bcs.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b14:	637a      	str	r2, [r7, #52]	; 0x34
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	613b      	str	r3, [r7, #16]
   return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3314      	adds	r3, #20
 8003b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b48:	623a      	str	r2, [r7, #32]
 8003b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	69f9      	ldr	r1, [r7, #28]
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e00f      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d09f      	beq.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3740      	adds	r7, #64	; 0x40
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2222      	movs	r2, #34	; 0x22
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0220 	orr.w	r2, r2, #32
 8003c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b095      	sub	sp, #84	; 0x54
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c44:	643a      	str	r2, [r7, #64]	; 0x40
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d119      	bne.n	8003cc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 0310 	bic.w	r3, r3, #16
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb4:	61ba      	str	r2, [r7, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cd6:	bf00      	nop
 8003cd8:	3754      	adds	r7, #84	; 0x54
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fed7 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b21      	cmp	r3, #33	; 0x21
 8003d1c:	d13e      	bne.n	8003d9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d114      	bne.n	8003d52 <UART_Transmit_IT+0x48>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d110      	bne.n	8003d52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	621a      	str	r2, [r3, #32]
 8003d50:	e008      	b.n	8003d64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	1c59      	adds	r1, r3, #1
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6211      	str	r1, [r2, #32]
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4619      	mov	r1, r3
 8003d72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10f      	bne.n	8003d98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fe5c 	bl	8003a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b08c      	sub	sp, #48	; 0x30
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b22      	cmp	r3, #34	; 0x22
 8003dec:	f040 80ab 	bne.w	8003f46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df8:	d117      	bne.n	8003e2a <UART_Receive_IT+0x50>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
 8003e28:	e026      	b.n	8003e78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d007      	beq.n	8003e4e <UART_Receive_IT+0x74>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <UART_Receive_IT+0x82>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e008      	b.n	8003e6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d15a      	bne.n	8003f42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0220 	bic.w	r2, r2, #32
 8003e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d135      	bne.n	8003f38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f023 0310 	bic.w	r3, r3, #16
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	623a      	str	r2, [r7, #32]
 8003ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	69f9      	ldr	r1, [r7, #28]
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d10a      	bne.n	8003f2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fc ff97 	bl	8000e64 <HAL_UARTEx_RxEventCallback>
 8003f36:	e002      	b.n	8003f3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fdaf 	bl	8003a9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e002      	b.n	8003f48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	; 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f54:	b0c0      	sub	sp, #256	; 0x100
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	68d9      	ldr	r1, [r3, #12]
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	ea40 0301 	orr.w	r3, r0, r1
 8003f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fa8:	f021 010c 	bic.w	r1, r1, #12
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	6999      	ldr	r1, [r3, #24]
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	ea40 0301 	orr.w	r3, r0, r1
 8003fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b8f      	ldr	r3, [pc, #572]	; (800421c <UART_SetConfig+0x2cc>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d005      	beq.n	8003ff0 <UART_SetConfig+0xa0>
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b8d      	ldr	r3, [pc, #564]	; (8004220 <UART_SetConfig+0x2d0>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d104      	bne.n	8003ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7ff f964 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8003ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ff8:	e003      	b.n	8004002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ffa:	f7ff f94b 	bl	8003294 <HAL_RCC_GetPCLK1Freq>
 8003ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	f040 810c 	bne.w	8004228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800401a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800401e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	1891      	adds	r1, r2, r2
 8004028:	65b9      	str	r1, [r7, #88]	; 0x58
 800402a:	415b      	adcs	r3, r3
 800402c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800402e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004032:	4621      	mov	r1, r4
 8004034:	eb12 0801 	adds.w	r8, r2, r1
 8004038:	4629      	mov	r1, r5
 800403a:	eb43 0901 	adc.w	r9, r3, r1
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004052:	4690      	mov	r8, r2
 8004054:	4699      	mov	r9, r3
 8004056:	4623      	mov	r3, r4
 8004058:	eb18 0303 	adds.w	r3, r8, r3
 800405c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004060:	462b      	mov	r3, r5
 8004062:	eb49 0303 	adc.w	r3, r9, r3
 8004066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800407a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800407e:	460b      	mov	r3, r1
 8004080:	18db      	adds	r3, r3, r3
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
 8004084:	4613      	mov	r3, r2
 8004086:	eb42 0303 	adc.w	r3, r2, r3
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
 800408c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004094:	f7fc fab0 	bl	80005f8 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4b61      	ldr	r3, [pc, #388]	; (8004224 <UART_SetConfig+0x2d4>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	011c      	lsls	r4, r3, #4
 80040a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	64b9      	str	r1, [r7, #72]	; 0x48
 80040c0:	415b      	adcs	r3, r3
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040c8:	4641      	mov	r1, r8
 80040ca:	eb12 0a01 	adds.w	sl, r2, r1
 80040ce:	4649      	mov	r1, r9
 80040d0:	eb43 0b01 	adc.w	fp, r3, r1
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e8:	4692      	mov	sl, r2
 80040ea:	469b      	mov	fp, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	eb1a 0303 	adds.w	r3, sl, r3
 80040f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040f6:	464b      	mov	r3, r9
 80040f8:	eb4b 0303 	adc.w	r3, fp, r3
 80040fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800410c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004114:	460b      	mov	r3, r1
 8004116:	18db      	adds	r3, r3, r3
 8004118:	643b      	str	r3, [r7, #64]	; 0x40
 800411a:	4613      	mov	r3, r2
 800411c:	eb42 0303 	adc.w	r3, r2, r3
 8004120:	647b      	str	r3, [r7, #68]	; 0x44
 8004122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800412a:	f7fc fa65 	bl	80005f8 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4611      	mov	r1, r2
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <UART_SetConfig+0x2d4>)
 8004136:	fba3 2301 	umull	r2, r3, r3, r1
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2264      	movs	r2, #100	; 0x64
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	1acb      	subs	r3, r1, r3
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <UART_SetConfig+0x2d4>)
 800414c:	fba3 2302 	umull	r2, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004158:	441c      	add	r4, r3
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	63b9      	str	r1, [r7, #56]	; 0x38
 8004174:	415b      	adcs	r3, r3
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800417c:	4641      	mov	r1, r8
 800417e:	1851      	adds	r1, r2, r1
 8004180:	6339      	str	r1, [r7, #48]	; 0x30
 8004182:	4649      	mov	r1, r9
 8004184:	414b      	adcs	r3, r1
 8004186:	637b      	str	r3, [r7, #52]	; 0x34
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004194:	4659      	mov	r1, fp
 8004196:	00cb      	lsls	r3, r1, #3
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419e:	4651      	mov	r1, sl
 80041a0:	00ca      	lsls	r2, r1, #3
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	4642      	mov	r2, r8
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b0:	464b      	mov	r3, r9
 80041b2:	460a      	mov	r2, r1
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041e6:	f7fc fa07 	bl	80005f8 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <UART_SetConfig+0x2d4>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <UART_SetConfig+0x2d4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 0207 	and.w	r2, r3, #7
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4422      	add	r2, r4
 8004216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004218:	e105      	b.n	8004426 <UART_SetConfig+0x4d6>
 800421a:	bf00      	nop
 800421c:	40011000 	.word	0x40011000
 8004220:	40011400 	.word	0x40011400
 8004224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800423a:	4642      	mov	r2, r8
 800423c:	464b      	mov	r3, r9
 800423e:	1891      	adds	r1, r2, r2
 8004240:	6239      	str	r1, [r7, #32]
 8004242:	415b      	adcs	r3, r3
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424a:	4641      	mov	r1, r8
 800424c:	1854      	adds	r4, r2, r1
 800424e:	4649      	mov	r1, r9
 8004250:	eb43 0501 	adc.w	r5, r3, r1
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	00eb      	lsls	r3, r5, #3
 800425e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004262:	00e2      	lsls	r2, r4, #3
 8004264:	4614      	mov	r4, r2
 8004266:	461d      	mov	r5, r3
 8004268:	4643      	mov	r3, r8
 800426a:	18e3      	adds	r3, r4, r3
 800426c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004270:	464b      	mov	r3, r9
 8004272:	eb45 0303 	adc.w	r3, r5, r3
 8004276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004296:	4629      	mov	r1, r5
 8004298:	008b      	lsls	r3, r1, #2
 800429a:	4621      	mov	r1, r4
 800429c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a0:	4621      	mov	r1, r4
 80042a2:	008a      	lsls	r2, r1, #2
 80042a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042a8:	f7fc f9a6 	bl	80005f8 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4b60      	ldr	r3, [pc, #384]	; (8004434 <UART_SetConfig+0x4e4>)
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	011c      	lsls	r4, r3, #4
 80042ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	61b9      	str	r1, [r7, #24]
 80042d4:	415b      	adcs	r3, r3
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042dc:	4641      	mov	r1, r8
 80042de:	1851      	adds	r1, r2, r1
 80042e0:	6139      	str	r1, [r7, #16]
 80042e2:	4649      	mov	r1, r9
 80042e4:	414b      	adcs	r3, r1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f4:	4659      	mov	r1, fp
 80042f6:	00cb      	lsls	r3, r1, #3
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fe:	4651      	mov	r1, sl
 8004300:	00ca      	lsls	r2, r1, #3
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4603      	mov	r3, r0
 8004308:	4642      	mov	r2, r8
 800430a:	189b      	adds	r3, r3, r2
 800430c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004310:	464b      	mov	r3, r9
 8004312:	460a      	mov	r2, r1
 8004314:	eb42 0303 	adc.w	r3, r2, r3
 8004318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	67bb      	str	r3, [r7, #120]	; 0x78
 8004326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004334:	4649      	mov	r1, r9
 8004336:	008b      	lsls	r3, r1, #2
 8004338:	4641      	mov	r1, r8
 800433a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433e:	4641      	mov	r1, r8
 8004340:	008a      	lsls	r2, r1, #2
 8004342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004346:	f7fc f957 	bl	80005f8 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b39      	ldr	r3, [pc, #228]	; (8004434 <UART_SetConfig+0x4e4>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	; 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	3332      	adds	r3, #50	; 0x32
 8004362:	4a34      	ldr	r2, [pc, #208]	; (8004434 <UART_SetConfig+0x4e4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436e:	441c      	add	r4, r3
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	673b      	str	r3, [r7, #112]	; 0x70
 8004378:	677a      	str	r2, [r7, #116]	; 0x74
 800437a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800437e:	4642      	mov	r2, r8
 8004380:	464b      	mov	r3, r9
 8004382:	1891      	adds	r1, r2, r2
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	415b      	adcs	r3, r3
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438e:	4641      	mov	r1, r8
 8004390:	1851      	adds	r1, r2, r1
 8004392:	6039      	str	r1, [r7, #0]
 8004394:	4649      	mov	r1, r9
 8004396:	414b      	adcs	r3, r1
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043a6:	4659      	mov	r1, fp
 80043a8:	00cb      	lsls	r3, r1, #3
 80043aa:	4651      	mov	r1, sl
 80043ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b0:	4651      	mov	r1, sl
 80043b2:	00ca      	lsls	r2, r1, #3
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	4603      	mov	r3, r0
 80043ba:	4642      	mov	r2, r8
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	66bb      	str	r3, [r7, #104]	; 0x68
 80043c0:	464b      	mov	r3, r9
 80043c2:	460a      	mov	r2, r1
 80043c4:	eb42 0303 	adc.w	r3, r2, r3
 80043c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	663b      	str	r3, [r7, #96]	; 0x60
 80043d4:	667a      	str	r2, [r7, #100]	; 0x64
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043e2:	4649      	mov	r1, r9
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4641      	mov	r1, r8
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4641      	mov	r1, r8
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043f4:	f7fc f900 	bl	80005f8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2164      	movs	r1, #100	; 0x64
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <UART_SetConfig+0x4e4>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4422      	add	r2, r4
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	bf00      	nop
 8004428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	51eb851f 	.word	0x51eb851f

08004438 <__NVIC_SetPriority>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	6039      	str	r1, [r7, #0]
 8004442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	2b00      	cmp	r3, #0
 800444a:	db0a      	blt.n	8004462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	490c      	ldr	r1, [pc, #48]	; (8004484 <__NVIC_SetPriority+0x4c>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	0112      	lsls	r2, r2, #4
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	440b      	add	r3, r1
 800445c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004460:	e00a      	b.n	8004478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4908      	ldr	r1, [pc, #32]	; (8004488 <__NVIC_SetPriority+0x50>)
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	3b04      	subs	r3, #4
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	440b      	add	r3, r1
 8004476:	761a      	strb	r2, [r3, #24]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	e000e100 	.word	0xe000e100
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004490:	2100      	movs	r1, #0
 8004492:	f06f 0004 	mvn.w	r0, #4
 8004496:	f7ff ffcf 	bl	8004438 <__NVIC_SetPriority>
#endif
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	603b      	str	r3, [r7, #0]
  return(result);
 80044ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044b2:	f06f 0305 	mvn.w	r3, #5
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e00c      	b.n	80044d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <osKernelInitialize+0x44>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <osKernelInitialize+0x44>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e002      	b.n	80044d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044d4:	687b      	ldr	r3, [r7, #4]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000674 	.word	0x20000674

080044e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ee:	f3ef 8305 	mrs	r3, IPSR
 80044f2:	603b      	str	r3, [r7, #0]
  return(result);
 80044f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044fa:	f06f 0305 	mvn.w	r3, #5
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	e010      	b.n	8004524 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <osKernelStart+0x48>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d109      	bne.n	800451e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800450a:	f7ff ffbf 	bl	800448c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <osKernelStart+0x48>)
 8004510:	2202      	movs	r2, #2
 8004512:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004514:	f001 fe00 	bl	8006118 <vTaskStartScheduler>
      stat = osOK;
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	e002      	b.n	8004524 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004524:	687b      	ldr	r3, [r7, #4]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000674 	.word	0x20000674

08004534 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800453a:	f3ef 8305 	mrs	r3, IPSR
 800453e:	603b      	str	r3, [r7, #0]
  return(result);
 8004540:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004546:	f001 ff13 	bl	8006370 <xTaskGetTickCountFromISR>
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	e002      	b.n	8004554 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800454e:	f001 feff 	bl	8006350 <xTaskGetTickCount>
 8004552:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004554:	687b      	ldr	r3, [r7, #4]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800455e:	b580      	push	{r7, lr}
 8004560:	b08e      	sub	sp, #56	; 0x38
 8004562:	af04      	add	r7, sp, #16
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800456e:	f3ef 8305 	mrs	r3, IPSR
 8004572:	617b      	str	r3, [r7, #20]
  return(result);
 8004574:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004576:	2b00      	cmp	r3, #0
 8004578:	d17e      	bne.n	8004678 <osThreadNew+0x11a>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07b      	beq.n	8004678 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004584:	2318      	movs	r3, #24
 8004586:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d045      	beq.n	8004624 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <osThreadNew+0x48>
        name = attr->name;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <osThreadNew+0x6e>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b38      	cmp	r3, #56	; 0x38
 80045be:	d805      	bhi.n	80045cc <osThreadNew+0x6e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <osThreadNew+0x72>
        return (NULL);
 80045cc:	2300      	movs	r3, #0
 80045ce:	e054      	b.n	800467a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <osThreadNew+0xa8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2bbb      	cmp	r3, #187	; 0xbb
 80045ee:	d90a      	bls.n	8004606 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d006      	beq.n	8004606 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <osThreadNew+0xa8>
        mem = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e010      	b.n	8004628 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <osThreadNew+0xca>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <osThreadNew+0xca>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <osThreadNew+0xca>
          mem = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e001      	b.n	8004628 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d110      	bne.n	8004650 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004636:	9202      	str	r2, [sp, #8]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f001 fbaf 	bl	8005da8 <xTaskCreateStatic>
 800464a:	4603      	mov	r3, r0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e013      	b.n	8004678 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d110      	bne.n	8004678 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	b29a      	uxth	r2, r3
 800465a:	f107 0310 	add.w	r3, r7, #16
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f001 fbfa 	bl	8005e62 <xTaskCreate>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <osThreadNew+0x11a>
            hTask = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004678:	693b      	ldr	r3, [r7, #16]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468e:	f3ef 8305 	mrs	r3, IPSR
 8004692:	60fb      	str	r3, [r7, #12]
  return(result);
 8004694:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004696:	2b00      	cmp	r3, #0
 8004698:	d12d      	bne.n	80046f6 <osEventFlagsNew+0x74>
    mem = -1;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d015      	beq.n	80046d2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <osEventFlagsNew+0x3a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b1f      	cmp	r3, #31
 80046b4:	d902      	bls.n	80046bc <osEventFlagsNew+0x3a>
        mem = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e00c      	b.n	80046d6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d108      	bne.n	80046d6 <osEventFlagsNew+0x54>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <osEventFlagsNew+0x54>
          mem = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e001      	b.n	80046d6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f9c7 	bl	8004a74 <xEventGroupCreateStatic>
 80046e6:	6178      	str	r0, [r7, #20]
 80046e8:	e005      	b.n	80046f6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80046f0:	f000 f9f7 	bl	8004ae2 <xEventGroupCreate>
 80046f4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80046f6:	697b      	ldr	r3, [r7, #20]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <osEventFlagsSet+0x1e>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800471e:	f06f 0303 	mvn.w	r3, #3
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e028      	b.n	8004778 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004726:	f3ef 8305 	mrs	r3, IPSR
 800472a:	60fb      	str	r3, [r7, #12]
  return(result);
 800472c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01d      	beq.n	800476e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	461a      	mov	r2, r3
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	6938      	ldr	r0, [r7, #16]
 8004740:	f000 fbf0 	bl	8004f24 <xEventGroupSetBitsFromISR>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800474a:	f06f 0302 	mvn.w	r3, #2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e012      	b.n	8004778 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <osEventFlagsSet+0x78>
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <osEventFlagsSet+0x84>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	e004      	b.n	8004778 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	6938      	ldr	r0, [r7, #16]
 8004772:	f000 fb0f 	bl	8004d94 <xEventGroupSetBits>
 8004776:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <osEventFlagsClear+0x1e>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80047a6:	f06f 0303 	mvn.w	r3, #3
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e019      	b.n	80047e2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80047ba:	6938      	ldr	r0, [r7, #16]
 80047bc:	f000 fac6 	bl	8004d4c <xEventGroupGetBitsFromISR>
 80047c0:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	6938      	ldr	r0, [r7, #16]
 80047c6:	f000 faad 	bl	8004d24 <xEventGroupClearBitsFromISR>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80047d0:	f06f 0302 	mvn.w	r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e004      	b.n	80047e2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	6938      	ldr	r0, [r7, #16]
 80047dc:	f000 fa6a 	bl	8004cb4 <xEventGroupClearBits>
 80047e0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <osEventFlagsGet+0x18>
    rflags = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e00f      	b.n	8004824 <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004804:	f3ef 8305 	mrs	r3, IPSR
 8004808:	60fb      	str	r3, [r7, #12]
  return(result);
 800480a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8004810:	6938      	ldr	r0, [r7, #16]
 8004812:	f000 fa9b 	bl	8004d4c <xEventGroupGetBitsFromISR>
 8004816:	6178      	str	r0, [r7, #20]
 8004818:	e004      	b.n	8004824 <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 800481a:	2100      	movs	r1, #0
 800481c:	6938      	ldr	r0, [r7, #16]
 800481e:	f000 fa49 	bl	8004cb4 <xEventGroupClearBits>
 8004822:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004824:	697b      	ldr	r3, [r7, #20]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800482e:	b580      	push	{r7, lr}
 8004830:	b08c      	sub	sp, #48	; 0x30
 8004832:	af02      	add	r7, sp, #8
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <osEventFlagsWait+0x22>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004850:	f06f 0303 	mvn.w	r3, #3
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e04b      	b.n	80048f0 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004858:	f3ef 8305 	mrs	r3, IPSR
 800485c:	617b      	str	r3, [r7, #20]
  return(result);
 800485e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004864:	f06f 0305 	mvn.w	r3, #5
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	e041      	b.n	80048f0 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e001      	b.n	8004880 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800487c:	2300      	movs	r3, #0
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e001      	b.n	8004894 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	69b8      	ldr	r0, [r7, #24]
 80048a0:	f000 f93a 	bl	8004b18 <xEventGroupWaitBits>
 80048a4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4013      	ands	r3, r2
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d019      	beq.n	80048f0 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80048c2:	f06f 0301 	mvn.w	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e012      	b.n	80048f0 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80048ca:	f06f 0302 	mvn.w	r3, #2
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e00e      	b.n	80048f0 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80048e2:	f06f 0301 	mvn.w	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e002      	b.n	80048f0 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80048ea:	f06f 0302 	mvn.w	r3, #2
 80048ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80048f0:	69fb      	ldr	r3, [r7, #28]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3728      	adds	r7, #40	; 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b086      	sub	sp, #24
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004918:	f3ef 8305 	mrs	r3, IPSR
 800491c:	60bb      	str	r3, [r7, #8]
  return(result);
 800491e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004924:	f06f 0305 	mvn.w	r3, #5
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e02c      	b.n	8004986 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004932:	f06f 0303 	mvn.w	r3, #3
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e025      	b.n	8004986 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d011      	beq.n	8004964 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	6938      	ldr	r0, [r7, #16]
 8004944:	f000 fced 	bl	8005322 <xQueueTakeMutexRecursive>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d01b      	beq.n	8004986 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004954:	f06f 0301 	mvn.w	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e014      	b.n	8004986 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800495c:	f06f 0302 	mvn.w	r3, #2
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e010      	b.n	8004986 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	6938      	ldr	r0, [r7, #16]
 8004968:	f000 ff8c 	bl	8005884 <xQueueSemaphoreTake>
 800496c:	4603      	mov	r3, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	d009      	beq.n	8004986 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004978:	f06f 0301 	mvn.w	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e002      	b.n	8004986 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004980:	f06f 0302 	mvn.w	r3, #2
 8004984:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ac:	f3ef 8305 	mrs	r3, IPSR
 80049b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80049b8:	f06f 0305 	mvn.w	r3, #5
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e01f      	b.n	8004a00 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80049c6:	f06f 0303 	mvn.w	r3, #3
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e018      	b.n	8004a00 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80049d4:	6938      	ldr	r0, [r7, #16]
 80049d6:	f000 fc70 	bl	80052ba <xQueueGiveMutexRecursive>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d00f      	beq.n	8004a00 <osMutexRelease+0x70>
        stat = osErrorResource;
 80049e0:	f06f 0302 	mvn.w	r3, #2
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e00b      	b.n	8004a00 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80049e8:	2300      	movs	r3, #0
 80049ea:	2200      	movs	r2, #0
 80049ec:	2100      	movs	r1, #0
 80049ee:	6938      	ldr	r0, [r7, #16]
 80049f0:	f000 fcce 	bl	8005390 <xQueueGenericSend>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d002      	beq.n	8004a00 <osMutexRelease+0x70>
        stat = osErrorResource;
 80049fa:	f06f 0302 	mvn.w	r3, #2
 80049fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a00:	697b      	ldr	r3, [r7, #20]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <vApplicationGetIdleTaskMemory+0x30>)
 8004a22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2280      	movs	r2, #128	; 0x80
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000678 	.word	0x20000678
 8004a3c:	20000734 	.word	0x20000734

08004a40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <vApplicationGetTimerTaskMemory+0x2c>)
 8004a50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a06      	ldr	r2, [pc, #24]	; (8004a70 <vApplicationGetTimerTaskMemory+0x30>)
 8004a56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5e:	601a      	str	r2, [r3, #0]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	20000934 	.word	0x20000934
 8004a70:	200009f0 	.word	0x200009f0

08004a74 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004a98:	2320      	movs	r3, #32
 8004a9a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d00a      	beq.n	8004ab8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fa3d 	bl	8004f4c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004ad8:	697b      	ldr	r3, [r7, #20]
	}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004ae8:	2020      	movs	r0, #32
 8004aea:	f002 ffe5 	bl	8007ab8 <pvPortMalloc>
 8004aee:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fa23 	bl	8004f4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004b0c:	687b      	ldr	r3, [r7, #4]
	}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b090      	sub	sp, #64	; 0x40
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xEventGroupWaitBits+0x36>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	623b      	str	r3, [r7, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <xEventGroupWaitBits+0x56>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61fb      	str	r3, [r7, #28]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <xEventGroupWaitBits+0x72>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	61bb      	str	r3, [r7, #24]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b8a:	f001 ffe1 	bl	8006b50 <xTaskGetSchedulerState>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <xEventGroupWaitBits+0x82>
 8004b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <xEventGroupWaitBits+0x86>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xEventGroupWaitBits+0x88>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	617b      	str	r3, [r7, #20]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004bba:	f001 fb1d 	bl	80061f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bca:	f000 f988 	bl	8004ede <prvTestWaitCondition>
 8004bce:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d028      	beq.n	8004c36 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	401a      	ands	r2, r3
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e020      	b.n	8004c36 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30
 8004c02:	e018      	b.n	8004c36 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	1d18      	adds	r0, r3, #4
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f001 fcf3 	bl	8006618 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004c36:	f001 faed 	bl	8006214 <xTaskResumeAll>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d031      	beq.n	8004ca6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d107      	bne.n	8004c58 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <xEventGroupWaitBits+0x198>)
 8004c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004c58:	f002 f8f0 	bl	8006e3c <uxTaskResetEventItemValue>
 8004c5c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11a      	bne.n	8004c9e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004c68:	f002 fe04 	bl	8007874 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c78:	f000 f931 	bl	8004ede <prvTestWaitCondition>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	401a      	ands	r2, r3
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004c9a:	f002 fe1b 	bl	80078d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3740      	adds	r7, #64	; 0x40
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xEventGroupClearBits+0x2a>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	60fb      	str	r3, [r7, #12]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <xEventGroupClearBits+0x4a>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60bb      	str	r3, [r7, #8]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004cfe:	f002 fdb9 	bl	8007874 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	401a      	ands	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004d16:	f002 fddd 	bl	80078d4 <vPortExitCritical>

	return uxReturn;
 8004d1a:	693b      	ldr	r3, [r7, #16]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004d2e:	2300      	movs	r3, #0
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4804      	ldr	r0, [pc, #16]	; (8004d48 <xEventGroupClearBitsFromISR+0x24>)
 8004d36:	f002 fc4f 	bl	80075d8 <xTimerPendFunctionCallFromISR>
 8004d3a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
	}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	08004ec5 	.word	0x08004ec5

08004d4c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d58:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60fa      	str	r2, [r7, #12]
 8004d6e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d70:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d72:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d84:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8004d86:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3724      	adds	r7, #36	; 0x24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	; 0x38
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xEventGroupSetBits+0x32>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	613b      	str	r3, [r7, #16]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <xEventGroupSetBits+0x52>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	3304      	adds	r3, #4
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	3308      	adds	r3, #8
 8004df0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004df2:	f001 fa01 	bl	80061f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004e08:	e03c      	b.n	8004e84 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d108      	bne.n	8004e46 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e44:	e008      	b.n	8004e58 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d101      	bne.n	8004e58 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004e54:	2301      	movs	r3, #1
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e7c:	f001 fc98 	bl	80067b0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1be      	bne.n	8004e0a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	43db      	mvns	r3, r3
 8004e94:	401a      	ands	r2, r3
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004e9a:	f001 f9bb 	bl	8006214 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	681b      	ldr	r3, [r3, #0]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3738      	adds	r7, #56	; 0x38
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ff6c 	bl	8004d94 <xEventGroupSetBits>
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff feef 	bl	8004cb4 <xEventGroupClearBits>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b087      	sub	sp, #28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e007      	b.n	8004f14 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d101      	bne.n	8004f14 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004f14:	697b      	ldr	r3, [r7, #20]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4804      	ldr	r0, [pc, #16]	; (8004f48 <xEventGroupSetBitsFromISR+0x24>)
 8004f38:	f002 fb4e 	bl	80075d8 <xTimerPendFunctionCallFromISR>
 8004f3c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004f3e:	697b      	ldr	r3, [r7, #20]
	}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08004eab 	.word	0x08004eab

08004f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f103 0208 	add.w	r2, r3, #8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f103 0208 	add.w	r2, r3, #8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f103 0208 	add.w	r2, r3, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e00c      	b.n	8005028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3308      	adds	r3, #8
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e002      	b.n	800501c <vListInsert+0x2e>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	429a      	cmp	r2, r3
 8005026:	d2f6      	bcs.n	8005016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6892      	ldr	r2, [r2, #8]
 8005076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d103      	bne.n	8005094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	1e5a      	subs	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <xQueueGenericReset+0x2a>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60bb      	str	r3, [r7, #8]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050de:	f002 fbc9 	bl	8007874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	3b01      	subs	r3, #1
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	22ff      	movs	r2, #255	; 0xff
 800512a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d114      	bne.n	800515e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01a      	beq.n	8005172 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3310      	adds	r3, #16
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fad1 	bl	80066e8 <xTaskRemoveFromEventList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <xQueueGenericReset+0xcc>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	e009      	b.n	8005172 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3310      	adds	r3, #16
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fef2 	bl	8004f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff feed 	bl	8004f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005172:	f002 fbaf 	bl	80078d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005176:	2301      	movs	r3, #1
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	; 0x38
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <xQueueGenericCreateStatic+0x52>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <xQueueGenericCreateStatic+0x56>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueGenericCreateStatic+0x58>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	623b      	str	r3, [r7, #32]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <xQueueGenericCreateStatic+0x7e>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <xQueueGenericCreateStatic+0x82>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xQueueGenericCreateStatic+0x84>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61fb      	str	r3, [r7, #28]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005222:	2350      	movs	r3, #80	; 0x50
 8005224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b50      	cmp	r3, #80	; 0x50
 800522a:	d00a      	beq.n	8005242 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61bb      	str	r3, [r7, #24]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00d      	beq.n	800526a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f805 	bl	8005274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800526c:	4618      	mov	r0, r3
 800526e:	3730      	adds	r7, #48	; 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e002      	b.n	8005296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052a2:	2101      	movs	r1, #1
 80052a4:	69b8      	ldr	r0, [r7, #24]
 80052a6:	f7ff ff05 	bl	80050b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80052ba:	b590      	push	{r4, r7, lr}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	60fb      	str	r3, [r7, #12]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	689c      	ldr	r4, [r3, #8]
 80052e6:	f001 fc23 	bl	8006b30 <xTaskGetCurrentTaskHandle>
 80052ea:	4603      	mov	r3, r0
 80052ec:	429c      	cmp	r4, r3
 80052ee:	d111      	bne.n	8005314 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005302:	2300      	movs	r3, #0
 8005304:	2200      	movs	r2, #0
 8005306:	2100      	movs	r1, #0
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f000 f841 	bl	8005390 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800530e:	2301      	movs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e001      	b.n	8005318 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005318:	697b      	ldr	r3, [r7, #20]
	}
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}

08005322 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005322:	b590      	push	{r4, r7, lr}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60fb      	str	r3, [r7, #12]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	689c      	ldr	r4, [r3, #8]
 8005350:	f001 fbee 	bl	8006b30 <xTaskGetCurrentTaskHandle>
 8005354:	4603      	mov	r3, r0
 8005356:	429c      	cmp	r4, r3
 8005358:	d107      	bne.n	800536a <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e00c      	b.n	8005384 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6938      	ldr	r0, [r7, #16]
 800536e:	f000 fa89 	bl	8005884 <xQueueSemaphoreTake>
 8005372:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005384:	697b      	ldr	r3, [r7, #20]
	}
 8005386:	4618      	mov	r0, r3
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd90      	pop	{r4, r7, pc}
	...

08005390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08e      	sub	sp, #56	; 0x38
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800539e:	2300      	movs	r3, #0
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueGenericSend+0x32>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <xQueueGenericSend+0x40>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <xQueueGenericSend+0x44>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <xQueueGenericSend+0x46>
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <xQueueGenericSend+0x60>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSend+0x6e>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <xQueueGenericSend+0x72>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueGenericSend+0x74>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xQueueGenericSend+0x8e>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	623b      	str	r3, [r7, #32]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800541e:	f001 fb97 	bl	8006b50 <xTaskGetSchedulerState>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <xQueueGenericSend+0x9e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <xQueueGenericSend+0xa2>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <xQueueGenericSend+0xa4>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <xQueueGenericSend+0xbe>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	61fb      	str	r3, [r7, #28]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800544e:	f002 fa11 	bl	8007874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <xQueueGenericSend+0xd4>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d129      	bne.n	80054b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800546a:	f000 fb2f 	bl	8005acc <prvCopyDataToQueue>
 800546e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d010      	beq.n	800549a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	3324      	adds	r3, #36	; 0x24
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f933 	bl	80066e8 <xTaskRemoveFromEventList>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d013      	beq.n	80054b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005488:	4b3f      	ldr	r3, [pc, #252]	; (8005588 <xQueueGenericSend+0x1f8>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	e00a      	b.n	80054b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054a0:	4b39      	ldr	r3, [pc, #228]	; (8005588 <xQueueGenericSend+0x1f8>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054b0:	f002 fa10 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e063      	b.n	8005580 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054be:	f002 fa09 	bl	80078d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e05c      	b.n	8005580 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054cc:	f107 0314 	add.w	r3, r7, #20
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f9cf 	bl	8006874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054da:	f002 f9fb 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054de:	f000 fe8b 	bl	80061f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054e2:	f002 f9c7 	bl	8007874 <vPortEnterCritical>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d103      	bne.n	80054fc <xQueueGenericSend+0x16c>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005502:	b25b      	sxtb	r3, r3
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d103      	bne.n	8005512 <xQueueGenericSend+0x182>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005512:	f002 f9df 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005516:	1d3a      	adds	r2, r7, #4
 8005518:	f107 0314 	add.w	r3, r7, #20
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f001 f9be 	bl	80068a0 <xTaskCheckForTimeOut>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d124      	bne.n	8005574 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800552a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552c:	f000 fbc6 	bl	8005cbc <prvIsQueueFull>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	3310      	adds	r3, #16
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f001 f846 	bl	80065d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005546:	f000 fb51 	bl	8005bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800554a:	f000 fe63 	bl	8006214 <xTaskResumeAll>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	f47f af7c 	bne.w	800544e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <xQueueGenericSend+0x1f8>)
 8005558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	e772      	b.n	800544e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556a:	f000 fb3f 	bl	8005bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800556e:	f000 fe51 	bl	8006214 <xTaskResumeAll>
 8005572:	e76c      	b.n	800544e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005576:	f000 fb39 	bl	8005bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800557a:	f000 fe4b 	bl	8006214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800557e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005580:	4618      	mov	r0, r3
 8005582:	3738      	adds	r7, #56	; 0x38
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b090      	sub	sp, #64	; 0x40
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <xQueueGenericSendFromISR+0x3c>
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <xQueueGenericSendFromISR+0x40>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <xQueueGenericSendFromISR+0x42>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d103      	bne.n	80055f6 <xQueueGenericSendFromISR+0x6a>
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <xQueueGenericSendFromISR+0x6e>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <xQueueGenericSendFromISR+0x70>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	623b      	str	r3, [r7, #32]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005616:	f002 fa0f 	bl	8007a38 <vPortValidateInterruptPriority>
	__asm volatile
 800561a:	f3ef 8211 	mrs	r2, BASEPRI
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	61fa      	str	r2, [r7, #28]
 8005630:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005632:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <xQueueGenericSendFromISR+0xbc>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d12f      	bne.n	80056a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800564e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800565e:	f000 fa35 	bl	8005acc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005662:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d112      	bne.n	8005692 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	d016      	beq.n	80056a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	3324      	adds	r3, #36	; 0x24
 8005678:	4618      	mov	r0, r3
 800567a:	f001 f835 	bl	80066e8 <xTaskRemoveFromEventList>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00b      	beq.n	80056a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e007      	b.n	80056a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005696:	3301      	adds	r3, #1
 8005698:	b2db      	uxtb	r3, r3
 800569a:	b25a      	sxtb	r2, r3
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056a2:	2301      	movs	r3, #1
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056a6:	e001      	b.n	80056ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f383 8811 	msr	BASEPRI, r3
}
 80056b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3740      	adds	r7, #64	; 0x40
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	; 0x30
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <xQueueReceive+0x30>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	623b      	str	r3, [r7, #32]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <xQueueReceive+0x3e>
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <xQueueReceive+0x42>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueReceive+0x44>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueReceive+0x5e>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	61fb      	str	r3, [r7, #28]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005722:	f001 fa15 	bl	8006b50 <xTaskGetSchedulerState>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <xQueueReceive+0x6e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <xQueueReceive+0x72>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueReceive+0x74>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueReceive+0x8e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	61bb      	str	r3, [r7, #24]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005752:	f002 f88f 	bl	8007874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d01f      	beq.n	80057a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005766:	f000 fa1b 	bl	8005ba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00f      	beq.n	800579a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	3310      	adds	r3, #16
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ffb2 	bl	80066e8 <xTaskRemoveFromEventList>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800578a:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <xQueueReceive+0x1bc>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800579a:	f002 f89b 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 800579e:	2301      	movs	r3, #1
 80057a0:	e069      	b.n	8005876 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d103      	bne.n	80057b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a8:	f002 f894 	bl	80078d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e062      	b.n	8005876 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b6:	f107 0310 	add.w	r3, r7, #16
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 f85a 	bl	8006874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057c4:	f002 f886 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c8:	f000 fd16 	bl	80061f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057cc:	f002 f852 	bl	8007874 <vPortEnterCritical>
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d6:	b25b      	sxtb	r3, r3
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d103      	bne.n	80057e6 <xQueueReceive+0x122>
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ec:	b25b      	sxtb	r3, r3
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d103      	bne.n	80057fc <xQueueReceive+0x138>
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057fc:	f002 f86a 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005800:	1d3a      	adds	r2, r7, #4
 8005802:	f107 0310 	add.w	r3, r7, #16
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f849 	bl	80068a0 <xTaskCheckForTimeOut>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d123      	bne.n	800585c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005816:	f000 fa3b 	bl	8005c90 <prvIsQueueEmpty>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d017      	beq.n	8005850 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	3324      	adds	r3, #36	; 0x24
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fed1 	bl	80065d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800582e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005830:	f000 f9dc 	bl	8005bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005834:	f000 fcee 	bl	8006214 <xTaskResumeAll>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d189      	bne.n	8005752 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <xQueueReceive+0x1bc>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	e780      	b.n	8005752 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005852:	f000 f9cb 	bl	8005bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005856:	f000 fcdd 	bl	8006214 <xTaskResumeAll>
 800585a:	e77a      	b.n	8005752 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800585c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585e:	f000 f9c5 	bl	8005bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005862:	f000 fcd7 	bl	8006214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005868:	f000 fa12 	bl	8005c90 <prvIsQueueEmpty>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	f43f af6f 	beq.w	8005752 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005876:	4618      	mov	r0, r3
 8005878:	3730      	adds	r7, #48	; 0x30
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08e      	sub	sp, #56	; 0x38
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	61fb      	str	r3, [r7, #28]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d4:	f001 f93c 	bl	8006b50 <xTaskGetSchedulerState>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <xQueueSemaphoreTake+0x60>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <xQueueSemaphoreTake+0x64>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <xQueueSemaphoreTake+0x66>
 80058e8:	2300      	movs	r3, #0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61bb      	str	r3, [r7, #24]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005904:	f001 ffb6 	bl	8007874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d024      	beq.n	800595e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005924:	f001 faa2 	bl	8006e6c <pvTaskIncrementMutexHeldCount>
 8005928:	4602      	mov	r2, r0
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00f      	beq.n	8005956 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	3310      	adds	r3, #16
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fed4 	bl	80066e8 <xTaskRemoveFromEventList>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005946:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <xQueueSemaphoreTake+0x214>)
 8005948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005956:	f001 ffbd 	bl	80078d4 <vPortExitCritical>
				return pdPASS;
 800595a:	2301      	movs	r3, #1
 800595c:	e097      	b.n	8005a8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d111      	bne.n	8005988 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	617b      	str	r3, [r7, #20]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005980:	f001 ffa8 	bl	80078d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005984:	2300      	movs	r3, #0
 8005986:	e082      	b.n	8005a8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	4618      	mov	r0, r3
 8005994:	f000 ff6e 	bl	8006874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800599c:	f001 ff9a 	bl	80078d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059a0:	f000 fc2a 	bl	80061f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059a4:	f001 ff66 	bl	8007874 <vPortEnterCritical>
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ae:	b25b      	sxtb	r3, r3
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d103      	bne.n	80059be <xQueueSemaphoreTake+0x13a>
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <xQueueSemaphoreTake+0x150>
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059d4:	f001 ff7e 	bl	80078d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059d8:	463a      	mov	r2, r7
 80059da:	f107 030c 	add.w	r3, r7, #12
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 ff5d 	bl	80068a0 <xTaskCheckForTimeOut>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d132      	bne.n	8005a52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ee:	f000 f94f 	bl	8005c90 <prvIsQueueEmpty>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d026      	beq.n	8005a46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005a00:	f001 ff38 	bl	8007874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f8bf 	bl	8006b8c <xTaskPriorityInherit>
 8005a0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a10:	f001 ff60 	bl	80078d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	3324      	adds	r3, #36	; 0x24
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fdd7 	bl	80065d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a24:	f000 f8e2 	bl	8005bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a28:	f000 fbf4 	bl	8006214 <xTaskResumeAll>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f47f af68 	bne.w	8005904 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005a34:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <xQueueSemaphoreTake+0x214>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	e75e      	b.n	8005904 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a48:	f000 f8d0 	bl	8005bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a4c:	f000 fbe2 	bl	8006214 <xTaskResumeAll>
 8005a50:	e758      	b.n	8005904 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a54:	f000 f8ca 	bl	8005bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a58:	f000 fbdc 	bl	8006214 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a5e:	f000 f917 	bl	8005c90 <prvIsQueueEmpty>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f43f af4d 	beq.w	8005904 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00d      	beq.n	8005a8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005a70:	f001 ff00 	bl	8007874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a76:	f000 f811 	bl	8005a9c <prvGetDisinheritPriorityAfterTimeout>
 8005a7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f958 	bl	8006d38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a88:	f001 ff24 	bl	80078d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3738      	adds	r7, #56	; 0x38
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d006      	beq.n	8005aba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e001      	b.n	8005abe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005abe:	68fb      	ldr	r3, [r7, #12]
	}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d14d      	bne.n	8005b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f8b0 	bl	8006c5c <xTaskPriorityDisinherit>
 8005afc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	e043      	b.n	8005b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d119      	bne.n	8005b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6858      	ldr	r0, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	461a      	mov	r2, r3
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	f002 f9e4 	bl	8007ee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d32b      	bcc.n	8005b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	e026      	b.n	8005b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68d8      	ldr	r0, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	f002 f9ca 	bl	8007ee4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	425b      	negs	r3, r3
 8005b5a:	441a      	add	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d207      	bcs.n	8005b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	425b      	negs	r3, r3
 8005b76:	441a      	add	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d105      	bne.n	8005b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b96:	697b      	ldr	r3, [r7, #20]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d018      	beq.n	8005be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	441a      	add	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d303      	bcc.n	8005bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68d9      	ldr	r1, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f002 f980 	bl	8007ee4 <memcpy>
	}
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bf4:	f001 fe3e 	bl	8007874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c00:	e011      	b.n	8005c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d012      	beq.n	8005c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3324      	adds	r3, #36	; 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fd6a 	bl	80066e8 <xTaskRemoveFromEventList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c1a:	f000 fea3 	bl	8006964 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dce9      	bgt.n	8005c02 <prvUnlockQueue+0x16>
 8005c2e:	e000      	b.n	8005c32 <prvUnlockQueue+0x46>
					break;
 8005c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c3a:	f001 fe4b 	bl	80078d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c3e:	f001 fe19 	bl	8007874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4a:	e011      	b.n	8005c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d012      	beq.n	8005c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3310      	adds	r3, #16
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fd45 	bl	80066e8 <xTaskRemoveFromEventList>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c64:	f000 fe7e 	bl	8006964 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dce9      	bgt.n	8005c4c <prvUnlockQueue+0x60>
 8005c78:	e000      	b.n	8005c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	22ff      	movs	r2, #255	; 0xff
 8005c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c84:	f001 fe26 	bl	80078d4 <vPortExitCritical>
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c98:	f001 fdec 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e001      	b.n	8005cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cae:	f001 fe11 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc4:	f001 fdd6 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d102      	bne.n	8005cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e001      	b.n	8005cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 fdf9 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e014      	b.n	8005d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cfc:	4a0f      	ldr	r2, [pc, #60]	; (8005d3c <vQueueAddToRegistry+0x50>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d08:	490c      	ldr	r1, [pc, #48]	; (8005d3c <vQueueAddToRegistry+0x50>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d12:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <vQueueAddToRegistry+0x50>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d1e:	e006      	b.n	8005d2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	d9e7      	bls.n	8005cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	200011f0 	.word	0x200011f0

08005d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d50:	f001 fd90 	bl	8007874 <vPortEnterCritical>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d5a:	b25b      	sxtb	r3, r3
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d60:	d103      	bne.n	8005d6a <vQueueWaitForMessageRestricted+0x2a>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d70:	b25b      	sxtb	r3, r3
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d103      	bne.n	8005d80 <vQueueWaitForMessageRestricted+0x40>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d80:	f001 fda8 	bl	80078d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3324      	adds	r3, #36	; 0x24
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fc7b 	bl	8006690 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f7ff ff26 	bl	8005bec <prvUnlockQueue>
	}
 8005da0:	bf00      	nop
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	; 0x38
 8005dac:	af04      	add	r7, sp, #16
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	623b      	str	r3, [r7, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xTaskCreateStatic+0x46>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	61fb      	str	r3, [r7, #28]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dee:	23bc      	movs	r3, #188	; 0xbc
 8005df0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2bbc      	cmp	r3, #188	; 0xbc
 8005df6:	d00a      	beq.n	8005e0e <xTaskCreateStatic+0x66>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	61bb      	str	r3, [r7, #24]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01e      	beq.n	8005e54 <xTaskCreateStatic+0xac>
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f850 	bl	8005eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e4e:	f000 f8f3 	bl	8006038 <prvAddNewTaskToReadyList>
 8005e52:	e001      	b.n	8005e58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e58:	697b      	ldr	r3, [r7, #20]
	}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3728      	adds	r7, #40	; 0x28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08c      	sub	sp, #48	; 0x30
 8005e66:	af04      	add	r7, sp, #16
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fe1e 	bl	8007ab8 <pvPortMalloc>
 8005e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00e      	beq.n	8005ea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e84:	20bc      	movs	r0, #188	; 0xbc
 8005e86:	f001 fe17 	bl	8007ab8 <pvPortMalloc>
 8005e8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
 8005e98:	e005      	b.n	8005ea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f001 fed8 	bl	8007c50 <vPortFree>
 8005ea0:	e001      	b.n	8005ea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9303      	str	r3, [sp, #12]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	9302      	str	r3, [sp, #8]
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f80e 	bl	8005eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ed0:	69f8      	ldr	r0, [r7, #28]
 8005ed2:	f000 f8b1 	bl	8006038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e002      	b.n	8005ee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	21a5      	movs	r1, #165	; 0xa5
 8005f06:	f001 fffb 	bl	8007f00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f14:	3b01      	subs	r3, #1
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f023 0307 	bic.w	r3, r3, #7
 8005f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	617b      	str	r3, [r7, #20]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01f      	beq.n	8005f8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	e012      	b.n	8005f76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	7819      	ldrb	r1, [r3, #0]
 8005f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3334      	adds	r3, #52	; 0x34
 8005f60:	460a      	mov	r2, r1
 8005f62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d006      	beq.n	8005f7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	2b0f      	cmp	r3, #15
 8005f7a:	d9e9      	bls.n	8005f50 <prvInitialiseNewTask+0x64>
 8005f7c:	e000      	b.n	8005f80 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f88:	e003      	b.n	8005f92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2b37      	cmp	r3, #55	; 0x37
 8005f96:	d901      	bls.n	8005f9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f98:	2337      	movs	r3, #55	; 0x37
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2200      	movs	r2, #0
 8005fac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe ffea 	bl	8004f8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	3318      	adds	r3, #24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe ffe5 	bl	8004f8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	3354      	adds	r3, #84	; 0x54
 8005fec:	2260      	movs	r2, #96	; 0x60
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 ff85 	bl	8007f00 <memset>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <prvInitialiseNewTask+0x140>)
 8005ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <prvInitialiseNewTask+0x144>)
 8006000:	65da      	str	r2, [r3, #92]	; 0x5c
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <prvInitialiseNewTask+0x148>)
 8006006:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	69b8      	ldr	r0, [r7, #24]
 800600e:	f001 fb03 	bl	8007618 <pxPortInitialiseStack>
 8006012:	4602      	mov	r2, r0
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006024:	bf00      	nop
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	08008ac4 	.word	0x08008ac4
 8006030:	08008ae4 	.word	0x08008ae4
 8006034:	08008aa4 	.word	0x08008aa4

08006038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006040:	f001 fc18 	bl	8007874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006044:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <prvAddNewTaskToReadyList+0xc4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <prvAddNewTaskToReadyList+0xc4>)
 800604c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800604e:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006056:	4a2a      	ldr	r2, [pc, #168]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <prvAddNewTaskToReadyList+0xc4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d110      	bne.n	8006086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006064:	f000 fca2 	bl	80069ac <prvInitialiseTaskLists>
 8006068:	e00d      	b.n	8006086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <prvAddNewTaskToReadyList+0xcc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006072:	4b23      	ldr	r3, [pc, #140]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	429a      	cmp	r2, r3
 800607e:	d802      	bhi.n	8006086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006080:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006086:	4b20      	ldr	r3, [pc, #128]	; (8006108 <prvAddNewTaskToReadyList+0xd0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <prvAddNewTaskToReadyList+0xd0>)
 800608e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006090:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <prvAddNewTaskToReadyList+0xd0>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <prvAddNewTaskToReadyList+0xd4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d903      	bls.n	80060ac <prvAddNewTaskToReadyList+0x74>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	4a18      	ldr	r2, [pc, #96]	; (800610c <prvAddNewTaskToReadyList+0xd4>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4a15      	ldr	r2, [pc, #84]	; (8006110 <prvAddNewTaskToReadyList+0xd8>)
 80060ba:	441a      	add	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fe ff6f 	bl	8004fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060c8:	f001 fc04 	bl	80078d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060cc:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <prvAddNewTaskToReadyList+0xcc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00e      	beq.n	80060f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d207      	bcs.n	80060f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <prvAddNewTaskToReadyList+0xdc>)
 80060e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20001704 	.word	0x20001704
 8006100:	20001230 	.word	0x20001230
 8006104:	20001710 	.word	0x20001710
 8006108:	20001720 	.word	0x20001720
 800610c:	2000170c 	.word	0x2000170c
 8006110:	20001234 	.word	0x20001234
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	; 0x28
 800611c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006126:	463a      	mov	r2, r7
 8006128:	1d39      	adds	r1, r7, #4
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fc6c 	bl	8004a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	9202      	str	r2, [sp, #8]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	2300      	movs	r3, #0
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	460a      	mov	r2, r1
 8006146:	4924      	ldr	r1, [pc, #144]	; (80061d8 <vTaskStartScheduler+0xc0>)
 8006148:	4824      	ldr	r0, [pc, #144]	; (80061dc <vTaskStartScheduler+0xc4>)
 800614a:	f7ff fe2d 	bl	8005da8 <xTaskCreateStatic>
 800614e:	4603      	mov	r3, r0
 8006150:	4a23      	ldr	r2, [pc, #140]	; (80061e0 <vTaskStartScheduler+0xc8>)
 8006152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006154:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <vTaskStartScheduler+0xc8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e001      	b.n	8006166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d102      	bne.n	8006172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800616c:	f000 fee6 	bl	8006f3c <xTimerCreateTimerTask>
 8006170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d11b      	bne.n	80061b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	613b      	str	r3, [r7, #16]
}
 800618a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800618c:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <vTaskStartScheduler+0xcc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3354      	adds	r3, #84	; 0x54
 8006192:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <vTaskStartScheduler+0xd0>)
 8006194:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006196:	4b15      	ldr	r3, [pc, #84]	; (80061ec <vTaskStartScheduler+0xd4>)
 8006198:	f04f 32ff 	mov.w	r2, #4294967295
 800619c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <vTaskStartScheduler+0xd8>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061a4:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <vTaskStartScheduler+0xdc>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061aa:	f001 fac1 	bl	8007730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ae:	e00e      	b.n	80061ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d10a      	bne.n	80061ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	60fb      	str	r3, [r7, #12]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <vTaskStartScheduler+0xb4>
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	080089f8 	.word	0x080089f8
 80061dc:	0800697d 	.word	0x0800697d
 80061e0:	20001728 	.word	0x20001728
 80061e4:	20001230 	.word	0x20001230
 80061e8:	20000010 	.word	0x20000010
 80061ec:	20001724 	.word	0x20001724
 80061f0:	20001710 	.word	0x20001710
 80061f4:	20001708 	.word	0x20001708

080061f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <vTaskSuspendAll+0x18>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a03      	ldr	r2, [pc, #12]	; (8006210 <vTaskSuspendAll+0x18>)
 8006204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006206:	bf00      	nop
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	2000172c 	.word	0x2000172c

08006214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006222:	4b42      	ldr	r3, [pc, #264]	; (800632c <xTaskResumeAll+0x118>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <xTaskResumeAll+0x2c>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006240:	f001 fb18 	bl	8007874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006244:	4b39      	ldr	r3, [pc, #228]	; (800632c <xTaskResumeAll+0x118>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	4a38      	ldr	r2, [pc, #224]	; (800632c <xTaskResumeAll+0x118>)
 800624c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800624e:	4b37      	ldr	r3, [pc, #220]	; (800632c <xTaskResumeAll+0x118>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d162      	bne.n	800631c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006256:	4b36      	ldr	r3, [pc, #216]	; (8006330 <xTaskResumeAll+0x11c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d05e      	beq.n	800631c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800625e:	e02f      	b.n	80062c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	4b34      	ldr	r3, [pc, #208]	; (8006334 <xTaskResumeAll+0x120>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3318      	adds	r3, #24
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fef7 	bl	8005060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fef2 	bl	8005060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	4b2d      	ldr	r3, [pc, #180]	; (8006338 <xTaskResumeAll+0x124>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d903      	bls.n	8006290 <xTaskResumeAll+0x7c>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <xTaskResumeAll+0x124>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4a27      	ldr	r2, [pc, #156]	; (800633c <xTaskResumeAll+0x128>)
 800629e:	441a      	add	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe fe7d 	bl	8004fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b0:	4b23      	ldr	r3, [pc, #140]	; (8006340 <xTaskResumeAll+0x12c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062ba:	4b22      	ldr	r3, [pc, #136]	; (8006344 <xTaskResumeAll+0x130>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062c0:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <xTaskResumeAll+0x120>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1cb      	bne.n	8006260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062ce:	f000 fc0f 	bl	8006af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062d2:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <xTaskResumeAll+0x134>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d010      	beq.n	8006300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062de:	f000 f859 	bl	8006394 <xTaskIncrementTick>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062e8:	4b16      	ldr	r3, [pc, #88]	; (8006344 <xTaskResumeAll+0x130>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f1      	bne.n	80062de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <xTaskResumeAll+0x134>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006300:	4b10      	ldr	r3, [pc, #64]	; (8006344 <xTaskResumeAll+0x130>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <xTaskResumeAll+0x138>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800631c:	f001 fada 	bl	80078d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006320:	68bb      	ldr	r3, [r7, #8]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	2000172c 	.word	0x2000172c
 8006330:	20001704 	.word	0x20001704
 8006334:	200016c4 	.word	0x200016c4
 8006338:	2000170c 	.word	0x2000170c
 800633c:	20001234 	.word	0x20001234
 8006340:	20001230 	.word	0x20001230
 8006344:	20001718 	.word	0x20001718
 8006348:	20001714 	.word	0x20001714
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <xTaskGetTickCount+0x1c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800635c:	687b      	ldr	r3, [r7, #4]
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20001708 	.word	0x20001708

08006370 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006376:	f001 fb5f 	bl	8007a38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <xTaskGetTickCountFromISR+0x20>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006384:	683b      	ldr	r3, [r7, #0]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20001708 	.word	0x20001708

08006394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639e:	4b4f      	ldr	r3, [pc, #316]	; (80064dc <xTaskIncrementTick+0x148>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f040 808f 	bne.w	80064c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063a8:	4b4d      	ldr	r3, [pc, #308]	; (80064e0 <xTaskIncrementTick+0x14c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b0:	4a4b      	ldr	r2, [pc, #300]	; (80064e0 <xTaskIncrementTick+0x14c>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d120      	bne.n	80063fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063bc:	4b49      	ldr	r3, [pc, #292]	; (80064e4 <xTaskIncrementTick+0x150>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <xTaskIncrementTick+0x48>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	603b      	str	r3, [r7, #0]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskIncrementTick+0x46>
 80063dc:	4b41      	ldr	r3, [pc, #260]	; (80064e4 <xTaskIncrementTick+0x150>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <xTaskIncrementTick+0x154>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a3f      	ldr	r2, [pc, #252]	; (80064e4 <xTaskIncrementTick+0x150>)
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	4a3f      	ldr	r2, [pc, #252]	; (80064e8 <xTaskIncrementTick+0x154>)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b3e      	ldr	r3, [pc, #248]	; (80064ec <xTaskIncrementTick+0x158>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3301      	adds	r3, #1
 80063f6:	4a3d      	ldr	r2, [pc, #244]	; (80064ec <xTaskIncrementTick+0x158>)
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	f000 fb79 	bl	8006af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063fe:	4b3c      	ldr	r3, [pc, #240]	; (80064f0 <xTaskIncrementTick+0x15c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	429a      	cmp	r2, r3
 8006406:	d349      	bcc.n	800649c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006408:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <xTaskIncrementTick+0x150>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006412:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <xTaskIncrementTick+0x15c>)
 8006414:	f04f 32ff 	mov.w	r2, #4294967295
 8006418:	601a      	str	r2, [r3, #0]
					break;
 800641a:	e03f      	b.n	800649c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641c:	4b31      	ldr	r3, [pc, #196]	; (80064e4 <xTaskIncrementTick+0x150>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d203      	bcs.n	800643c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006434:	4a2e      	ldr	r2, [pc, #184]	; (80064f0 <xTaskIncrementTick+0x15c>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800643a:	e02f      	b.n	800649c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	3304      	adds	r3, #4
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe fe0d 	bl	8005060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3318      	adds	r3, #24
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fe04 	bl	8005060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <xTaskIncrementTick+0x160>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d903      	bls.n	800646c <xTaskIncrementTick+0xd8>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <xTaskIncrementTick+0x160>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <xTaskIncrementTick+0x164>)
 800647a:	441a      	add	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	3304      	adds	r3, #4
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f7fe fd8f 	bl	8004fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <xTaskIncrementTick+0x168>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	429a      	cmp	r2, r3
 8006494:	d3b8      	bcc.n	8006408 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006496:	2301      	movs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800649a:	e7b5      	b.n	8006408 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <xTaskIncrementTick+0x168>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	4915      	ldr	r1, [pc, #84]	; (80064f8 <xTaskIncrementTick+0x164>)
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d901      	bls.n	80064b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064b8:	4b11      	ldr	r3, [pc, #68]	; (8006500 <xTaskIncrementTick+0x16c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e004      	b.n	80064d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064c6:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <xTaskIncrementTick+0x170>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a0d      	ldr	r2, [pc, #52]	; (8006504 <xTaskIncrementTick+0x170>)
 80064ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064d0:	697b      	ldr	r3, [r7, #20]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2000172c 	.word	0x2000172c
 80064e0:	20001708 	.word	0x20001708
 80064e4:	200016bc 	.word	0x200016bc
 80064e8:	200016c0 	.word	0x200016c0
 80064ec:	2000171c 	.word	0x2000171c
 80064f0:	20001724 	.word	0x20001724
 80064f4:	2000170c 	.word	0x2000170c
 80064f8:	20001234 	.word	0x20001234
 80064fc:	20001230 	.word	0x20001230
 8006500:	20001718 	.word	0x20001718
 8006504:	20001714 	.word	0x20001714

08006508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800650e:	4b2a      	ldr	r3, [pc, #168]	; (80065b8 <vTaskSwitchContext+0xb0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006516:	4b29      	ldr	r3, [pc, #164]	; (80065bc <vTaskSwitchContext+0xb4>)
 8006518:	2201      	movs	r2, #1
 800651a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800651c:	e046      	b.n	80065ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <vTaskSwitchContext+0xb4>)
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006524:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <vTaskSwitchContext+0xb8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e010      	b.n	800654e <vTaskSwitchContext+0x46>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <vTaskSwitchContext+0x40>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	607b      	str	r3, [r7, #4]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <vTaskSwitchContext+0x3e>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3b01      	subs	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	491d      	ldr	r1, [pc, #116]	; (80065c4 <vTaskSwitchContext+0xbc>)
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0e4      	beq.n	800652c <vTaskSwitchContext+0x24>
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <vTaskSwitchContext+0xbc>)
 800656e:	4413      	add	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	3308      	adds	r3, #8
 8006584:	429a      	cmp	r2, r3
 8006586:	d104      	bne.n	8006592 <vTaskSwitchContext+0x8a>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <vTaskSwitchContext+0xc0>)
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <vTaskSwitchContext+0xb8>)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <vTaskSwitchContext+0xc0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3354      	adds	r3, #84	; 0x54
 80065a8:	4a08      	ldr	r2, [pc, #32]	; (80065cc <vTaskSwitchContext+0xc4>)
 80065aa:	6013      	str	r3, [r2, #0]
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	2000172c 	.word	0x2000172c
 80065bc:	20001718 	.word	0x20001718
 80065c0:	2000170c 	.word	0x2000170c
 80065c4:	20001234 	.word	0x20001234
 80065c8:	20001230 	.word	0x20001230
 80065cc:	20000010 	.word	0x20000010

080065d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	60fb      	str	r3, [r7, #12]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <vTaskPlaceOnEventList+0x44>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3318      	adds	r3, #24
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fe fcf5 	bl	8004fee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006604:	2101      	movs	r1, #1
 8006606:	6838      	ldr	r0, [r7, #0]
 8006608:	f000 fc44 	bl	8006e94 <prvAddCurrentTaskToDelayedList>
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20001230 	.word	0x20001230

08006618 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	617b      	str	r3, [r7, #20]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	613b      	str	r3, [r7, #16]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006668:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <vTaskPlaceOnUnorderedEventList+0x74>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3318      	adds	r3, #24
 8006670:	4619      	mov	r1, r3
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7fe fc97 	bl	8004fa6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006678:	2101      	movs	r1, #1
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fc0a 	bl	8006e94 <prvAddCurrentTaskToDelayedList>
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	2000172c 	.word	0x2000172c
 800668c:	20001230 	.word	0x20001230

08006690 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3318      	adds	r3, #24
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7fe fc70 	bl	8004fa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68b8      	ldr	r0, [r7, #8]
 80066d6:	f000 fbdd 	bl	8006e94 <prvAddCurrentTaskToDelayedList>
	}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20001230 	.word	0x20001230

080066e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60fb      	str	r3, [r7, #12]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3318      	adds	r3, #24
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fca1 	bl	8005060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671e:	4b1e      	ldr	r3, [pc, #120]	; (8006798 <xTaskRemoveFromEventList+0xb0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11d      	bne.n	8006762 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3304      	adds	r3, #4
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fc98 	bl	8005060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006734:	4b19      	ldr	r3, [pc, #100]	; (800679c <xTaskRemoveFromEventList+0xb4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d903      	bls.n	8006744 <xTaskRemoveFromEventList+0x5c>
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a16      	ldr	r2, [pc, #88]	; (800679c <xTaskRemoveFromEventList+0xb4>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <xTaskRemoveFromEventList+0xb8>)
 8006752:	441a      	add	r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7fe fc23 	bl	8004fa6 <vListInsertEnd>
 8006760:	e005      	b.n	800676e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3318      	adds	r3, #24
 8006766:	4619      	mov	r1, r3
 8006768:	480e      	ldr	r0, [pc, #56]	; (80067a4 <xTaskRemoveFromEventList+0xbc>)
 800676a:	f7fe fc1c 	bl	8004fa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <xTaskRemoveFromEventList+0xc0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	429a      	cmp	r2, r3
 800677a:	d905      	bls.n	8006788 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <xTaskRemoveFromEventList+0xc4>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e001      	b.n	800678c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800678c:	697b      	ldr	r3, [r7, #20]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000172c 	.word	0x2000172c
 800679c:	2000170c 	.word	0x2000170c
 80067a0:	20001234 	.word	0x20001234
 80067a4:	200016c4 	.word	0x200016c4
 80067a8:	20001230 	.word	0x20001230
 80067ac:	20001718 	.word	0x20001718

080067b0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80067ba:	4b29      	ldr	r3, [pc, #164]	; (8006860 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	613b      	str	r3, [r7, #16]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60fb      	str	r3, [r7, #12]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fe fc2b 	bl	8005060 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	3304      	adds	r3, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fc26 	bl	8005060 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	4b12      	ldr	r3, [pc, #72]	; (8006864 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d903      	bls.n	8006828 <vTaskRemoveFromUnorderedEventList+0x78>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	4a0f      	ldr	r2, [pc, #60]	; (8006864 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006836:	441a      	add	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fe fbb1 	bl	8004fa6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4b08      	ldr	r3, [pc, #32]	; (800686c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	429a      	cmp	r2, r3
 8006850:	d902      	bls.n	8006858 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006854:	2201      	movs	r2, #1
 8006856:	601a      	str	r2, [r3, #0]
	}
}
 8006858:	bf00      	nop
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	2000172c 	.word	0x2000172c
 8006864:	2000170c 	.word	0x2000170c
 8006868:	20001234 	.word	0x20001234
 800686c:	20001230 	.word	0x20001230
 8006870:	20001718 	.word	0x20001718

08006874 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <vTaskInternalSetTimeOutState+0x24>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <vTaskInternalSetTimeOutState+0x28>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	605a      	str	r2, [r3, #4]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	2000171c 	.word	0x2000171c
 800689c:	20001708 	.word	0x20001708

080068a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	60fb      	str	r3, [r7, #12]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068e2:	f000 ffc7 	bl	8007874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <xTaskCheckForTimeOut+0xbc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d102      	bne.n	8006906 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	e023      	b.n	800694e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b15      	ldr	r3, [pc, #84]	; (8006960 <xTaskCheckForTimeOut+0xc0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d007      	beq.n	8006922 <xTaskCheckForTimeOut+0x82>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	e015      	b.n	800694e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	429a      	cmp	r2, r3
 800692a:	d20b      	bcs.n	8006944 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff ff9b 	bl	8006874 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	e004      	b.n	800694e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800694a:	2301      	movs	r3, #1
 800694c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800694e:	f000 ffc1 	bl	80078d4 <vPortExitCritical>

	return xReturn;
 8006952:	69fb      	ldr	r3, [r7, #28]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001708 	.word	0x20001708
 8006960:	2000171c 	.word	0x2000171c

08006964 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006968:	4b03      	ldr	r3, [pc, #12]	; (8006978 <vTaskMissedYield+0x14>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20001718 	.word	0x20001718

0800697c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006984:	f000 f852 	bl	8006a2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <prvIdleTask+0x28>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d9f9      	bls.n	8006984 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006990:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <prvIdleTask+0x2c>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069a0:	e7f0      	b.n	8006984 <prvIdleTask+0x8>
 80069a2:	bf00      	nop
 80069a4:	20001234 	.word	0x20001234
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	e00c      	b.n	80069d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <prvInitialiseTaskLists+0x60>)
 80069c4:	4413      	add	r3, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fac0 	bl	8004f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3301      	adds	r3, #1
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b37      	cmp	r3, #55	; 0x37
 80069d6:	d9ef      	bls.n	80069b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069d8:	480d      	ldr	r0, [pc, #52]	; (8006a10 <prvInitialiseTaskLists+0x64>)
 80069da:	f7fe fab7 	bl	8004f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069de:	480d      	ldr	r0, [pc, #52]	; (8006a14 <prvInitialiseTaskLists+0x68>)
 80069e0:	f7fe fab4 	bl	8004f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069e4:	480c      	ldr	r0, [pc, #48]	; (8006a18 <prvInitialiseTaskLists+0x6c>)
 80069e6:	f7fe fab1 	bl	8004f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ea:	480c      	ldr	r0, [pc, #48]	; (8006a1c <prvInitialiseTaskLists+0x70>)
 80069ec:	f7fe faae 	bl	8004f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069f0:	480b      	ldr	r0, [pc, #44]	; (8006a20 <prvInitialiseTaskLists+0x74>)
 80069f2:	f7fe faab 	bl	8004f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <prvInitialiseTaskLists+0x78>)
 80069f8:	4a05      	ldr	r2, [pc, #20]	; (8006a10 <prvInitialiseTaskLists+0x64>)
 80069fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <prvInitialiseTaskLists+0x7c>)
 80069fe:	4a05      	ldr	r2, [pc, #20]	; (8006a14 <prvInitialiseTaskLists+0x68>)
 8006a00:	601a      	str	r2, [r3, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20001234 	.word	0x20001234
 8006a10:	20001694 	.word	0x20001694
 8006a14:	200016a8 	.word	0x200016a8
 8006a18:	200016c4 	.word	0x200016c4
 8006a1c:	200016d8 	.word	0x200016d8
 8006a20:	200016f0 	.word	0x200016f0
 8006a24:	200016bc 	.word	0x200016bc
 8006a28:	200016c0 	.word	0x200016c0

08006a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a32:	e019      	b.n	8006a68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a34:	f000 ff1e 	bl	8007874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <prvCheckTasksWaitingTermination+0x50>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fb0b 	bl	8005060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <prvCheckTasksWaitingTermination+0x54>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	4a0b      	ldr	r2, [pc, #44]	; (8006a80 <prvCheckTasksWaitingTermination+0x54>)
 8006a52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <prvCheckTasksWaitingTermination+0x58>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	4a0a      	ldr	r2, [pc, #40]	; (8006a84 <prvCheckTasksWaitingTermination+0x58>)
 8006a5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a5e:	f000 ff39 	bl	80078d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f810 	bl	8006a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <prvCheckTasksWaitingTermination+0x58>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e1      	bne.n	8006a34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200016d8 	.word	0x200016d8
 8006a80:	20001704 	.word	0x20001704
 8006a84:	200016ec 	.word	0x200016ec

08006a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3354      	adds	r3, #84	; 0x54
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fadd 	bl	8008054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d108      	bne.n	8006ab6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f8d1 	bl	8007c50 <vPortFree>
				vPortFree( pxTCB );
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 f8ce 	bl	8007c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ab4:	e018      	b.n	8006ae8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d103      	bne.n	8006ac8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f8c5 	bl	8007c50 <vPortFree>
	}
 8006ac6:	e00f      	b.n	8006ae8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d00a      	beq.n	8006ae8 <prvDeleteTCB+0x60>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60fb      	str	r3, [r7, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <prvDeleteTCB+0x5e>
	}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvResetNextTaskUnblockTime+0x38>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <prvResetNextTaskUnblockTime+0x3c>)
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b08:	e008      	b.n	8006b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b0a:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <prvResetNextTaskUnblockTime+0x38>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <prvResetNextTaskUnblockTime+0x3c>)
 8006b1a:	6013      	str	r3, [r2, #0]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	200016bc 	.word	0x200016bc
 8006b2c:	20001724 	.word	0x20001724

08006b30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <xTaskGetCurrentTaskHandle+0x1c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b3c:	687b      	ldr	r3, [r7, #4]
	}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20001230 	.word	0x20001230

08006b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <xTaskGetSchedulerState+0x34>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	e008      	b.n	8006b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <xTaskGetSchedulerState+0x38>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	e001      	b.n	8006b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b76:	687b      	ldr	r3, [r7, #4]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	20001710 	.word	0x20001710
 8006b88:	2000172c 	.word	0x2000172c

08006b8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d051      	beq.n	8006c46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4b2a      	ldr	r3, [pc, #168]	; (8006c50 <xTaskPriorityInherit+0xc4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d241      	bcs.n	8006c34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	db06      	blt.n	8006bc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <xTaskPriorityInherit+0xc4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6959      	ldr	r1, [r3, #20]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <xTaskPriorityInherit+0xc8>)
 8006bd8:	4413      	add	r3, r2
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	d122      	bne.n	8006c24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fa3c 	bl	8005060 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <xTaskPriorityInherit+0xc4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <xTaskPriorityInherit+0xcc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d903      	bls.n	8006c06 <xTaskPriorityInherit+0x7a>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <xTaskPriorityInherit+0xcc>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4a10      	ldr	r2, [pc, #64]	; (8006c54 <xTaskPriorityInherit+0xc8>)
 8006c14:	441a      	add	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fe f9c2 	bl	8004fa6 <vListInsertEnd>
 8006c22:	e004      	b.n	8006c2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <xTaskPriorityInherit+0xc4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e008      	b.n	8006c46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <xTaskPriorityInherit+0xc4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d201      	bcs.n	8006c46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c42:	2301      	movs	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c46:	68fb      	ldr	r3, [r7, #12]
	}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20001230 	.word	0x20001230
 8006c54:	20001234 	.word	0x20001234
 8006c58:	2000170c 	.word	0x2000170c

08006c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d056      	beq.n	8006d20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <xTaskPriorityDisinherit+0xd0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d00a      	beq.n	8006c92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	60bb      	str	r3, [r7, #8]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	1e5a      	subs	r2, r3, #1
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d02c      	beq.n	8006d20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d128      	bne.n	8006d20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe f9c4 	bl	8005060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <xTaskPriorityDisinherit+0xd4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d903      	bls.n	8006d00 <xTaskPriorityDisinherit+0xa4>
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	; (8006d30 <xTaskPriorityDisinherit+0xd4>)
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <xTaskPriorityDisinherit+0xd8>)
 8006d0e:	441a      	add	r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fe f945 	bl	8004fa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d20:	697b      	ldr	r3, [r7, #20]
	}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20001230 	.word	0x20001230
 8006d30:	2000170c 	.word	0x2000170c
 8006d34:	20001234 	.word	0x20001234

08006d38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d46:	2301      	movs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d06a      	beq.n	8006e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	60fb      	str	r3, [r7, #12]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d902      	bls.n	8006d7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e002      	b.n	8006d84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d04b      	beq.n	8006e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d146      	bne.n	8006e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d10a      	bne.n	8006db8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60bb      	str	r3, [r7, #8]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db04      	blt.n	8006dd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6959      	ldr	r1, [r3, #20]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006de6:	4413      	add	r3, r2
 8006de8:	4299      	cmp	r1, r3
 8006dea:	d11c      	bne.n	8006e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe f935 	bl	8005060 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d903      	bls.n	8006e0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	4a0c      	ldr	r2, [pc, #48]	; (8006e38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e18:	441a      	add	r2, r3
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7fe f8c0 	bl	8004fa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e26:	bf00      	nop
 8006e28:	3720      	adds	r7, #32
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20001230 	.word	0x20001230
 8006e34:	20001234 	.word	0x20001234
 8006e38:	2000170c 	.word	0x2000170c

08006e3c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <uxTaskResetEventItemValue+0x2c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <uxTaskResetEventItemValue+0x2c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <uxTaskResetEventItemValue+0x2c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006e58:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006e5a:	687b      	ldr	r3, [r7, #4]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20001230 	.word	0x20001230

08006e6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e7e:	3201      	adds	r2, #1
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006e82:	4b03      	ldr	r3, [pc, #12]	; (8006e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e84:	681b      	ldr	r3, [r3, #0]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20001230 	.word	0x20001230

08006e94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e9e:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea4:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe f8d8 	bl	8005060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d10a      	bne.n	8006ece <prvAddCurrentTaskToDelayedList+0x3a>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4819      	ldr	r0, [pc, #100]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ec8:	f7fe f86d 	bl	8004fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ecc:	e026      	b.n	8006f1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d209      	bcs.n	8006efa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f7fe f87b 	bl	8004fee <vListInsert>
}
 8006ef8:	e010      	b.n	8006f1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fe f871 	bl	8004fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d202      	bcs.n	8006f1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f16:	4a08      	ldr	r2, [pc, #32]	; (8006f38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6013      	str	r3, [r2, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20001708 	.word	0x20001708
 8006f28:	20001230 	.word	0x20001230
 8006f2c:	200016f0 	.word	0x200016f0
 8006f30:	200016c0 	.word	0x200016c0
 8006f34:	200016bc 	.word	0x200016bc
 8006f38:	20001724 	.word	0x20001724

08006f3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	; 0x28
 8006f40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f46:	f000 fb07 	bl	8007558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f4a:	4b1c      	ldr	r3, [pc, #112]	; (8006fbc <xTimerCreateTimerTask+0x80>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d021      	beq.n	8006f96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f5a:	1d3a      	adds	r2, r7, #4
 8006f5c:	f107 0108 	add.w	r1, r7, #8
 8006f60:	f107 030c 	add.w	r3, r7, #12
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd fd6b 	bl	8004a40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	9202      	str	r2, [sp, #8]
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	2328      	movs	r3, #40	; 0x28
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	4910      	ldr	r1, [pc, #64]	; (8006fc0 <xTimerCreateTimerTask+0x84>)
 8006f7e:	4811      	ldr	r0, [pc, #68]	; (8006fc4 <xTimerCreateTimerTask+0x88>)
 8006f80:	f7fe ff12 	bl	8005da8 <xTaskCreateStatic>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4a10      	ldr	r2, [pc, #64]	; (8006fc8 <xTimerCreateTimerTask+0x8c>)
 8006f88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <xTimerCreateTimerTask+0x8c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f92:	2301      	movs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	613b      	str	r3, [r7, #16]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fb2:	697b      	ldr	r3, [r7, #20]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20001760 	.word	0x20001760
 8006fc0:	08008a00 	.word	0x08008a00
 8006fc4:	08007101 	.word	0x08007101
 8006fc8:	20001764 	.word	0x20001764

08006fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	623b      	str	r3, [r7, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ffa:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <xTimerGenericCommand+0x98>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d02a      	beq.n	8007058 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b05      	cmp	r3, #5
 8007012:	dc18      	bgt.n	8007046 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007014:	f7ff fd9c 	bl	8006b50 <xTaskGetSchedulerState>
 8007018:	4603      	mov	r3, r0
 800701a:	2b02      	cmp	r3, #2
 800701c:	d109      	bne.n	8007032 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <xTimerGenericCommand+0x98>)
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	f107 0110 	add.w	r1, r7, #16
 8007026:	2300      	movs	r3, #0
 8007028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702a:	f7fe f9b1 	bl	8005390 <xQueueGenericSend>
 800702e:	6278      	str	r0, [r7, #36]	; 0x24
 8007030:	e012      	b.n	8007058 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007032:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <xTimerGenericCommand+0x98>)
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f107 0110 	add.w	r1, r7, #16
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	f7fe f9a7 	bl	8005390 <xQueueGenericSend>
 8007042:	6278      	str	r0, [r7, #36]	; 0x24
 8007044:	e008      	b.n	8007058 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <xTimerGenericCommand+0x98>)
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	f107 0110 	add.w	r1, r7, #16
 800704e:	2300      	movs	r3, #0
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	f7fe fa9b 	bl	800558c <xQueueGenericSendFromISR>
 8007056:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	; 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20001760 	.word	0x20001760

08007068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af02      	add	r7, sp, #8
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <prvProcessExpiredTimer+0x94>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7fd ffed 	bl	8005060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d022      	beq.n	80070da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	18d1      	adds	r1, r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	6978      	ldr	r0, [r7, #20]
 80070a2:	f000 f8d1 	bl	8007248 <prvInsertTimerInActiveList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01f      	beq.n	80070ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ac:	2300      	movs	r3, #0
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	2300      	movs	r3, #0
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	2100      	movs	r1, #0
 80070b6:	6978      	ldr	r0, [r7, #20]
 80070b8:	f7ff ff88 	bl	8006fcc <xTimerGenericCommand>
 80070bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d113      	bne.n	80070ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	60fb      	str	r3, [r7, #12]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	6978      	ldr	r0, [r7, #20]
 80070f2:	4798      	blx	r3
}
 80070f4:	bf00      	nop
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20001758 	.word	0x20001758

08007100 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	4618      	mov	r0, r3
 800710e:	f000 f857 	bl	80071c0 <prvGetNextExpireTime>
 8007112:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4619      	mov	r1, r3
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f803 	bl	8007124 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800711e:	f000 f8d5 	bl	80072cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007122:	e7f1      	b.n	8007108 <prvTimerTask+0x8>

08007124 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800712e:	f7ff f863 	bl	80061f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007132:	f107 0308 	add.w	r3, r7, #8
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f866 	bl	8007208 <prvSampleTimeNow>
 800713c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d130      	bne.n	80071a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <prvProcessTimerOrBlockTask+0x3c>
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	429a      	cmp	r2, r3
 8007150:	d806      	bhi.n	8007160 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007152:	f7ff f85f 	bl	8006214 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007156:	68f9      	ldr	r1, [r7, #12]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff ff85 	bl	8007068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800715e:	e024      	b.n	80071aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <prvProcessTimerOrBlockTask+0x90>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <prvProcessTimerOrBlockTask+0x50>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <prvProcessTimerOrBlockTask+0x52>
 8007174:	2300      	movs	r3, #0
 8007176:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007178:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <prvProcessTimerOrBlockTask+0x94>)
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	4619      	mov	r1, r3
 8007186:	f7fe fddb 	bl	8005d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800718a:	f7ff f843 	bl	8006214 <xTaskResumeAll>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007194:	4b09      	ldr	r3, [pc, #36]	; (80071bc <prvProcessTimerOrBlockTask+0x98>)
 8007196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	f3bf 8f6f 	isb	sy
}
 80071a4:	e001      	b.n	80071aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071a6:	f7ff f835 	bl	8006214 <xTaskResumeAll>
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	2000175c 	.word	0x2000175c
 80071b8:	20001760 	.word	0x20001760
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071c8:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <prvGetNextExpireTime+0x44>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <prvGetNextExpireTime+0x16>
 80071d2:	2201      	movs	r2, #1
 80071d4:	e000      	b.n	80071d8 <prvGetNextExpireTime+0x18>
 80071d6:	2200      	movs	r2, #0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d105      	bne.n	80071f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <prvGetNextExpireTime+0x44>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e001      	b.n	80071f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20001758 	.word	0x20001758

08007208 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007210:	f7ff f89e 	bl	8006350 <xTaskGetTickCount>
 8007214:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <prvSampleTimeNow+0x3c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	d205      	bcs.n	800722c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007220:	f000 f936 	bl	8007490 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e002      	b.n	8007232 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007232:	4a04      	ldr	r2, [pc, #16]	; (8007244 <prvSampleTimeNow+0x3c>)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007238:	68fb      	ldr	r3, [r7, #12]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20001768 	.word	0x20001768

08007248 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d812      	bhi.n	8007294 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	429a      	cmp	r2, r3
 800727a:	d302      	bcc.n	8007282 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	e01b      	b.n	80072ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <prvInsertTimerInActiveList+0x7c>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f7fd feae 	bl	8004fee <vListInsert>
 8007292:	e012      	b.n	80072ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d206      	bcs.n	80072aa <prvInsertTimerInActiveList+0x62>
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d302      	bcc.n	80072aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	e007      	b.n	80072ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072aa:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <prvInsertTimerInActiveList+0x80>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f7fd fe9a 	bl	8004fee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072ba:	697b      	ldr	r3, [r7, #20]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	2000175c 	.word	0x2000175c
 80072c8:	20001758 	.word	0x20001758

080072cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	; 0x38
 80072d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072d2:	e0ca      	b.n	800746a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da18      	bge.n	800730c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072da:	1d3b      	adds	r3, r7, #4
 80072dc:	3304      	adds	r3, #4
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	61fb      	str	r3, [r7, #28]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007302:	6850      	ldr	r0, [r2, #4]
 8007304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007306:	6892      	ldr	r2, [r2, #8]
 8007308:	4611      	mov	r1, r2
 800730a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f2c0 80aa 	blt.w	8007468 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	3304      	adds	r3, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7fd fe9b 	bl	8005060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800732a:	463b      	mov	r3, r7
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff ff6b 	bl	8007208 <prvSampleTimeNow>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b09      	cmp	r3, #9
 8007338:	f200 8097 	bhi.w	800746a <prvProcessReceivedCommands+0x19e>
 800733c:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <prvProcessReceivedCommands+0x78>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	0800736d 	.word	0x0800736d
 8007348:	0800736d 	.word	0x0800736d
 800734c:	0800736d 	.word	0x0800736d
 8007350:	080073e1 	.word	0x080073e1
 8007354:	080073f5 	.word	0x080073f5
 8007358:	0800743f 	.word	0x0800743f
 800735c:	0800736d 	.word	0x0800736d
 8007360:	0800736d 	.word	0x0800736d
 8007364:	080073e1 	.word	0x080073e1
 8007368:	080073f5 	.word	0x080073f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	b2da      	uxtb	r2, r3
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	18d1      	adds	r1, r2, r3
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738c:	f7ff ff5c 	bl	8007248 <prvInsertTimerInActiveList>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d069      	beq.n	800746a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800739c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d05e      	beq.n	800746a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	441a      	add	r2, r3
 80073b4:	2300      	movs	r3, #0
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2300      	movs	r3, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073be:	f7ff fe05 	bl	8006fcc <xTimerGenericCommand>
 80073c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d14f      	bne.n	800746a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	61bb      	str	r3, [r7, #24]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e6:	f023 0301 	bic.w	r3, r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073f2:	e03a      	b.n	800746a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	617b      	str	r3, [r7, #20]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	18d1      	adds	r1, r2, r3
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007438:	f7ff ff06 	bl	8007248 <prvInsertTimerInActiveList>
					break;
 800743c:	e015      	b.n	800746a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800744c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800744e:	f000 fbff 	bl	8007c50 <vPortFree>
 8007452:	e00a      	b.n	800746a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	b2da      	uxtb	r2, r3
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007466:	e000      	b.n	800746a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007468:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746a:	4b08      	ldr	r3, [pc, #32]	; (800748c <prvProcessReceivedCommands+0x1c0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1d39      	adds	r1, r7, #4
 8007470:	2200      	movs	r2, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe f926 	bl	80056c4 <xQueueReceive>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	f47f af2a 	bne.w	80072d4 <prvProcessReceivedCommands+0x8>
	}
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	3730      	adds	r7, #48	; 0x30
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20001760 	.word	0x20001760

08007490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007496:	e048      	b.n	800752a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007498:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <prvSwitchTimerLists+0xc0>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a2:	4b2b      	ldr	r3, [pc, #172]	; (8007550 <prvSwitchTimerLists+0xc0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fd fdd5 	bl	8005060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02e      	beq.n	800752a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d90e      	bls.n	80074fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <prvSwitchTimerLists+0xc0>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7fd fd7a 	bl	8004fee <vListInsert>
 80074fa:	e016      	b.n	800752a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074fc:	2300      	movs	r3, #0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	2100      	movs	r1, #0
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fd60 	bl	8006fcc <xTimerGenericCommand>
 800750c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	603b      	str	r3, [r7, #0]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <prvSwitchTimerLists+0xc0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1b1      	bne.n	8007498 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <prvSwitchTimerLists+0xc0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <prvSwitchTimerLists+0xc4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a04      	ldr	r2, [pc, #16]	; (8007550 <prvSwitchTimerLists+0xc0>)
 8007540:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007542:	4a04      	ldr	r2, [pc, #16]	; (8007554 <prvSwitchTimerLists+0xc4>)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	6013      	str	r3, [r2, #0]
}
 8007548:	bf00      	nop
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20001758 	.word	0x20001758
 8007554:	2000175c 	.word	0x2000175c

08007558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800755e:	f000 f989 	bl	8007874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d120      	bne.n	80075ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800756a:	4814      	ldr	r0, [pc, #80]	; (80075bc <prvCheckForValidListAndQueue+0x64>)
 800756c:	f7fd fcee 	bl	8004f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007570:	4813      	ldr	r0, [pc, #76]	; (80075c0 <prvCheckForValidListAndQueue+0x68>)
 8007572:	f7fd fceb 	bl	8004f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <prvCheckForValidListAndQueue+0x6c>)
 8007578:	4a10      	ldr	r2, [pc, #64]	; (80075bc <prvCheckForValidListAndQueue+0x64>)
 800757a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <prvCheckForValidListAndQueue+0x70>)
 800757e:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <prvCheckForValidListAndQueue+0x68>)
 8007580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007582:	2300      	movs	r3, #0
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	4b11      	ldr	r3, [pc, #68]	; (80075cc <prvCheckForValidListAndQueue+0x74>)
 8007588:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <prvCheckForValidListAndQueue+0x78>)
 800758a:	2110      	movs	r1, #16
 800758c:	200a      	movs	r0, #10
 800758e:	f7fd fdf9 	bl	8005184 <xQueueGenericCreateStatic>
 8007592:	4603      	mov	r3, r0
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 8007596:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	490b      	ldr	r1, [pc, #44]	; (80075d4 <prvCheckForValidListAndQueue+0x7c>)
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fba0 	bl	8005cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ac:	f000 f992 	bl	80078d4 <vPortExitCritical>
}
 80075b0:	bf00      	nop
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20001760 	.word	0x20001760
 80075bc:	20001730 	.word	0x20001730
 80075c0:	20001744 	.word	0x20001744
 80075c4:	20001758 	.word	0x20001758
 80075c8:	2000175c 	.word	0x2000175c
 80075cc:	2000180c 	.word	0x2000180c
 80075d0:	2000176c 	.word	0x2000176c
 80075d4:	08008a08 	.word	0x08008a08

080075d8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80075e6:	f06f 0301 	mvn.w	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <xTimerPendFunctionCallFromISR+0x3c>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	f107 0114 	add.w	r1, r7, #20
 8007600:	2300      	movs	r3, #0
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	f7fd ffc2 	bl	800558c <xQueueGenericSendFromISR>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800760c:	4618      	mov	r0, r3
 800760e:	3728      	adds	r7, #40	; 0x28
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20001760 	.word	0x20001760

08007618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3b04      	subs	r3, #4
 8007628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b04      	subs	r3, #4
 8007636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0201 	bic.w	r2, r3, #1
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3b04      	subs	r3, #4
 8007646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007648:	4a0c      	ldr	r2, [pc, #48]	; (800767c <pxPortInitialiseStack+0x64>)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3b14      	subs	r3, #20
 8007652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b04      	subs	r3, #4
 800765e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f06f 0202 	mvn.w	r2, #2
 8007666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b20      	subs	r3, #32
 800766c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800766e:	68fb      	ldr	r3, [r7, #12]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	08007681 	.word	0x08007681

08007680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <prvTaskExitError+0x54>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d00a      	beq.n	80076aa <prvTaskExitError+0x2a>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	60fb      	str	r3, [r7, #12]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <prvTaskExitError+0x28>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	60bb      	str	r3, [r7, #8]
}
 80076bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076be:	bf00      	nop
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0fc      	beq.n	80076c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	2000000c 	.word	0x2000000c
	...

080076e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <pxCurrentTCBConst2>)
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	6808      	ldr	r0, [r1, #0]
 80076e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	f380 8809 	msr	PSP, r0
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f380 8811 	msr	BASEPRI, r0
 80076fa:	4770      	bx	lr
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst2>:
 8007700:	20001230 	.word	0x20001230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007708:	4808      	ldr	r0, [pc, #32]	; (800772c <prvPortStartFirstTask+0x24>)
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	6800      	ldr	r0, [r0, #0]
 800770e:	f380 8808 	msr	MSP, r0
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8814 	msr	CONTROL, r0
 800771a:	b662      	cpsie	i
 800771c:	b661      	cpsie	f
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	df00      	svc	0
 8007728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800772a:	bf00      	nop
 800772c:	e000ed08 	.word	0xe000ed08

08007730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007736:	4b46      	ldr	r3, [pc, #280]	; (8007850 <xPortStartScheduler+0x120>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a46      	ldr	r2, [pc, #280]	; (8007854 <xPortStartScheduler+0x124>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d10a      	bne.n	8007756 <xPortStartScheduler+0x26>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	613b      	str	r3, [r7, #16]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007756:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <xPortStartScheduler+0x120>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a3f      	ldr	r2, [pc, #252]	; (8007858 <xPortStartScheduler+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10a      	bne.n	8007776 <xPortStartScheduler+0x46>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007776:	4b39      	ldr	r3, [pc, #228]	; (800785c <xPortStartScheduler+0x12c>)
 8007778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b31      	ldr	r3, [pc, #196]	; (8007860 <xPortStartScheduler+0x130>)
 800779c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800779e:	4b31      	ldr	r3, [pc, #196]	; (8007864 <xPortStartScheduler+0x134>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077a4:	e009      	b.n	80077ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077a6:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <xPortStartScheduler+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <xPortStartScheduler+0x134>)
 80077ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d0ef      	beq.n	80077a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077c6:	4b27      	ldr	r3, [pc, #156]	; (8007864 <xPortStartScheduler+0x134>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1c3 0307 	rsb	r3, r3, #7
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00a      	beq.n	80077e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60bb      	str	r3, [r7, #8]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <xPortStartScheduler+0x134>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <xPortStartScheduler+0x134>)
 80077f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <xPortStartScheduler+0x134>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077fa:	4a1a      	ldr	r2, [pc, #104]	; (8007864 <xPortStartScheduler+0x134>)
 80077fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <xPortStartScheduler+0x138>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <xPortStartScheduler+0x138>)
 800780c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <xPortStartScheduler+0x138>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a14      	ldr	r2, [pc, #80]	; (8007868 <xPortStartScheduler+0x138>)
 8007818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800781c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800781e:	f000 f8dd 	bl	80079dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <xPortStartScheduler+0x13c>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007828:	f000 f8fc 	bl	8007a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800782c:	4b10      	ldr	r3, [pc, #64]	; (8007870 <xPortStartScheduler+0x140>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a0f      	ldr	r2, [pc, #60]	; (8007870 <xPortStartScheduler+0x140>)
 8007832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007838:	f7ff ff66 	bl	8007708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800783c:	f7fe fe64 	bl	8006508 <vTaskSwitchContext>
	prvTaskExitError();
 8007840:	f7ff ff1e 	bl	8007680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	e000ed00 	.word	0xe000ed00
 8007854:	410fc271 	.word	0x410fc271
 8007858:	410fc270 	.word	0x410fc270
 800785c:	e000e400 	.word	0xe000e400
 8007860:	2000185c 	.word	0x2000185c
 8007864:	20001860 	.word	0x20001860
 8007868:	e000ed20 	.word	0xe000ed20
 800786c:	2000000c 	.word	0x2000000c
 8007870:	e000ef34 	.word	0xe000ef34

08007874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	607b      	str	r3, [r7, #4]
}
 800788c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <vPortEnterCritical+0x58>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	4a0d      	ldr	r2, [pc, #52]	; (80078cc <vPortEnterCritical+0x58>)
 8007896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <vPortEnterCritical+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <vPortEnterCritical+0x5c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	603b      	str	r3, [r7, #0]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vPortEnterCritical+0x4a>
	}
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	2000000c 	.word	0x2000000c
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078da:	4b12      	ldr	r3, [pc, #72]	; (8007924 <vPortExitCritical+0x50>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <vPortExitCritical+0x24>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	607b      	str	r3, [r7, #4]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <vPortExitCritical+0x50>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <vPortExitCritical+0x50>)
 8007900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <vPortExitCritical+0x50>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <vPortExitCritical+0x42>
 800790a:	2300      	movs	r3, #0
 800790c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	f383 8811 	msr	BASEPRI, r3
}
 8007914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2000000c 	.word	0x2000000c
	...

08007930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007930:	f3ef 8009 	mrs	r0, PSP
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <pxCurrentTCBConst>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f01e 0f10 	tst.w	lr, #16
 8007940:	bf08      	it	eq
 8007942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	6010      	str	r0, [r2, #0]
 800794c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007954:	f380 8811 	msr	BASEPRI, r0
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f7fe fdd2 	bl	8006508 <vTaskSwitchContext>
 8007964:	f04f 0000 	mov.w	r0, #0
 8007968:	f380 8811 	msr	BASEPRI, r0
 800796c:	bc09      	pop	{r0, r3}
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	6808      	ldr	r0, [r1, #0]
 8007972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007976:	f01e 0f10 	tst.w	lr, #16
 800797a:	bf08      	it	eq
 800797c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007980:	f380 8809 	msr	PSP, r0
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w

08007990 <pxCurrentTCBConst>:
 8007990:	20001230 	.word	0x20001230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop

08007998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	607b      	str	r3, [r7, #4]
}
 80079b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079b2:	f7fe fcef 	bl	8006394 <xTaskIncrementTick>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079bc:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <xPortSysTickHandler+0x40>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <vPortSetupTimerInterrupt+0x34>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <vPortSetupTimerInterrupt+0x38>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <vPortSetupTimerInterrupt+0x3c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <vPortSetupTimerInterrupt+0x40>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <vPortSetupTimerInterrupt+0x44>)
 80079fa:	3b01      	subs	r3, #1
 80079fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <vPortSetupTimerInterrupt+0x34>)
 8007a00:	2207      	movs	r2, #7
 8007a02:	601a      	str	r2, [r3, #0]
}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	e000e010 	.word	0xe000e010
 8007a14:	e000e018 	.word	0xe000e018
 8007a18:	20000000 	.word	0x20000000
 8007a1c:	10624dd3 	.word	0x10624dd3
 8007a20:	e000e014 	.word	0xe000e014

08007a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a34 <vPortEnableVFP+0x10>
 8007a28:	6801      	ldr	r1, [r0, #0]
 8007a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a2e:	6001      	str	r1, [r0, #0]
 8007a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a32:	bf00      	nop
 8007a34:	e000ed88 	.word	0xe000ed88

08007a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a3e:	f3ef 8305 	mrs	r3, IPSR
 8007a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b0f      	cmp	r3, #15
 8007a48:	d914      	bls.n	8007a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a4a:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <vPortValidateInterruptPriority+0x70>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <vPortValidateInterruptPriority+0x74>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	7afa      	ldrb	r2, [r7, #11]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d20a      	bcs.n	8007a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <vPortValidateInterruptPriority+0x78>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <vPortValidateInterruptPriority+0x7c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d90a      	bls.n	8007a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	603b      	str	r3, [r7, #0]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <vPortValidateInterruptPriority+0x60>
	}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	e000e3f0 	.word	0xe000e3f0
 8007aac:	2000185c 	.word	0x2000185c
 8007ab0:	e000ed0c 	.word	0xe000ed0c
 8007ab4:	20001860 	.word	0x20001860

08007ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ac4:	f7fe fb98 	bl	80061f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ac8:	4b5b      	ldr	r3, [pc, #364]	; (8007c38 <pvPortMalloc+0x180>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ad0:	f000 f920 	bl	8007d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ad4:	4b59      	ldr	r3, [pc, #356]	; (8007c3c <pvPortMalloc+0x184>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8093 	bne.w	8007c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01d      	beq.n	8007b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ae8:	2208      	movs	r2, #8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d014      	beq.n	8007b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f023 0307 	bic.w	r3, r3, #7
 8007b00:	3308      	adds	r3, #8
 8007b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <pvPortMalloc+0x6c>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	617b      	str	r3, [r7, #20]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d06e      	beq.n	8007c08 <pvPortMalloc+0x150>
 8007b2a:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <pvPortMalloc+0x188>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d869      	bhi.n	8007c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b34:	4b43      	ldr	r3, [pc, #268]	; (8007c44 <pvPortMalloc+0x18c>)
 8007b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b38:	4b42      	ldr	r3, [pc, #264]	; (8007c44 <pvPortMalloc+0x18c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b3e:	e004      	b.n	8007b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d903      	bls.n	8007b5c <pvPortMalloc+0xa4>
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f1      	bne.n	8007b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b5c:	4b36      	ldr	r3, [pc, #216]	; (8007c38 <pvPortMalloc+0x180>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d050      	beq.n	8007c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	4413      	add	r3, r2
 8007b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	2308      	movs	r3, #8
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d91f      	bls.n	8007bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	613b      	str	r3, [r7, #16]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bc2:	69b8      	ldr	r0, [r7, #24]
 8007bc4:	f000 f908 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bc8:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <pvPortMalloc+0x188>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <pvPortMalloc+0x188>)
 8007bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <pvPortMalloc+0x188>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <pvPortMalloc+0x190>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d203      	bcs.n	8007bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007be2:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <pvPortMalloc+0x188>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <pvPortMalloc+0x190>)
 8007be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <pvPortMalloc+0x184>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <pvPortMalloc+0x194>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <pvPortMalloc+0x194>)
 8007c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c08:	f7fe fb04 	bl	8006214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <pvPortMalloc+0x174>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60fb      	str	r3, [r7, #12]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <pvPortMalloc+0x172>
	return pvReturn;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	2000546c 	.word	0x2000546c
 8007c3c:	20005480 	.word	0x20005480
 8007c40:	20005470 	.word	0x20005470
 8007c44:	20005464 	.word	0x20005464
 8007c48:	20005474 	.word	0x20005474
 8007c4c:	20005478 	.word	0x20005478

08007c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d04d      	beq.n	8007cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c62:	2308      	movs	r3, #8
 8007c64:	425b      	negs	r3, r3
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <vPortFree+0xb8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vPortFree+0x44>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <vPortFree+0x62>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	60bb      	str	r3, [r7, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <vPortFree+0xb8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01e      	beq.n	8007cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11a      	bne.n	8007cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <vPortFree+0xb8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cd8:	f7fe fa8e 	bl	80061f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <vPortFree+0xbc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <vPortFree+0xbc>)
 8007ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cea:	6938      	ldr	r0, [r7, #16]
 8007cec:	f000 f874 	bl	8007dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <vPortFree+0xc0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a06      	ldr	r2, [pc, #24]	; (8007d10 <vPortFree+0xc0>)
 8007cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cfa:	f7fe fa8b 	bl	8006214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20005480 	.word	0x20005480
 8007d0c:	20005470 	.word	0x20005470
 8007d10:	2000547c 	.word	0x2000547c

08007d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d20:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <prvHeapInit+0xac>)
 8007d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3307      	adds	r3, #7
 8007d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <prvHeapInit+0xac>)
 8007d44:	4413      	add	r3, r2
 8007d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d4c:	4a1d      	ldr	r2, [pc, #116]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <prvHeapInit+0xb0>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d60:	2208      	movs	r2, #8
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0307 	bic.w	r3, r3, #7
 8007d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <prvHeapInit+0xb4>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <prvHeapInit+0xb8>)
 8007da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <prvHeapInit+0xbc>)
 8007daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <prvHeapInit+0xc0>)
 8007dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20001864 	.word	0x20001864
 8007dc4:	20005464 	.word	0x20005464
 8007dc8:	2000546c 	.word	0x2000546c
 8007dcc:	20005474 	.word	0x20005474
 8007dd0:	20005470 	.word	0x20005470
 8007dd4:	20005480 	.word	0x20005480

08007dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007de0:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <prvInsertBlockIntoFreeList+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e002      	b.n	8007dec <prvInsertBlockIntoFreeList+0x14>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d8f7      	bhi.n	8007de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4413      	add	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d108      	bne.n	8007e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	441a      	add	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	441a      	add	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d118      	bne.n	8007e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <prvInsertBlockIntoFreeList+0xb0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d00d      	beq.n	8007e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	441a      	add	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e008      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvInsertBlockIntoFreeList+0xb0>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e003      	b.n	8007e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d002      	beq.n	8007e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20005464 	.word	0x20005464
 8007e88:	2000546c 	.word	0x2000546c

08007e8c <__errno>:
 8007e8c:	4b01      	ldr	r3, [pc, #4]	; (8007e94 <__errno+0x8>)
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000010 	.word	0x20000010

08007e98 <__libc_init_array>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	4d0d      	ldr	r5, [pc, #52]	; (8007ed0 <__libc_init_array+0x38>)
 8007e9c:	4c0d      	ldr	r4, [pc, #52]	; (8007ed4 <__libc_init_array+0x3c>)
 8007e9e:	1b64      	subs	r4, r4, r5
 8007ea0:	10a4      	asrs	r4, r4, #2
 8007ea2:	2600      	movs	r6, #0
 8007ea4:	42a6      	cmp	r6, r4
 8007ea6:	d109      	bne.n	8007ebc <__libc_init_array+0x24>
 8007ea8:	4d0b      	ldr	r5, [pc, #44]	; (8007ed8 <__libc_init_array+0x40>)
 8007eaa:	4c0c      	ldr	r4, [pc, #48]	; (8007edc <__libc_init_array+0x44>)
 8007eac:	f000 fd4a 	bl	8008944 <_init>
 8007eb0:	1b64      	subs	r4, r4, r5
 8007eb2:	10a4      	asrs	r4, r4, #2
 8007eb4:	2600      	movs	r6, #0
 8007eb6:	42a6      	cmp	r6, r4
 8007eb8:	d105      	bne.n	8007ec6 <__libc_init_array+0x2e>
 8007eba:	bd70      	pop	{r4, r5, r6, pc}
 8007ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec0:	4798      	blx	r3
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	e7ee      	b.n	8007ea4 <__libc_init_array+0xc>
 8007ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eca:	4798      	blx	r3
 8007ecc:	3601      	adds	r6, #1
 8007ece:	e7f2      	b.n	8007eb6 <__libc_init_array+0x1e>
 8007ed0:	08008b40 	.word	0x08008b40
 8007ed4:	08008b40 	.word	0x08008b40
 8007ed8:	08008b40 	.word	0x08008b40
 8007edc:	08008b44 	.word	0x08008b44

08007ee0 <__retarget_lock_acquire_recursive>:
 8007ee0:	4770      	bx	lr

08007ee2 <__retarget_lock_release_recursive>:
 8007ee2:	4770      	bx	lr

08007ee4 <memcpy>:
 8007ee4:	440a      	add	r2, r1
 8007ee6:	4291      	cmp	r1, r2
 8007ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eec:	d100      	bne.n	8007ef0 <memcpy+0xc>
 8007eee:	4770      	bx	lr
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efa:	4291      	cmp	r1, r2
 8007efc:	d1f9      	bne.n	8007ef2 <memcpy+0xe>
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <memset>:
 8007f00:	4402      	add	r2, r0
 8007f02:	4603      	mov	r3, r0
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d100      	bne.n	8007f0a <memset+0xa>
 8007f08:	4770      	bx	lr
 8007f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f0e:	e7f9      	b.n	8007f04 <memset+0x4>

08007f10 <sbrk_aligned>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	4e0e      	ldr	r6, [pc, #56]	; (8007f4c <sbrk_aligned+0x3c>)
 8007f14:	460c      	mov	r4, r1
 8007f16:	6831      	ldr	r1, [r6, #0]
 8007f18:	4605      	mov	r5, r0
 8007f1a:	b911      	cbnz	r1, 8007f22 <sbrk_aligned+0x12>
 8007f1c:	f000 f8f6 	bl	800810c <_sbrk_r>
 8007f20:	6030      	str	r0, [r6, #0]
 8007f22:	4621      	mov	r1, r4
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 f8f1 	bl	800810c <_sbrk_r>
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	d00a      	beq.n	8007f44 <sbrk_aligned+0x34>
 8007f2e:	1cc4      	adds	r4, r0, #3
 8007f30:	f024 0403 	bic.w	r4, r4, #3
 8007f34:	42a0      	cmp	r0, r4
 8007f36:	d007      	beq.n	8007f48 <sbrk_aligned+0x38>
 8007f38:	1a21      	subs	r1, r4, r0
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f8e6 	bl	800810c <_sbrk_r>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d101      	bne.n	8007f48 <sbrk_aligned+0x38>
 8007f44:	f04f 34ff 	mov.w	r4, #4294967295
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
 8007f4c:	2000548c 	.word	0x2000548c

08007f50 <_malloc_r>:
 8007f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f54:	1ccd      	adds	r5, r1, #3
 8007f56:	f025 0503 	bic.w	r5, r5, #3
 8007f5a:	3508      	adds	r5, #8
 8007f5c:	2d0c      	cmp	r5, #12
 8007f5e:	bf38      	it	cc
 8007f60:	250c      	movcc	r5, #12
 8007f62:	2d00      	cmp	r5, #0
 8007f64:	4607      	mov	r7, r0
 8007f66:	db01      	blt.n	8007f6c <_malloc_r+0x1c>
 8007f68:	42a9      	cmp	r1, r5
 8007f6a:	d905      	bls.n	8007f78 <_malloc_r+0x28>
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	2600      	movs	r6, #0
 8007f72:	4630      	mov	r0, r6
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	4e2e      	ldr	r6, [pc, #184]	; (8008034 <_malloc_r+0xe4>)
 8007f7a:	f000 f949 	bl	8008210 <__malloc_lock>
 8007f7e:	6833      	ldr	r3, [r6, #0]
 8007f80:	461c      	mov	r4, r3
 8007f82:	bb34      	cbnz	r4, 8007fd2 <_malloc_r+0x82>
 8007f84:	4629      	mov	r1, r5
 8007f86:	4638      	mov	r0, r7
 8007f88:	f7ff ffc2 	bl	8007f10 <sbrk_aligned>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	4604      	mov	r4, r0
 8007f90:	d14d      	bne.n	800802e <_malloc_r+0xde>
 8007f92:	6834      	ldr	r4, [r6, #0]
 8007f94:	4626      	mov	r6, r4
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	d140      	bne.n	800801c <_malloc_r+0xcc>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	eb04 0803 	add.w	r8, r4, r3
 8007fa4:	f000 f8b2 	bl	800810c <_sbrk_r>
 8007fa8:	4580      	cmp	r8, r0
 8007faa:	d13a      	bne.n	8008022 <_malloc_r+0xd2>
 8007fac:	6821      	ldr	r1, [r4, #0]
 8007fae:	3503      	adds	r5, #3
 8007fb0:	1a6d      	subs	r5, r5, r1
 8007fb2:	f025 0503 	bic.w	r5, r5, #3
 8007fb6:	3508      	adds	r5, #8
 8007fb8:	2d0c      	cmp	r5, #12
 8007fba:	bf38      	it	cc
 8007fbc:	250c      	movcc	r5, #12
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f7ff ffa5 	bl	8007f10 <sbrk_aligned>
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d02b      	beq.n	8008022 <_malloc_r+0xd2>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	442b      	add	r3, r5
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	e00e      	b.n	8007ff0 <_malloc_r+0xa0>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	1b52      	subs	r2, r2, r5
 8007fd6:	d41e      	bmi.n	8008016 <_malloc_r+0xc6>
 8007fd8:	2a0b      	cmp	r2, #11
 8007fda:	d916      	bls.n	800800a <_malloc_r+0xba>
 8007fdc:	1961      	adds	r1, r4, r5
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	6025      	str	r5, [r4, #0]
 8007fe2:	bf18      	it	ne
 8007fe4:	6059      	strne	r1, [r3, #4]
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	bf08      	it	eq
 8007fea:	6031      	streq	r1, [r6, #0]
 8007fec:	5162      	str	r2, [r4, r5]
 8007fee:	604b      	str	r3, [r1, #4]
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f104 060b 	add.w	r6, r4, #11
 8007ff6:	f000 f911 	bl	800821c <__malloc_unlock>
 8007ffa:	f026 0607 	bic.w	r6, r6, #7
 8007ffe:	1d23      	adds	r3, r4, #4
 8008000:	1af2      	subs	r2, r6, r3
 8008002:	d0b6      	beq.n	8007f72 <_malloc_r+0x22>
 8008004:	1b9b      	subs	r3, r3, r6
 8008006:	50a3      	str	r3, [r4, r2]
 8008008:	e7b3      	b.n	8007f72 <_malloc_r+0x22>
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	42a3      	cmp	r3, r4
 800800e:	bf0c      	ite	eq
 8008010:	6032      	streq	r2, [r6, #0]
 8008012:	605a      	strne	r2, [r3, #4]
 8008014:	e7ec      	b.n	8007ff0 <_malloc_r+0xa0>
 8008016:	4623      	mov	r3, r4
 8008018:	6864      	ldr	r4, [r4, #4]
 800801a:	e7b2      	b.n	8007f82 <_malloc_r+0x32>
 800801c:	4634      	mov	r4, r6
 800801e:	6876      	ldr	r6, [r6, #4]
 8008020:	e7b9      	b.n	8007f96 <_malloc_r+0x46>
 8008022:	230c      	movs	r3, #12
 8008024:	603b      	str	r3, [r7, #0]
 8008026:	4638      	mov	r0, r7
 8008028:	f000 f8f8 	bl	800821c <__malloc_unlock>
 800802c:	e7a1      	b.n	8007f72 <_malloc_r+0x22>
 800802e:	6025      	str	r5, [r4, #0]
 8008030:	e7de      	b.n	8007ff0 <_malloc_r+0xa0>
 8008032:	bf00      	nop
 8008034:	20005488 	.word	0x20005488

08008038 <cleanup_glue>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	6809      	ldr	r1, [r1, #0]
 800803e:	4605      	mov	r5, r0
 8008040:	b109      	cbz	r1, 8008046 <cleanup_glue+0xe>
 8008042:	f7ff fff9 	bl	8008038 <cleanup_glue>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800804e:	f000 b8eb 	b.w	8008228 <_free_r>
	...

08008054 <_reclaim_reent>:
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <_reclaim_reent+0xb4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4283      	cmp	r3, r0
 800805a:	b570      	push	{r4, r5, r6, lr}
 800805c:	4604      	mov	r4, r0
 800805e:	d051      	beq.n	8008104 <_reclaim_reent+0xb0>
 8008060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008062:	b143      	cbz	r3, 8008076 <_reclaim_reent+0x22>
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d14a      	bne.n	8008100 <_reclaim_reent+0xac>
 800806a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x22>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f8d9 	bl	8008228 <_free_r>
 8008076:	6961      	ldr	r1, [r4, #20]
 8008078:	b111      	cbz	r1, 8008080 <_reclaim_reent+0x2c>
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f8d4 	bl	8008228 <_free_r>
 8008080:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008082:	b111      	cbz	r1, 800808a <_reclaim_reent+0x36>
 8008084:	4620      	mov	r0, r4
 8008086:	f000 f8cf 	bl	8008228 <_free_r>
 800808a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800808c:	b111      	cbz	r1, 8008094 <_reclaim_reent+0x40>
 800808e:	4620      	mov	r0, r4
 8008090:	f000 f8ca 	bl	8008228 <_free_r>
 8008094:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008096:	b111      	cbz	r1, 800809e <_reclaim_reent+0x4a>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f8c5 	bl	8008228 <_free_r>
 800809e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080a0:	b111      	cbz	r1, 80080a8 <_reclaim_reent+0x54>
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f8c0 	bl	8008228 <_free_r>
 80080a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80080aa:	b111      	cbz	r1, 80080b2 <_reclaim_reent+0x5e>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 f8bb 	bl	8008228 <_free_r>
 80080b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80080b4:	b111      	cbz	r1, 80080bc <_reclaim_reent+0x68>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f8b6 	bl	8008228 <_free_r>
 80080bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080be:	b111      	cbz	r1, 80080c6 <_reclaim_reent+0x72>
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f8b1 	bl	8008228 <_free_r>
 80080c6:	69a3      	ldr	r3, [r4, #24]
 80080c8:	b1e3      	cbz	r3, 8008104 <_reclaim_reent+0xb0>
 80080ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080cc:	4620      	mov	r0, r4
 80080ce:	4798      	blx	r3
 80080d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80080d2:	b1b9      	cbz	r1, 8008104 <_reclaim_reent+0xb0>
 80080d4:	4620      	mov	r0, r4
 80080d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080da:	f7ff bfad 	b.w	8008038 <cleanup_glue>
 80080de:	5949      	ldr	r1, [r1, r5]
 80080e0:	b941      	cbnz	r1, 80080f4 <_reclaim_reent+0xa0>
 80080e2:	3504      	adds	r5, #4
 80080e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e6:	2d80      	cmp	r5, #128	; 0x80
 80080e8:	68d9      	ldr	r1, [r3, #12]
 80080ea:	d1f8      	bne.n	80080de <_reclaim_reent+0x8a>
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 f89b 	bl	8008228 <_free_r>
 80080f2:	e7ba      	b.n	800806a <_reclaim_reent+0x16>
 80080f4:	680e      	ldr	r6, [r1, #0]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 f896 	bl	8008228 <_free_r>
 80080fc:	4631      	mov	r1, r6
 80080fe:	e7ef      	b.n	80080e0 <_reclaim_reent+0x8c>
 8008100:	2500      	movs	r5, #0
 8008102:	e7ef      	b.n	80080e4 <_reclaim_reent+0x90>
 8008104:	bd70      	pop	{r4, r5, r6, pc}
 8008106:	bf00      	nop
 8008108:	20000010 	.word	0x20000010

0800810c <_sbrk_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d06      	ldr	r5, [pc, #24]	; (8008128 <_sbrk_r+0x1c>)
 8008110:	2300      	movs	r3, #0
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	602b      	str	r3, [r5, #0]
 8008118:	f7f9 f882 	bl	8001220 <_sbrk>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_sbrk_r+0x1a>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_sbrk_r+0x1a>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	20005490 	.word	0x20005490

0800812c <siprintf>:
 800812c:	b40e      	push	{r1, r2, r3}
 800812e:	b500      	push	{lr}
 8008130:	b09c      	sub	sp, #112	; 0x70
 8008132:	ab1d      	add	r3, sp, #116	; 0x74
 8008134:	9002      	str	r0, [sp, #8]
 8008136:	9006      	str	r0, [sp, #24]
 8008138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800813c:	4809      	ldr	r0, [pc, #36]	; (8008164 <siprintf+0x38>)
 800813e:	9107      	str	r1, [sp, #28]
 8008140:	9104      	str	r1, [sp, #16]
 8008142:	4909      	ldr	r1, [pc, #36]	; (8008168 <siprintf+0x3c>)
 8008144:	f853 2b04 	ldr.w	r2, [r3], #4
 8008148:	9105      	str	r1, [sp, #20]
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	a902      	add	r1, sp, #8
 8008150:	f000 f912 	bl	8008378 <_svfiprintf_r>
 8008154:	9b02      	ldr	r3, [sp, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	b01c      	add	sp, #112	; 0x70
 800815c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008160:	b003      	add	sp, #12
 8008162:	4770      	bx	lr
 8008164:	20000010 	.word	0x20000010
 8008168:	ffff0208 	.word	0xffff0208

0800816c <strncmp>:
 800816c:	b510      	push	{r4, lr}
 800816e:	b17a      	cbz	r2, 8008190 <strncmp+0x24>
 8008170:	4603      	mov	r3, r0
 8008172:	3901      	subs	r1, #1
 8008174:	1884      	adds	r4, r0, r2
 8008176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800817a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800817e:	4290      	cmp	r0, r2
 8008180:	d101      	bne.n	8008186 <strncmp+0x1a>
 8008182:	42a3      	cmp	r3, r4
 8008184:	d101      	bne.n	800818a <strncmp+0x1e>
 8008186:	1a80      	subs	r0, r0, r2
 8008188:	bd10      	pop	{r4, pc}
 800818a:	2800      	cmp	r0, #0
 800818c:	d1f3      	bne.n	8008176 <strncmp+0xa>
 800818e:	e7fa      	b.n	8008186 <strncmp+0x1a>
 8008190:	4610      	mov	r0, r2
 8008192:	e7f9      	b.n	8008188 <strncmp+0x1c>

08008194 <_vasniprintf_r>:
 8008194:	b530      	push	{r4, r5, lr}
 8008196:	4615      	mov	r5, r2
 8008198:	b09b      	sub	sp, #108	; 0x6c
 800819a:	682c      	ldr	r4, [r5, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	b189      	cbz	r1, 80081c4 <_vasniprintf_r+0x30>
 80081a0:	2c00      	cmp	r4, #0
 80081a2:	bf12      	itee	ne
 80081a4:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 80081a8:	f44f 7322 	moveq.w	r3, #648	; 0x288
 80081ac:	2100      	moveq	r1, #0
 80081ae:	2c00      	cmp	r4, #0
 80081b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80081b4:	9100      	str	r1, [sp, #0]
 80081b6:	9104      	str	r1, [sp, #16]
 80081b8:	da08      	bge.n	80081cc <_vasniprintf_r+0x38>
 80081ba:	238b      	movs	r3, #139	; 0x8b
 80081bc:	6003      	str	r3, [r0, #0]
 80081be:	2000      	movs	r0, #0
 80081c0:	b01b      	add	sp, #108	; 0x6c
 80081c2:	bd30      	pop	{r4, r5, pc}
 80081c4:	f44f 7322 	mov.w	r3, #648	; 0x288
 80081c8:	460c      	mov	r4, r1
 80081ca:	e7f0      	b.n	80081ae <_vasniprintf_r+0x1a>
 80081cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80081d4:	4669      	mov	r1, sp
 80081d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80081d8:	9402      	str	r4, [sp, #8]
 80081da:	9405      	str	r4, [sp, #20]
 80081dc:	f000 f8cc 	bl	8008378 <_svfiprintf_r>
 80081e0:	1e03      	subs	r3, r0, #0
 80081e2:	bfa4      	itt	ge
 80081e4:	602b      	strge	r3, [r5, #0]
 80081e6:	9b00      	ldrge	r3, [sp, #0]
 80081e8:	f04f 0000 	mov.w	r0, #0
 80081ec:	bfa4      	itt	ge
 80081ee:	7018      	strbge	r0, [r3, #0]
 80081f0:	9804      	ldrge	r0, [sp, #16]
 80081f2:	e7e5      	b.n	80081c0 <_vasniprintf_r+0x2c>

080081f4 <vasniprintf>:
 80081f4:	b507      	push	{r0, r1, r2, lr}
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	460a      	mov	r2, r1
 80081fc:	4601      	mov	r1, r0
 80081fe:	4803      	ldr	r0, [pc, #12]	; (800820c <vasniprintf+0x18>)
 8008200:	6800      	ldr	r0, [r0, #0]
 8008202:	f7ff ffc7 	bl	8008194 <_vasniprintf_r>
 8008206:	b003      	add	sp, #12
 8008208:	f85d fb04 	ldr.w	pc, [sp], #4
 800820c:	20000010 	.word	0x20000010

08008210 <__malloc_lock>:
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <__malloc_lock+0x8>)
 8008212:	f7ff be65 	b.w	8007ee0 <__retarget_lock_acquire_recursive>
 8008216:	bf00      	nop
 8008218:	20005484 	.word	0x20005484

0800821c <__malloc_unlock>:
 800821c:	4801      	ldr	r0, [pc, #4]	; (8008224 <__malloc_unlock+0x8>)
 800821e:	f7ff be60 	b.w	8007ee2 <__retarget_lock_release_recursive>
 8008222:	bf00      	nop
 8008224:	20005484 	.word	0x20005484

08008228 <_free_r>:
 8008228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822a:	2900      	cmp	r1, #0
 800822c:	d044      	beq.n	80082b8 <_free_r+0x90>
 800822e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008232:	9001      	str	r0, [sp, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f1a1 0404 	sub.w	r4, r1, #4
 800823a:	bfb8      	it	lt
 800823c:	18e4      	addlt	r4, r4, r3
 800823e:	f7ff ffe7 	bl	8008210 <__malloc_lock>
 8008242:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <_free_r+0x94>)
 8008244:	9801      	ldr	r0, [sp, #4]
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	b933      	cbnz	r3, 8008258 <_free_r+0x30>
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	b003      	add	sp, #12
 8008250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008254:	f7ff bfe2 	b.w	800821c <__malloc_unlock>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d908      	bls.n	800826e <_free_r+0x46>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf01      	itttt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	1949      	addeq	r1, r1, r5
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	e7ed      	b.n	800824a <_free_r+0x22>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x50>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x46>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1855      	adds	r5, r2, r1
 800827c:	42a5      	cmp	r5, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x70>
 8008280:	6824      	ldr	r4, [r4, #0]
 8008282:	4421      	add	r1, r4
 8008284:	1854      	adds	r4, r2, r1
 8008286:	42a3      	cmp	r3, r4
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1e0      	bne.n	800824e <_free_r+0x26>
 800828c:	681c      	ldr	r4, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	4421      	add	r1, r4
 8008294:	6011      	str	r1, [r2, #0]
 8008296:	e7da      	b.n	800824e <_free_r+0x26>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x78>
 800829a:	230c      	movs	r3, #12
 800829c:	6003      	str	r3, [r0, #0]
 800829e:	e7d6      	b.n	800824e <_free_r+0x26>
 80082a0:	6825      	ldr	r5, [r4, #0]
 80082a2:	1961      	adds	r1, r4, r5
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1949      	addeq	r1, r1, r5
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7ca      	b.n	800824e <_free_r+0x26>
 80082b8:	b003      	add	sp, #12
 80082ba:	bd30      	pop	{r4, r5, pc}
 80082bc:	20005488 	.word	0x20005488

080082c0 <__ssputs_r>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	688e      	ldr	r6, [r1, #8]
 80082c6:	429e      	cmp	r6, r3
 80082c8:	4682      	mov	sl, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	4690      	mov	r8, r2
 80082ce:	461f      	mov	r7, r3
 80082d0:	d838      	bhi.n	8008344 <__ssputs_r+0x84>
 80082d2:	898a      	ldrh	r2, [r1, #12]
 80082d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082d8:	d032      	beq.n	8008340 <__ssputs_r+0x80>
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	6909      	ldr	r1, [r1, #16]
 80082de:	eba5 0901 	sub.w	r9, r5, r1
 80082e2:	6965      	ldr	r5, [r4, #20]
 80082e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ec:	3301      	adds	r3, #1
 80082ee:	444b      	add	r3, r9
 80082f0:	106d      	asrs	r5, r5, #1
 80082f2:	429d      	cmp	r5, r3
 80082f4:	bf38      	it	cc
 80082f6:	461d      	movcc	r5, r3
 80082f8:	0553      	lsls	r3, r2, #21
 80082fa:	d531      	bpl.n	8008360 <__ssputs_r+0xa0>
 80082fc:	4629      	mov	r1, r5
 80082fe:	f7ff fe27 	bl	8007f50 <_malloc_r>
 8008302:	4606      	mov	r6, r0
 8008304:	b950      	cbnz	r0, 800831c <__ssputs_r+0x5c>
 8008306:	230c      	movs	r3, #12
 8008308:	f8ca 3000 	str.w	r3, [sl]
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831c:	6921      	ldr	r1, [r4, #16]
 800831e:	464a      	mov	r2, r9
 8008320:	f7ff fde0 	bl	8007ee4 <memcpy>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800832a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	6126      	str	r6, [r4, #16]
 8008332:	6165      	str	r5, [r4, #20]
 8008334:	444e      	add	r6, r9
 8008336:	eba5 0509 	sub.w	r5, r5, r9
 800833a:	6026      	str	r6, [r4, #0]
 800833c:	60a5      	str	r5, [r4, #8]
 800833e:	463e      	mov	r6, r7
 8008340:	42be      	cmp	r6, r7
 8008342:	d900      	bls.n	8008346 <__ssputs_r+0x86>
 8008344:	463e      	mov	r6, r7
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	4632      	mov	r2, r6
 800834a:	4641      	mov	r1, r8
 800834c:	f000 faa8 	bl	80088a0 <memmove>
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	1b9b      	subs	r3, r3, r6
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	4433      	add	r3, r6
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	2000      	movs	r0, #0
 800835e:	e7db      	b.n	8008318 <__ssputs_r+0x58>
 8008360:	462a      	mov	r2, r5
 8008362:	f000 fab7 	bl	80088d4 <_realloc_r>
 8008366:	4606      	mov	r6, r0
 8008368:	2800      	cmp	r0, #0
 800836a:	d1e1      	bne.n	8008330 <__ssputs_r+0x70>
 800836c:	6921      	ldr	r1, [r4, #16]
 800836e:	4650      	mov	r0, sl
 8008370:	f7ff ff5a 	bl	8008228 <_free_r>
 8008374:	e7c7      	b.n	8008306 <__ssputs_r+0x46>
	...

08008378 <_svfiprintf_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	4698      	mov	r8, r3
 800837e:	898b      	ldrh	r3, [r1, #12]
 8008380:	061b      	lsls	r3, r3, #24
 8008382:	b09d      	sub	sp, #116	; 0x74
 8008384:	4607      	mov	r7, r0
 8008386:	460d      	mov	r5, r1
 8008388:	4614      	mov	r4, r2
 800838a:	d50e      	bpl.n	80083aa <_svfiprintf_r+0x32>
 800838c:	690b      	ldr	r3, [r1, #16]
 800838e:	b963      	cbnz	r3, 80083aa <_svfiprintf_r+0x32>
 8008390:	2140      	movs	r1, #64	; 0x40
 8008392:	f7ff fddd 	bl	8007f50 <_malloc_r>
 8008396:	6028      	str	r0, [r5, #0]
 8008398:	6128      	str	r0, [r5, #16]
 800839a:	b920      	cbnz	r0, 80083a6 <_svfiprintf_r+0x2e>
 800839c:	230c      	movs	r3, #12
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e0d1      	b.n	800854a <_svfiprintf_r+0x1d2>
 80083a6:	2340      	movs	r3, #64	; 0x40
 80083a8:	616b      	str	r3, [r5, #20]
 80083aa:	2300      	movs	r3, #0
 80083ac:	9309      	str	r3, [sp, #36]	; 0x24
 80083ae:	2320      	movs	r3, #32
 80083b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b8:	2330      	movs	r3, #48	; 0x30
 80083ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008564 <_svfiprintf_r+0x1ec>
 80083be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083c2:	f04f 0901 	mov.w	r9, #1
 80083c6:	4623      	mov	r3, r4
 80083c8:	469a      	mov	sl, r3
 80083ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ce:	b10a      	cbz	r2, 80083d4 <_svfiprintf_r+0x5c>
 80083d0:	2a25      	cmp	r2, #37	; 0x25
 80083d2:	d1f9      	bne.n	80083c8 <_svfiprintf_r+0x50>
 80083d4:	ebba 0b04 	subs.w	fp, sl, r4
 80083d8:	d00b      	beq.n	80083f2 <_svfiprintf_r+0x7a>
 80083da:	465b      	mov	r3, fp
 80083dc:	4622      	mov	r2, r4
 80083de:	4629      	mov	r1, r5
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff ff6d 	bl	80082c0 <__ssputs_r>
 80083e6:	3001      	adds	r0, #1
 80083e8:	f000 80aa 	beq.w	8008540 <_svfiprintf_r+0x1c8>
 80083ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ee:	445a      	add	r2, fp
 80083f0:	9209      	str	r2, [sp, #36]	; 0x24
 80083f2:	f89a 3000 	ldrb.w	r3, [sl]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 80a2 	beq.w	8008540 <_svfiprintf_r+0x1c8>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008406:	f10a 0a01 	add.w	sl, sl, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008412:	931a      	str	r3, [sp, #104]	; 0x68
 8008414:	4654      	mov	r4, sl
 8008416:	2205      	movs	r2, #5
 8008418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841c:	4851      	ldr	r0, [pc, #324]	; (8008564 <_svfiprintf_r+0x1ec>)
 800841e:	f7f7 fedf 	bl	80001e0 <memchr>
 8008422:	9a04      	ldr	r2, [sp, #16]
 8008424:	b9d8      	cbnz	r0, 800845e <_svfiprintf_r+0xe6>
 8008426:	06d0      	lsls	r0, r2, #27
 8008428:	bf44      	itt	mi
 800842a:	2320      	movmi	r3, #32
 800842c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008430:	0711      	lsls	r1, r2, #28
 8008432:	bf44      	itt	mi
 8008434:	232b      	movmi	r3, #43	; 0x2b
 8008436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800843a:	f89a 3000 	ldrb.w	r3, [sl]
 800843e:	2b2a      	cmp	r3, #42	; 0x2a
 8008440:	d015      	beq.n	800846e <_svfiprintf_r+0xf6>
 8008442:	9a07      	ldr	r2, [sp, #28]
 8008444:	4654      	mov	r4, sl
 8008446:	2000      	movs	r0, #0
 8008448:	f04f 0c0a 	mov.w	ip, #10
 800844c:	4621      	mov	r1, r4
 800844e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008452:	3b30      	subs	r3, #48	; 0x30
 8008454:	2b09      	cmp	r3, #9
 8008456:	d94e      	bls.n	80084f6 <_svfiprintf_r+0x17e>
 8008458:	b1b0      	cbz	r0, 8008488 <_svfiprintf_r+0x110>
 800845a:	9207      	str	r2, [sp, #28]
 800845c:	e014      	b.n	8008488 <_svfiprintf_r+0x110>
 800845e:	eba0 0308 	sub.w	r3, r0, r8
 8008462:	fa09 f303 	lsl.w	r3, r9, r3
 8008466:	4313      	orrs	r3, r2
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	46a2      	mov	sl, r4
 800846c:	e7d2      	b.n	8008414 <_svfiprintf_r+0x9c>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	1d19      	adds	r1, r3, #4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	9103      	str	r1, [sp, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfbb      	ittet	lt
 800847a:	425b      	neglt	r3, r3
 800847c:	f042 0202 	orrlt.w	r2, r2, #2
 8008480:	9307      	strge	r3, [sp, #28]
 8008482:	9307      	strlt	r3, [sp, #28]
 8008484:	bfb8      	it	lt
 8008486:	9204      	strlt	r2, [sp, #16]
 8008488:	7823      	ldrb	r3, [r4, #0]
 800848a:	2b2e      	cmp	r3, #46	; 0x2e
 800848c:	d10c      	bne.n	80084a8 <_svfiprintf_r+0x130>
 800848e:	7863      	ldrb	r3, [r4, #1]
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	d135      	bne.n	8008500 <_svfiprintf_r+0x188>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9203      	str	r2, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfb8      	it	lt
 80084a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80084a4:	3402      	adds	r4, #2
 80084a6:	9305      	str	r3, [sp, #20]
 80084a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008574 <_svfiprintf_r+0x1fc>
 80084ac:	7821      	ldrb	r1, [r4, #0]
 80084ae:	2203      	movs	r2, #3
 80084b0:	4650      	mov	r0, sl
 80084b2:	f7f7 fe95 	bl	80001e0 <memchr>
 80084b6:	b140      	cbz	r0, 80084ca <_svfiprintf_r+0x152>
 80084b8:	2340      	movs	r3, #64	; 0x40
 80084ba:	eba0 000a 	sub.w	r0, r0, sl
 80084be:	fa03 f000 	lsl.w	r0, r3, r0
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	4303      	orrs	r3, r0
 80084c6:	3401      	adds	r4, #1
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ce:	4826      	ldr	r0, [pc, #152]	; (8008568 <_svfiprintf_r+0x1f0>)
 80084d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084d4:	2206      	movs	r2, #6
 80084d6:	f7f7 fe83 	bl	80001e0 <memchr>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d038      	beq.n	8008550 <_svfiprintf_r+0x1d8>
 80084de:	4b23      	ldr	r3, [pc, #140]	; (800856c <_svfiprintf_r+0x1f4>)
 80084e0:	bb1b      	cbnz	r3, 800852a <_svfiprintf_r+0x1b2>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	3307      	adds	r3, #7
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	3308      	adds	r3, #8
 80084ec:	9303      	str	r3, [sp, #12]
 80084ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f0:	4433      	add	r3, r6
 80084f2:	9309      	str	r3, [sp, #36]	; 0x24
 80084f4:	e767      	b.n	80083c6 <_svfiprintf_r+0x4e>
 80084f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80084fa:	460c      	mov	r4, r1
 80084fc:	2001      	movs	r0, #1
 80084fe:	e7a5      	b.n	800844c <_svfiprintf_r+0xd4>
 8008500:	2300      	movs	r3, #0
 8008502:	3401      	adds	r4, #1
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	4619      	mov	r1, r3
 8008508:	f04f 0c0a 	mov.w	ip, #10
 800850c:	4620      	mov	r0, r4
 800850e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008512:	3a30      	subs	r2, #48	; 0x30
 8008514:	2a09      	cmp	r2, #9
 8008516:	d903      	bls.n	8008520 <_svfiprintf_r+0x1a8>
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0c5      	beq.n	80084a8 <_svfiprintf_r+0x130>
 800851c:	9105      	str	r1, [sp, #20]
 800851e:	e7c3      	b.n	80084a8 <_svfiprintf_r+0x130>
 8008520:	fb0c 2101 	mla	r1, ip, r1, r2
 8008524:	4604      	mov	r4, r0
 8008526:	2301      	movs	r3, #1
 8008528:	e7f0      	b.n	800850c <_svfiprintf_r+0x194>
 800852a:	ab03      	add	r3, sp, #12
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	462a      	mov	r2, r5
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <_svfiprintf_r+0x1f8>)
 8008532:	a904      	add	r1, sp, #16
 8008534:	4638      	mov	r0, r7
 8008536:	f3af 8000 	nop.w
 800853a:	1c42      	adds	r2, r0, #1
 800853c:	4606      	mov	r6, r0
 800853e:	d1d6      	bne.n	80084ee <_svfiprintf_r+0x176>
 8008540:	89ab      	ldrh	r3, [r5, #12]
 8008542:	065b      	lsls	r3, r3, #25
 8008544:	f53f af2c 	bmi.w	80083a0 <_svfiprintf_r+0x28>
 8008548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800854a:	b01d      	add	sp, #116	; 0x74
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008550:	ab03      	add	r3, sp, #12
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	462a      	mov	r2, r5
 8008556:	4b06      	ldr	r3, [pc, #24]	; (8008570 <_svfiprintf_r+0x1f8>)
 8008558:	a904      	add	r1, sp, #16
 800855a:	4638      	mov	r0, r7
 800855c:	f000 f87a 	bl	8008654 <_printf_i>
 8008560:	e7eb      	b.n	800853a <_svfiprintf_r+0x1c2>
 8008562:	bf00      	nop
 8008564:	08008b04 	.word	0x08008b04
 8008568:	08008b0e 	.word	0x08008b0e
 800856c:	00000000 	.word	0x00000000
 8008570:	080082c1 	.word	0x080082c1
 8008574:	08008b0a 	.word	0x08008b0a

08008578 <_printf_common>:
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	4616      	mov	r6, r2
 800857e:	4699      	mov	r9, r3
 8008580:	688a      	ldr	r2, [r1, #8]
 8008582:	690b      	ldr	r3, [r1, #16]
 8008584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008588:	4293      	cmp	r3, r2
 800858a:	bfb8      	it	lt
 800858c:	4613      	movlt	r3, r2
 800858e:	6033      	str	r3, [r6, #0]
 8008590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008594:	4607      	mov	r7, r0
 8008596:	460c      	mov	r4, r1
 8008598:	b10a      	cbz	r2, 800859e <_printf_common+0x26>
 800859a:	3301      	adds	r3, #1
 800859c:	6033      	str	r3, [r6, #0]
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	0699      	lsls	r1, r3, #26
 80085a2:	bf42      	ittt	mi
 80085a4:	6833      	ldrmi	r3, [r6, #0]
 80085a6:	3302      	addmi	r3, #2
 80085a8:	6033      	strmi	r3, [r6, #0]
 80085aa:	6825      	ldr	r5, [r4, #0]
 80085ac:	f015 0506 	ands.w	r5, r5, #6
 80085b0:	d106      	bne.n	80085c0 <_printf_common+0x48>
 80085b2:	f104 0a19 	add.w	sl, r4, #25
 80085b6:	68e3      	ldr	r3, [r4, #12]
 80085b8:	6832      	ldr	r2, [r6, #0]
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	42ab      	cmp	r3, r5
 80085be:	dc26      	bgt.n	800860e <_printf_common+0x96>
 80085c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085c4:	1e13      	subs	r3, r2, #0
 80085c6:	6822      	ldr	r2, [r4, #0]
 80085c8:	bf18      	it	ne
 80085ca:	2301      	movne	r3, #1
 80085cc:	0692      	lsls	r2, r2, #26
 80085ce:	d42b      	bmi.n	8008628 <_printf_common+0xb0>
 80085d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085d4:	4649      	mov	r1, r9
 80085d6:	4638      	mov	r0, r7
 80085d8:	47c0      	blx	r8
 80085da:	3001      	adds	r0, #1
 80085dc:	d01e      	beq.n	800861c <_printf_common+0xa4>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	68e5      	ldr	r5, [r4, #12]
 80085e2:	6832      	ldr	r2, [r6, #0]
 80085e4:	f003 0306 	and.w	r3, r3, #6
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	bf08      	it	eq
 80085ec:	1aad      	subeq	r5, r5, r2
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	6922      	ldr	r2, [r4, #16]
 80085f2:	bf0c      	ite	eq
 80085f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085f8:	2500      	movne	r5, #0
 80085fa:	4293      	cmp	r3, r2
 80085fc:	bfc4      	itt	gt
 80085fe:	1a9b      	subgt	r3, r3, r2
 8008600:	18ed      	addgt	r5, r5, r3
 8008602:	2600      	movs	r6, #0
 8008604:	341a      	adds	r4, #26
 8008606:	42b5      	cmp	r5, r6
 8008608:	d11a      	bne.n	8008640 <_printf_common+0xc8>
 800860a:	2000      	movs	r0, #0
 800860c:	e008      	b.n	8008620 <_printf_common+0xa8>
 800860e:	2301      	movs	r3, #1
 8008610:	4652      	mov	r2, sl
 8008612:	4649      	mov	r1, r9
 8008614:	4638      	mov	r0, r7
 8008616:	47c0      	blx	r8
 8008618:	3001      	adds	r0, #1
 800861a:	d103      	bne.n	8008624 <_printf_common+0xac>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	3501      	adds	r5, #1
 8008626:	e7c6      	b.n	80085b6 <_printf_common+0x3e>
 8008628:	18e1      	adds	r1, r4, r3
 800862a:	1c5a      	adds	r2, r3, #1
 800862c:	2030      	movs	r0, #48	; 0x30
 800862e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008632:	4422      	add	r2, r4
 8008634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800863c:	3302      	adds	r3, #2
 800863e:	e7c7      	b.n	80085d0 <_printf_common+0x58>
 8008640:	2301      	movs	r3, #1
 8008642:	4622      	mov	r2, r4
 8008644:	4649      	mov	r1, r9
 8008646:	4638      	mov	r0, r7
 8008648:	47c0      	blx	r8
 800864a:	3001      	adds	r0, #1
 800864c:	d0e6      	beq.n	800861c <_printf_common+0xa4>
 800864e:	3601      	adds	r6, #1
 8008650:	e7d9      	b.n	8008606 <_printf_common+0x8e>
	...

08008654 <_printf_i>:
 8008654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008658:	7e0f      	ldrb	r7, [r1, #24]
 800865a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800865c:	2f78      	cmp	r7, #120	; 0x78
 800865e:	4691      	mov	r9, r2
 8008660:	4680      	mov	r8, r0
 8008662:	460c      	mov	r4, r1
 8008664:	469a      	mov	sl, r3
 8008666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800866a:	d807      	bhi.n	800867c <_printf_i+0x28>
 800866c:	2f62      	cmp	r7, #98	; 0x62
 800866e:	d80a      	bhi.n	8008686 <_printf_i+0x32>
 8008670:	2f00      	cmp	r7, #0
 8008672:	f000 80d8 	beq.w	8008826 <_printf_i+0x1d2>
 8008676:	2f58      	cmp	r7, #88	; 0x58
 8008678:	f000 80a3 	beq.w	80087c2 <_printf_i+0x16e>
 800867c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008684:	e03a      	b.n	80086fc <_printf_i+0xa8>
 8008686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800868a:	2b15      	cmp	r3, #21
 800868c:	d8f6      	bhi.n	800867c <_printf_i+0x28>
 800868e:	a101      	add	r1, pc, #4	; (adr r1, 8008694 <_printf_i+0x40>)
 8008690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008694:	080086ed 	.word	0x080086ed
 8008698:	08008701 	.word	0x08008701
 800869c:	0800867d 	.word	0x0800867d
 80086a0:	0800867d 	.word	0x0800867d
 80086a4:	0800867d 	.word	0x0800867d
 80086a8:	0800867d 	.word	0x0800867d
 80086ac:	08008701 	.word	0x08008701
 80086b0:	0800867d 	.word	0x0800867d
 80086b4:	0800867d 	.word	0x0800867d
 80086b8:	0800867d 	.word	0x0800867d
 80086bc:	0800867d 	.word	0x0800867d
 80086c0:	0800880d 	.word	0x0800880d
 80086c4:	08008731 	.word	0x08008731
 80086c8:	080087ef 	.word	0x080087ef
 80086cc:	0800867d 	.word	0x0800867d
 80086d0:	0800867d 	.word	0x0800867d
 80086d4:	0800882f 	.word	0x0800882f
 80086d8:	0800867d 	.word	0x0800867d
 80086dc:	08008731 	.word	0x08008731
 80086e0:	0800867d 	.word	0x0800867d
 80086e4:	0800867d 	.word	0x0800867d
 80086e8:	080087f7 	.word	0x080087f7
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	602a      	str	r2, [r5, #0]
 80086f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0a3      	b.n	8008848 <_printf_i+0x1f4>
 8008700:	6820      	ldr	r0, [r4, #0]
 8008702:	6829      	ldr	r1, [r5, #0]
 8008704:	0606      	lsls	r6, r0, #24
 8008706:	f101 0304 	add.w	r3, r1, #4
 800870a:	d50a      	bpl.n	8008722 <_printf_i+0xce>
 800870c:	680e      	ldr	r6, [r1, #0]
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	2e00      	cmp	r6, #0
 8008712:	da03      	bge.n	800871c <_printf_i+0xc8>
 8008714:	232d      	movs	r3, #45	; 0x2d
 8008716:	4276      	negs	r6, r6
 8008718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800871c:	485e      	ldr	r0, [pc, #376]	; (8008898 <_printf_i+0x244>)
 800871e:	230a      	movs	r3, #10
 8008720:	e019      	b.n	8008756 <_printf_i+0x102>
 8008722:	680e      	ldr	r6, [r1, #0]
 8008724:	602b      	str	r3, [r5, #0]
 8008726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800872a:	bf18      	it	ne
 800872c:	b236      	sxthne	r6, r6
 800872e:	e7ef      	b.n	8008710 <_printf_i+0xbc>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	6820      	ldr	r0, [r4, #0]
 8008734:	1d19      	adds	r1, r3, #4
 8008736:	6029      	str	r1, [r5, #0]
 8008738:	0601      	lsls	r1, r0, #24
 800873a:	d501      	bpl.n	8008740 <_printf_i+0xec>
 800873c:	681e      	ldr	r6, [r3, #0]
 800873e:	e002      	b.n	8008746 <_printf_i+0xf2>
 8008740:	0646      	lsls	r6, r0, #25
 8008742:	d5fb      	bpl.n	800873c <_printf_i+0xe8>
 8008744:	881e      	ldrh	r6, [r3, #0]
 8008746:	4854      	ldr	r0, [pc, #336]	; (8008898 <_printf_i+0x244>)
 8008748:	2f6f      	cmp	r7, #111	; 0x6f
 800874a:	bf0c      	ite	eq
 800874c:	2308      	moveq	r3, #8
 800874e:	230a      	movne	r3, #10
 8008750:	2100      	movs	r1, #0
 8008752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008756:	6865      	ldr	r5, [r4, #4]
 8008758:	60a5      	str	r5, [r4, #8]
 800875a:	2d00      	cmp	r5, #0
 800875c:	bfa2      	ittt	ge
 800875e:	6821      	ldrge	r1, [r4, #0]
 8008760:	f021 0104 	bicge.w	r1, r1, #4
 8008764:	6021      	strge	r1, [r4, #0]
 8008766:	b90e      	cbnz	r6, 800876c <_printf_i+0x118>
 8008768:	2d00      	cmp	r5, #0
 800876a:	d04d      	beq.n	8008808 <_printf_i+0x1b4>
 800876c:	4615      	mov	r5, r2
 800876e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008772:	fb03 6711 	mls	r7, r3, r1, r6
 8008776:	5dc7      	ldrb	r7, [r0, r7]
 8008778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800877c:	4637      	mov	r7, r6
 800877e:	42bb      	cmp	r3, r7
 8008780:	460e      	mov	r6, r1
 8008782:	d9f4      	bls.n	800876e <_printf_i+0x11a>
 8008784:	2b08      	cmp	r3, #8
 8008786:	d10b      	bne.n	80087a0 <_printf_i+0x14c>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	07de      	lsls	r6, r3, #31
 800878c:	d508      	bpl.n	80087a0 <_printf_i+0x14c>
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	6861      	ldr	r1, [r4, #4]
 8008792:	4299      	cmp	r1, r3
 8008794:	bfde      	ittt	le
 8008796:	2330      	movle	r3, #48	; 0x30
 8008798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800879c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087a0:	1b52      	subs	r2, r2, r5
 80087a2:	6122      	str	r2, [r4, #16]
 80087a4:	f8cd a000 	str.w	sl, [sp]
 80087a8:	464b      	mov	r3, r9
 80087aa:	aa03      	add	r2, sp, #12
 80087ac:	4621      	mov	r1, r4
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7ff fee2 	bl	8008578 <_printf_common>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d14c      	bne.n	8008852 <_printf_i+0x1fe>
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	b004      	add	sp, #16
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	4835      	ldr	r0, [pc, #212]	; (8008898 <_printf_i+0x244>)
 80087c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087c8:	6829      	ldr	r1, [r5, #0]
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80087d0:	6029      	str	r1, [r5, #0]
 80087d2:	061d      	lsls	r5, r3, #24
 80087d4:	d514      	bpl.n	8008800 <_printf_i+0x1ac>
 80087d6:	07df      	lsls	r7, r3, #31
 80087d8:	bf44      	itt	mi
 80087da:	f043 0320 	orrmi.w	r3, r3, #32
 80087de:	6023      	strmi	r3, [r4, #0]
 80087e0:	b91e      	cbnz	r6, 80087ea <_printf_i+0x196>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f023 0320 	bic.w	r3, r3, #32
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	2310      	movs	r3, #16
 80087ec:	e7b0      	b.n	8008750 <_printf_i+0xfc>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	f043 0320 	orr.w	r3, r3, #32
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	2378      	movs	r3, #120	; 0x78
 80087f8:	4828      	ldr	r0, [pc, #160]	; (800889c <_printf_i+0x248>)
 80087fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087fe:	e7e3      	b.n	80087c8 <_printf_i+0x174>
 8008800:	0659      	lsls	r1, r3, #25
 8008802:	bf48      	it	mi
 8008804:	b2b6      	uxthmi	r6, r6
 8008806:	e7e6      	b.n	80087d6 <_printf_i+0x182>
 8008808:	4615      	mov	r5, r2
 800880a:	e7bb      	b.n	8008784 <_printf_i+0x130>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	6826      	ldr	r6, [r4, #0]
 8008810:	6961      	ldr	r1, [r4, #20]
 8008812:	1d18      	adds	r0, r3, #4
 8008814:	6028      	str	r0, [r5, #0]
 8008816:	0635      	lsls	r5, r6, #24
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	d501      	bpl.n	8008820 <_printf_i+0x1cc>
 800881c:	6019      	str	r1, [r3, #0]
 800881e:	e002      	b.n	8008826 <_printf_i+0x1d2>
 8008820:	0670      	lsls	r0, r6, #25
 8008822:	d5fb      	bpl.n	800881c <_printf_i+0x1c8>
 8008824:	8019      	strh	r1, [r3, #0]
 8008826:	2300      	movs	r3, #0
 8008828:	6123      	str	r3, [r4, #16]
 800882a:	4615      	mov	r5, r2
 800882c:	e7ba      	b.n	80087a4 <_printf_i+0x150>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	602a      	str	r2, [r5, #0]
 8008834:	681d      	ldr	r5, [r3, #0]
 8008836:	6862      	ldr	r2, [r4, #4]
 8008838:	2100      	movs	r1, #0
 800883a:	4628      	mov	r0, r5
 800883c:	f7f7 fcd0 	bl	80001e0 <memchr>
 8008840:	b108      	cbz	r0, 8008846 <_printf_i+0x1f2>
 8008842:	1b40      	subs	r0, r0, r5
 8008844:	6060      	str	r0, [r4, #4]
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	2300      	movs	r3, #0
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008850:	e7a8      	b.n	80087a4 <_printf_i+0x150>
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	462a      	mov	r2, r5
 8008856:	4649      	mov	r1, r9
 8008858:	4640      	mov	r0, r8
 800885a:	47d0      	blx	sl
 800885c:	3001      	adds	r0, #1
 800885e:	d0ab      	beq.n	80087b8 <_printf_i+0x164>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	079b      	lsls	r3, r3, #30
 8008864:	d413      	bmi.n	800888e <_printf_i+0x23a>
 8008866:	68e0      	ldr	r0, [r4, #12]
 8008868:	9b03      	ldr	r3, [sp, #12]
 800886a:	4298      	cmp	r0, r3
 800886c:	bfb8      	it	lt
 800886e:	4618      	movlt	r0, r3
 8008870:	e7a4      	b.n	80087bc <_printf_i+0x168>
 8008872:	2301      	movs	r3, #1
 8008874:	4632      	mov	r2, r6
 8008876:	4649      	mov	r1, r9
 8008878:	4640      	mov	r0, r8
 800887a:	47d0      	blx	sl
 800887c:	3001      	adds	r0, #1
 800887e:	d09b      	beq.n	80087b8 <_printf_i+0x164>
 8008880:	3501      	adds	r5, #1
 8008882:	68e3      	ldr	r3, [r4, #12]
 8008884:	9903      	ldr	r1, [sp, #12]
 8008886:	1a5b      	subs	r3, r3, r1
 8008888:	42ab      	cmp	r3, r5
 800888a:	dcf2      	bgt.n	8008872 <_printf_i+0x21e>
 800888c:	e7eb      	b.n	8008866 <_printf_i+0x212>
 800888e:	2500      	movs	r5, #0
 8008890:	f104 0619 	add.w	r6, r4, #25
 8008894:	e7f5      	b.n	8008882 <_printf_i+0x22e>
 8008896:	bf00      	nop
 8008898:	08008b15 	.word	0x08008b15
 800889c:	08008b26 	.word	0x08008b26

080088a0 <memmove>:
 80088a0:	4288      	cmp	r0, r1
 80088a2:	b510      	push	{r4, lr}
 80088a4:	eb01 0402 	add.w	r4, r1, r2
 80088a8:	d902      	bls.n	80088b0 <memmove+0x10>
 80088aa:	4284      	cmp	r4, r0
 80088ac:	4623      	mov	r3, r4
 80088ae:	d807      	bhi.n	80088c0 <memmove+0x20>
 80088b0:	1e43      	subs	r3, r0, #1
 80088b2:	42a1      	cmp	r1, r4
 80088b4:	d008      	beq.n	80088c8 <memmove+0x28>
 80088b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088be:	e7f8      	b.n	80088b2 <memmove+0x12>
 80088c0:	4402      	add	r2, r0
 80088c2:	4601      	mov	r1, r0
 80088c4:	428a      	cmp	r2, r1
 80088c6:	d100      	bne.n	80088ca <memmove+0x2a>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088d2:	e7f7      	b.n	80088c4 <memmove+0x24>

080088d4 <_realloc_r>:
 80088d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d8:	4680      	mov	r8, r0
 80088da:	4614      	mov	r4, r2
 80088dc:	460e      	mov	r6, r1
 80088de:	b921      	cbnz	r1, 80088ea <_realloc_r+0x16>
 80088e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	4611      	mov	r1, r2
 80088e6:	f7ff bb33 	b.w	8007f50 <_malloc_r>
 80088ea:	b92a      	cbnz	r2, 80088f8 <_realloc_r+0x24>
 80088ec:	f7ff fc9c 	bl	8008228 <_free_r>
 80088f0:	4625      	mov	r5, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f8:	f000 f81b 	bl	8008932 <_malloc_usable_size_r>
 80088fc:	4284      	cmp	r4, r0
 80088fe:	4607      	mov	r7, r0
 8008900:	d802      	bhi.n	8008908 <_realloc_r+0x34>
 8008902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008906:	d812      	bhi.n	800892e <_realloc_r+0x5a>
 8008908:	4621      	mov	r1, r4
 800890a:	4640      	mov	r0, r8
 800890c:	f7ff fb20 	bl	8007f50 <_malloc_r>
 8008910:	4605      	mov	r5, r0
 8008912:	2800      	cmp	r0, #0
 8008914:	d0ed      	beq.n	80088f2 <_realloc_r+0x1e>
 8008916:	42bc      	cmp	r4, r7
 8008918:	4622      	mov	r2, r4
 800891a:	4631      	mov	r1, r6
 800891c:	bf28      	it	cs
 800891e:	463a      	movcs	r2, r7
 8008920:	f7ff fae0 	bl	8007ee4 <memcpy>
 8008924:	4631      	mov	r1, r6
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fc7e 	bl	8008228 <_free_r>
 800892c:	e7e1      	b.n	80088f2 <_realloc_r+0x1e>
 800892e:	4635      	mov	r5, r6
 8008930:	e7df      	b.n	80088f2 <_realloc_r+0x1e>

08008932 <_malloc_usable_size_r>:
 8008932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008936:	1f18      	subs	r0, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	bfbc      	itt	lt
 800893c:	580b      	ldrlt	r3, [r1, r0]
 800893e:	18c0      	addlt	r0, r0, r3
 8008940:	4770      	bx	lr
	...

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr
